name: Deploy PR build and run Lighthouse
on:
  pull_request:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
          if_key_exists: replace

      - uses: actions/checkout@v2

      - name: Set up node.js
        uses: actions/setup-node@v2-beta
        with:
          node-version: 16.15.0

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile --ignore-engines --prefer-offline

      - name: Clone ocw-www for content
        run: (cd ..; git clone git@github.mit.edu:ocw-content-rc/ocw-www.git ocw-www)

      - name: Clone ocw-course for content
        run: (cd ..; git clone git@github.mit.edu:ocw-content-rc/15.s21-january-iap-2014.git ocw-course)

      - name: Clone ocw-hugo-projects for config
        run: (cd ..; git clone https://github.com/mitodl/ocw-hugo-projects)

      - name: Run webpack build
        run: npm run build:webpack -- --output-path=../ocw-www/public/static/

      - name: Copy webpack build to course
        run: npm run build:webpack -- --output-path=../ocw-course/public/static/

      - name: Run hugo build
        run: (cd ../ocw-www; hugo --config ../ocw-hugo-projects/ocw-www/config.yaml --themesDir ../ocw-hugo-themes)
        env:
          OCW_STUDIO_BASE_URL: ${{ secrets.OCW_STUDIO_BASE_URL }}
          SEARCH_API_URL: ${{ secrets.SEARCH_API_URL }}
          OCW_IMPORT_STARTER_SLUG: ${{ secrets.OCW_IMPORT_STARTER_SLUG }}
          STATIC_API_BASE_URL: ${{ secrets.STATIC_API_BASE_URL }}
      
      - name: Run hugo course build
        run: (cd ../ocw-course; hugo --config ../ocw-hugo-projects/ocw-course/config.yaml --themesDir ../ocw-hugo-themes)
        env:
          OCW_STUDIO_BASE_URL: ${{ secrets.OCW_STUDIO_BASE_URL }}
          SEARCH_API_URL: ${{ secrets.SEARCH_API_URL }}
          OCW_IMPORT_STARTER_SLUG: ${{ secrets.OCW_IMPORT_STARTER_SLUG }}
          STATIC_API_BASE_URL: ${{ secrets.STATIC_API_BASE_URL }}
          RESOURCE_BASE_URL: ${{ secrets.RESOURCE_BASE_URL }}

      - name: Deploy PR Preview to Netlify
        uses: nwtgck/actions-netlify@v1.1
        if: ${{ github.event_name == 'pull_request' }}
        with:
          publish-dir: '../ocw-www/public'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-pull-request-comment: true
          enable-commit-comment: false
          overwrites-pull-request-comment: true
          alias: ocw-hugo-themes-pr-${{ github.event.number }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      
      - name: Deploy Course Preview to Netlify
        uses: nwtgck/actions-netlify@v1.1
        if: ${{ github.event_name == 'pull_request' }}
        with:
          publish-dir: '../ocw-course/public'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-pull-request-comment: true
          enable-commit-comment: false
          overwrites-pull-request-comment: true
          alias: ocw-hugo-themes-course-${{ github.event.number }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Deploy CI build to Netlify
        uses: nwtgck/actions-netlify@v1.1
        if: ${{ github.event_name == 'push' }}
        with:
          publish-dir: '../ocw-www/public'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-pull-request-comment: false
          enable-commit-comment: false
          production-deploy: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  lighthouse:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@master
      - run: mkdir -p ${{ github.workspace }}/tmp/artifacts

      - name: Set up node.js
        uses: actions/setup-node@v2-beta
        with:
          node-version: 16.15.0

      - name: Run Lighthouse
        uses: foo-software/lighthouse-check-action@master
        id: lighthouseCheck
        with:
          branch: ${{ github.ref }}
          outputDirectory: ${{ github.workspace }}/tmp/artifacts
          urls: 'https://ocw-hugo-themes-pr-${{ github.event.number }}--ocw-next.netlify.app/,https://ocw-hugo-themes-pr-${{ github.event.number }}--ocw-next.netlify.app/search/'
          sha: ${{ github.sha }}

      - name: Set comment body
        id: set-comment-body
        run: |
          body=$(echo '${{ steps.lighthouseCheck.outputs.lighthouseCheckResults }}' | node util/formatLighthouseComment.js)
          body="${body//'%'/'%25'}"
          body="${body//$'\n'/'%0A'}"
          body="${body//$'\r'/'%0D'}"
          echo ::set-output name=body::$body

      - name: Find Comment
        uses: peter-evans/find-comment@v1
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: "Lighthouse results:"

      - name: Create comment
        if: ${{ steps.fc.outputs.comment-id == 0 }}
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.set-comment-body.outputs.body }}

      - name: Update comment
        if: ${{ steps.fc.outputs.comment-id != 0 }}
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          edit-mode: replace
          body: ${{ steps.set-comment-body.outputs.body }}
