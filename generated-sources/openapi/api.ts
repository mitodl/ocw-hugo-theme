/* tslint:disable */
/* eslint-disable */
/**
 * MIT Open API
 * MIT public API
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration"
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios"
import globalAxios from "axios"
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from "./common"
import type { RequestArgs } from "./base"
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap
} from "./base"

/**
 * Serializer for LearningResourceInstructor model
 * @export
 * @interface Article
 */
export interface Article {
  /**
   *
   * @type {string}
   * @memberof Article
   */
  html: string
  /**
   *
   * @type {number}
   * @memberof Article
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof Article
   */
  title: string
}
/**
 * Serializer for LearningResourceInstructor model
 * @export
 * @interface ArticleRequest
 */
export interface ArticleRequest {
  /**
   *
   * @type {string}
   * @memberof ArticleRequest
   */
  html: string
  /**
   *
   * @type {string}
   * @memberof ArticleRequest
   */
  title: string
}
/**
 * Serializer class for course run ContentFiles
 * @export
 * @interface ContentFile
 */
export interface ContentFile {
  /**
   *
   * @type {number}
   * @memberof ContentFile
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof ContentFile
   */
  run_id: number
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  run_title: string
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  run_slug: string
  /**
   *
   * @type {Array<LearningResourceDepartment>}
   * @memberof ContentFile
   */
  departments: Array<LearningResourceDepartment>
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  semester: string
  /**
   *
   * @type {number}
   * @memberof ContentFile
   */
  year: number
  /**
   *
   * @type {Array<string>}
   * @memberof ContentFile
   */
  topics: Array<string>
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  key?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  uid?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  title?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  url?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  short_url?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  section?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  section_slug?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  content_category: string
  /**
   *
   * @type {ContentTypeEnum}
   * @memberof ContentFile
   */
  content_type?: ContentTypeEnum
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  content?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  content_title?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  content_author?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  content_language?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  image_src?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  resource_id: string
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  resource_readable_id: string
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  resource_readable_num: string
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  file_type?: string | null
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  offered_by: string
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  platform: string
  /**
   *
   * @type {string}
   * @memberof ContentFile
   */
  run_readable_id: string
}

/**
 * * `page` - page * `file` - file * `vertical` - vertical
 * @export
 * @enum {string}
 */

export const ContentTypeEnum = {
  Page: "page",
  File: "file",
  Vertical: "vertical"
} as const

export type ContentTypeEnum =
  typeof ContentTypeEnum[keyof typeof ContentTypeEnum]

/**
 * Serializer for the Course model
 * @export
 * @interface Course
 */
export interface Course {
  /**
   *
   * @type {Array<CourseNumber>}
   * @memberof Course
   */
  course_numbers: Array<CourseNumber> | null
}
/**
 * Serializer for CourseNumber
 * @export
 * @interface CourseNumber
 */
export interface CourseNumber {
  /**
   *
   * @type {string}
   * @memberof CourseNumber
   */
  value: string
  /**
   *
   * @type {LearningResourceDepartment}
   * @memberof CourseNumber
   */
  department: LearningResourceDepartment
  /**
   *
   * @type {string}
   * @memberof CourseNumber
   */
  listing_type: string
}
/**
 * Serializer for CourseNumber
 * @export
 * @interface CourseNumberRequest
 */
export interface CourseNumberRequest {
  /**
   *
   * @type {string}
   * @memberof CourseNumberRequest
   */
  value: string
  /**
   *
   * @type {LearningResourceDepartmentRequest}
   * @memberof CourseNumberRequest
   */
  department: LearningResourceDepartmentRequest
  /**
   *
   * @type {string}
   * @memberof CourseNumberRequest
   */
  listing_type: string
}
/**
 * Serializer for the Course model
 * @export
 * @interface CourseRequest
 */
export interface CourseRequest {
  /**
   *
   * @type {Array<CourseNumberRequest>}
   * @memberof CourseRequest
   */
  course_numbers: Array<CourseNumberRequest> | null
}
/**
 * Serializer for FieldChannel
 * @export
 * @interface FieldChannel
 */
export interface FieldChannel {
  /**
   *
   * @type {string}
   * @memberof FieldChannel
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof FieldChannel
   */
  title: string
  /**
   *
   * @type {{ [key: string]: any; }}
   * @memberof FieldChannel
   */
  about: { [key: string]: any } | null
  /**
   *
   * @type {string}
   * @memberof FieldChannel
   */
  public_description: string
  /**
   *
   * @type {Array<Subfield>}
   * @memberof FieldChannel
   */
  subfields: Array<Subfield>
  /**
   *
   * @type {FieldChannelFeaturedList}
   * @memberof FieldChannel
   */
  featured_list: FieldChannelFeaturedList
  /**
   *
   * @type {Array<LearningPathPreview>}
   * @memberof FieldChannel
   */
  lists: Array<LearningPathPreview>
  /**
   * Get the avatar image URL
   * @type {string}
   * @memberof FieldChannel
   */
  avatar?: string
  /**
   * Get the avatar image medium URL
   * @type {string}
   * @memberof FieldChannel
   */
  avatar_medium: string
  /**
   * Get the avatar image small URL
   * @type {string}
   * @memberof FieldChannel
   */
  avatar_small: string
  /**
   * Get the banner image URL
   * @type {string}
   * @memberof FieldChannel
   */
  banner?: string
  /**
   *
   * @type {number}
   * @memberof FieldChannel
   */
  widget_list: number | null
  /**
   *
   * @type {string}
   * @memberof FieldChannel
   */
  updated_on: string
  /**
   *
   * @type {string}
   * @memberof FieldChannel
   */
  created_on: string
  /**
   *
   * @type {number}
   * @memberof FieldChannel
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof FieldChannel
   */
  ga_tracking_id: string
  /**
   * Return true if user is a moderator for the channel
   * @type {boolean}
   * @memberof FieldChannel
   */
  is_moderator: boolean
}
/**
 * Write serializer for FieldChannel. Uses primary keys for referenced objects during requests, and delegates to FieldChannelSerializer for responses.
 * @export
 * @interface FieldChannelCreateRequest
 */
export interface FieldChannelCreateRequest {
  /**
   *
   * @type {string}
   * @memberof FieldChannelCreateRequest
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof FieldChannelCreateRequest
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof FieldChannelCreateRequest
   */
  public_description?: string
  /**
   *
   * @type {Array<string>}
   * @memberof FieldChannelCreateRequest
   */
  subfields?: Array<string>
  /**
   * Learng path featured in this field.
   * @type {number}
   * @memberof FieldChannelCreateRequest
   */
  featured_list?: number | null
  /**
   * Learng paths in this field.
   * @type {Array<number>}
   * @memberof FieldChannelCreateRequest
   */
  lists?: Array<number>
  /**
   *
   * @type {File}
   * @memberof FieldChannelCreateRequest
   */
  avatar?: File | null
  /**
   *
   * @type {File}
   * @memberof FieldChannelCreateRequest
   */
  banner?: File | null
  /**
   *
   * @type {{ [key: string]: any; }}
   * @memberof FieldChannelCreateRequest
   */
  about?: { [key: string]: any } | null
}
/**
 * Learning path featured in this field.
 * @export
 * @interface FieldChannelFeaturedList
 */
export interface FieldChannelFeaturedList {
  /**
   *
   * @type {string}
   * @memberof FieldChannelFeaturedList
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof FieldChannelFeaturedList
   */
  url?: string | null
  /**
   *
   * @type {number}
   * @memberof FieldChannelFeaturedList
   */
  id: number
}
/**
 * Similar to FieldChannelCreateSerializer, with read-only name
 * @export
 * @interface FieldChannelWriteRequest
 */
export interface FieldChannelWriteRequest {
  /**
   *
   * @type {string}
   * @memberof FieldChannelWriteRequest
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof FieldChannelWriteRequest
   */
  public_description?: string
  /**
   *
   * @type {Array<string>}
   * @memberof FieldChannelWriteRequest
   */
  subfields?: Array<string>
  /**
   * Learng path featured in this field.
   * @type {number}
   * @memberof FieldChannelWriteRequest
   */
  featured_list?: number | null
  /**
   * Learng paths in this field.
   * @type {Array<number>}
   * @memberof FieldChannelWriteRequest
   */
  lists?: Array<number>
  /**
   * Get the avatar image URL
   * @type {string}
   * @memberof FieldChannelWriteRequest
   */
  avatar?: string
  /**
   * Get the banner image URL
   * @type {string}
   * @memberof FieldChannelWriteRequest
   */
  banner?: string
  /**
   *
   * @type {{ [key: string]: any; }}
   * @memberof FieldChannelWriteRequest
   */
  about?: { [key: string]: any } | null
}
/**
 * Serializer for moderators
 * @export
 * @interface FieldModerator
 */
export interface FieldModerator {
  /**
   * Returns the name for the moderator
   * @type {string}
   * @memberof FieldModerator
   */
  moderator_name?: string
  /**
   * Get the email from the associated user
   * @type {string}
   * @memberof FieldModerator
   */
  email?: string
  /**
   * Get the full name of the associated user
   * @type {string}
   * @memberof FieldModerator
   */
  full_name: string
}
/**
 * Serializer for moderators
 * @export
 * @interface FieldModeratorRequest
 */
export interface FieldModeratorRequest {
  /**
   * Returns the name for the moderator
   * @type {string}
   * @memberof FieldModeratorRequest
   */
  moderator_name?: string
  /**
   * Get the email from the associated user
   * @type {string}
   * @memberof FieldModeratorRequest
   */
  email?: string
}
/**
 * Serializer for the LearningPath model
 * @export
 * @interface LearningPath
 */
export interface LearningPath {
  /**
   *
   * @type {number}
   * @memberof LearningPath
   */
  id: number
  /**
   * Return the number of items in the list
   * @type {number}
   * @memberof LearningPath
   */
  item_count: number
  /**
   *
   * @type {number}
   * @memberof LearningPath
   */
  author: number
}
/**
 * Serializer for a minimal preview of Learning Paths
 * @export
 * @interface LearningPathPreview
 */
export interface LearningPathPreview {
  /**
   *
   * @type {string}
   * @memberof LearningPathPreview
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof LearningPathPreview
   */
  url?: string | null
  /**
   *
   * @type {number}
   * @memberof LearningPathPreview
   */
  id: number
}
/**
 * Specialized serializer for a LearningPath relationship
 * @export
 * @interface LearningPathRelationship
 */
export interface LearningPathRelationship {
  /**
   *
   * @type {number}
   * @memberof LearningPathRelationship
   */
  id: number
  /**
   *
   * @type {LearningResource}
   * @memberof LearningPathRelationship
   */
  resource: LearningResource
  /**
   *
   * @type {number}
   * @memberof LearningPathRelationship
   */
  position?: number
  /**
   *
   * @type {number}
   * @memberof LearningPathRelationship
   */
  parent: number
  /**
   *
   * @type {number}
   * @memberof LearningPathRelationship
   */
  child: number
}
/**
 * Specialized serializer for a LearningPath relationship
 * @export
 * @interface LearningPathRelationshipRequest
 */
export interface LearningPathRelationshipRequest {
  /**
   *
   * @type {number}
   * @memberof LearningPathRelationshipRequest
   */
  position?: number
  /**
   *
   * @type {number}
   * @memberof LearningPathRelationshipRequest
   */
  parent: number
  /**
   *
   * @type {number}
   * @memberof LearningPathRelationshipRequest
   */
  child: number
}
/**
 * Serializer for the LearningPath model
 * @export
 * @interface LearningPathRequest
 */
export interface LearningPathRequest {
  /**
   *
   * @type {number}
   * @memberof LearningPathRequest
   */
  author: number
}
/**
 * CRUD serializer for LearningPath resources
 * @export
 * @interface LearningPathResource
 */
export interface LearningPathResource {
  /**
   *
   * @type {number}
   * @memberof LearningPathResource
   */
  id: number
  /**
   *
   * @type {Array<LearningResourceTopic>}
   * @memberof LearningPathResource
   */
  topics?: Array<LearningResourceTopic>
  /**
   *
   * @type {string}
   * @memberof LearningPathResource
   */
  offered_by: string | null
  /**
   *
   * @type {Array<string>}
   * @memberof LearningPathResource
   */
  resource_content_tags: Array<string> | null
  /**
   *
   * @type {Array<LearningResourceDepartment>}
   * @memberof LearningPathResource
   */
  departments: Array<LearningResourceDepartment> | null
  /**
   * Returns the certification for the learning resource
   * @type {string}
   * @memberof LearningPathResource
   */
  certification: string | null
  /**
   * Returns the prices for the learning resource
   * @type {string}
   * @memberof LearningPathResource
   */
  prices: string | null
  /**
   *
   * @type {Course}
   * @memberof LearningPathResource
   */
  course: Course | null
  /**
   *
   * @type {LearningPath}
   * @memberof LearningPathResource
   */
  learning_path: LearningPath | null
  /**
   *
   * @type {Podcast}
   * @memberof LearningPathResource
   */
  podcast: Podcast | null
  /**
   *
   * @type {PodcastEpisode}
   * @memberof LearningPathResource
   */
  podcast_episode: PodcastEpisode | null
  /**
   *
   * @type {Array<LearningResourceRun>}
   * @memberof LearningPathResource
   */
  runs: Array<LearningResourceRun> | null
  /**
   *
   * @type {LearningResourceImage}
   * @memberof LearningPathResource
   */
  image: LearningResourceImage | null
  /**
   *
   * @type {Array<MicroLearningPathRelationship>}
   * @memberof LearningPathResource
   */
  learning_path_parents: Array<MicroLearningPathRelationship> | null
  /**
   *
   * @type {Array<MicroUserListRelationship>}
   * @memberof LearningPathResource
   */
  user_list_parents: Array<MicroUserListRelationship> | null
  /**
   *
   * @type {Program}
   * @memberof LearningPathResource
   */
  program: Program | null
  /**
   *
   * @type {string}
   * @memberof LearningPathResource
   */
  readable_id: string
  /**
   *
   * @type {string}
   * @memberof LearningPathResource
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof LearningPathResource
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningPathResource
   */
  full_description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningPathResource
   */
  last_modified?: string | null
  /**
   *
   * @type {boolean}
   * @memberof LearningPathResource
   */
  published?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof LearningPathResource
   */
  languages?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof LearningPathResource
   */
  url?: string | null
  /**
   *
   * @type {ResourceTypeEnum}
   * @memberof LearningPathResource
   */
  resource_type: ResourceTypeEnum
  /**
   *
   * @type {boolean}
   * @memberof LearningPathResource
   */
  professional?: boolean
  /**
   *
   * @type {string}
   * @memberof LearningPathResource
   */
  platform: string | null
  /**
   *
   * @type {Array<number>}
   * @memberof LearningPathResource
   */
  resources: Array<number>
}

/**
 * CRUD serializer for LearningPath resources
 * @export
 * @interface LearningPathResourceRequest
 */
export interface LearningPathResourceRequest {
  /**
   *
   * @type {Array<LearningResourceTopic>}
   * @memberof LearningPathResourceRequest
   */
  topics?: Array<LearningResourceTopic>
  /**
   *
   * @type {string}
   * @memberof LearningPathResourceRequest
   */
  readable_id: string
  /**
   *
   * @type {string}
   * @memberof LearningPathResourceRequest
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof LearningPathResourceRequest
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningPathResourceRequest
   */
  full_description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningPathResourceRequest
   */
  last_modified?: string | null
  /**
   *
   * @type {boolean}
   * @memberof LearningPathResourceRequest
   */
  published?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof LearningPathResourceRequest
   */
  languages?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof LearningPathResourceRequest
   */
  url?: string | null
  /**
   *
   * @type {ResourceTypeEnum}
   * @memberof LearningPathResourceRequest
   */
  resource_type: ResourceTypeEnum
  /**
   *
   * @type {boolean}
   * @memberof LearningPathResourceRequest
   */
  professional?: boolean
}

/**
 * Serializer for LearningResource, with program included
 * @export
 * @interface LearningResource
 */
export interface LearningResource {
  /**
   *
   * @type {number}
   * @memberof LearningResource
   */
  id: number
  /**
   *
   * @type {Array<LearningResourceTopic>}
   * @memberof LearningResource
   */
  topics?: Array<LearningResourceTopic>
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  offered_by: string | null
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResource
   */
  resource_content_tags: Array<string> | null
  /**
   *
   * @type {Array<LearningResourceDepartment>}
   * @memberof LearningResource
   */
  departments: Array<LearningResourceDepartment> | null
  /**
   * Returns the certification for the learning resource
   * @type {string}
   * @memberof LearningResource
   */
  certification: string | null
  /**
   * Returns the prices for the learning resource
   * @type {string}
   * @memberof LearningResource
   */
  prices: string | null
  /**
   *
   * @type {Course}
   * @memberof LearningResource
   */
  course: Course | null
  /**
   *
   * @type {LearningPath}
   * @memberof LearningResource
   */
  learning_path: LearningPath | null
  /**
   *
   * @type {Podcast}
   * @memberof LearningResource
   */
  podcast: Podcast | null
  /**
   *
   * @type {PodcastEpisode}
   * @memberof LearningResource
   */
  podcast_episode: PodcastEpisode | null
  /**
   *
   * @type {Array<LearningResourceRun>}
   * @memberof LearningResource
   */
  runs: Array<LearningResourceRun> | null
  /**
   *
   * @type {LearningResourceImage}
   * @memberof LearningResource
   */
  image: LearningResourceImage | null
  /**
   *
   * @type {Array<MicroLearningPathRelationship>}
   * @memberof LearningResource
   */
  learning_path_parents: Array<MicroLearningPathRelationship> | null
  /**
   *
   * @type {Array<MicroUserListRelationship>}
   * @memberof LearningResource
   */
  user_list_parents: Array<MicroUserListRelationship> | null
  /**
   *
   * @type {Program}
   * @memberof LearningResource
   */
  program: Program | null
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  readable_id: string
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  full_description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  last_modified?: string | null
  /**
   *
   * @type {boolean}
   * @memberof LearningResource
   */
  published?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResource
   */
  languages?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  url?: string | null
  /**
   *
   * @type {ResourceTypeEnum}
   * @memberof LearningResource
   */
  resource_type: ResourceTypeEnum
  /**
   *
   * @type {boolean}
   * @memberof LearningResource
   */
  professional: boolean
  /**
   *
   * @type {string}
   * @memberof LearningResource
   */
  platform: string | null
}

/**
 * Serializer for LearningResource, minus program
 * @export
 * @interface LearningResourceBase
 */
export interface LearningResourceBase {
  /**
   *
   * @type {number}
   * @memberof LearningResourceBase
   */
  id: number
  /**
   *
   * @type {Array<LearningResourceTopic>}
   * @memberof LearningResourceBase
   */
  topics?: Array<LearningResourceTopic>
  /**
   *
   * @type {string}
   * @memberof LearningResourceBase
   */
  offered_by: string | null
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResourceBase
   */
  resource_content_tags: Array<string> | null
  /**
   *
   * @type {Array<LearningResourceDepartment>}
   * @memberof LearningResourceBase
   */
  departments: Array<LearningResourceDepartment> | null
  /**
   * Returns the certification for the learning resource
   * @type {string}
   * @memberof LearningResourceBase
   */
  certification: string | null
  /**
   * Returns the prices for the learning resource
   * @type {string}
   * @memberof LearningResourceBase
   */
  prices: string | null
  /**
   *
   * @type {Course}
   * @memberof LearningResourceBase
   */
  course: Course | null
  /**
   *
   * @type {LearningPath}
   * @memberof LearningResourceBase
   */
  learning_path: LearningPath | null
  /**
   *
   * @type {Podcast}
   * @memberof LearningResourceBase
   */
  podcast: Podcast | null
  /**
   *
   * @type {PodcastEpisode}
   * @memberof LearningResourceBase
   */
  podcast_episode: PodcastEpisode | null
  /**
   *
   * @type {Array<LearningResourceRun>}
   * @memberof LearningResourceBase
   */
  runs: Array<LearningResourceRun> | null
  /**
   *
   * @type {LearningResourceImage}
   * @memberof LearningResourceBase
   */
  image: LearningResourceImage | null
  /**
   *
   * @type {Array<MicroLearningPathRelationship>}
   * @memberof LearningResourceBase
   */
  learning_path_parents: Array<MicroLearningPathRelationship> | null
  /**
   *
   * @type {Array<MicroUserListRelationship>}
   * @memberof LearningResourceBase
   */
  user_list_parents: Array<MicroUserListRelationship> | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceBase
   */
  readable_id: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceBase
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceBase
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceBase
   */
  full_description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceBase
   */
  last_modified?: string | null
  /**
   *
   * @type {boolean}
   * @memberof LearningResourceBase
   */
  published?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResourceBase
   */
  languages?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceBase
   */
  url?: string | null
  /**
   *
   * @type {ResourceTypeEnum}
   * @memberof LearningResourceBase
   */
  resource_type: ResourceTypeEnum
  /**
   *
   * @type {boolean}
   * @memberof LearningResourceBase
   */
  professional: boolean
  /**
   *
   * @type {string}
   * @memberof LearningResourceBase
   */
  platform: string | null
}

/**
 * Serializer for LearningResourceRelationship children
 * @export
 * @interface LearningResourceChild
 */
export interface LearningResourceChild {
  /**
   *
   * @type {number}
   * @memberof LearningResourceChild
   */
  child: number
}
/**
 * Serializer for LearningResourceDepartment
 * @export
 * @interface LearningResourceDepartment
 */
export interface LearningResourceDepartment {
  /**
   *
   * @type {string}
   * @memberof LearningResourceDepartment
   */
  department_id: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceDepartment
   */
  name: string
}
/**
 * Serializer for LearningResourceDepartment
 * @export
 * @interface LearningResourceDepartmentRequest
 */
export interface LearningResourceDepartmentRequest {
  /**
   *
   * @type {string}
   * @memberof LearningResourceDepartmentRequest
   */
  department_id: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceDepartmentRequest
   */
  name: string
}
/**
 * Serializer for LearningResourceImage
 * @export
 * @interface LearningResourceImage
 */
export interface LearningResourceImage {
  /**
   *
   * @type {number}
   * @memberof LearningResourceImage
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof LearningResourceImage
   */
  url: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceImage
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceImage
   */
  alt?: string | null
}
/**
 * Serializer for LearningResourceImage
 * @export
 * @interface LearningResourceImageRequest
 */
export interface LearningResourceImageRequest {
  /**
   *
   * @type {string}
   * @memberof LearningResourceImageRequest
   */
  url: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceImageRequest
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceImageRequest
   */
  alt?: string | null
}
/**
 * Serializer for LearningResourceInstructor model
 * @export
 * @interface LearningResourceInstructor
 */
export interface LearningResourceInstructor {
  /**
   *
   * @type {number}
   * @memberof LearningResourceInstructor
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof LearningResourceInstructor
   */
  first_name?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceInstructor
   */
  last_name?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceInstructor
   */
  full_name?: string | null
}
/**
 * Serializer for LearningResourceInstructor model
 * @export
 * @interface LearningResourceInstructorRequest
 */
export interface LearningResourceInstructorRequest {
  /**
   *
   * @type {string}
   * @memberof LearningResourceInstructorRequest
   */
  first_name?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceInstructorRequest
   */
  last_name?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceInstructorRequest
   */
  full_name?: string | null
}
/**
 * Serializer for LearningResource, with program included
 * @export
 * @interface LearningResourceRequest
 */
export interface LearningResourceRequest {
  /**
   *
   * @type {Array<LearningResourceTopic>}
   * @memberof LearningResourceRequest
   */
  topics?: Array<LearningResourceTopic>
  /**
   *
   * @type {string}
   * @memberof LearningResourceRequest
   */
  readable_id: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceRequest
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceRequest
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRequest
   */
  full_description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRequest
   */
  last_modified?: string | null
  /**
   *
   * @type {boolean}
   * @memberof LearningResourceRequest
   */
  published?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResourceRequest
   */
  languages?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRequest
   */
  url?: string | null
  /**
   *
   * @type {ResourceTypeEnum}
   * @memberof LearningResourceRequest
   */
  resource_type: ResourceTypeEnum
  /**
   *
   * @type {string}
   * @memberof LearningResourceRequest
   */
  platform: string | null
}

/**
 * Serializer for the LearningResourceRun model
 * @export
 * @interface LearningResourceRun
 */
export interface LearningResourceRun {
  /**
   *
   * @type {number}
   * @memberof LearningResourceRun
   */
  id: number
  /**
   *
   * @type {Array<LearningResourceInstructor>}
   * @memberof LearningResourceRun
   */
  instructors: Array<LearningResourceInstructor> | null
  /**
   *
   * @type {LearningResourceImage}
   * @memberof LearningResourceRun
   */
  image: LearningResourceImage | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  run_id: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  full_description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  last_modified?: string | null
  /**
   *
   * @type {boolean}
   * @memberof LearningResourceRun
   */
  published?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResourceRun
   */
  languages?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  url?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  level?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  slug?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  availability?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  semester?: string | null
  /**
   *
   * @type {number}
   * @memberof LearningResourceRun
   */
  year?: number | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  start_date?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  end_date?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  enrollment_start?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  enrollment_end?: string | null
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResourceRun
   */
  prices?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRun
   */
  checksum?: string | null
}
/**
 * Serializer for the LearningResourceRun model
 * @export
 * @interface LearningResourceRunRequest
 */
export interface LearningResourceRunRequest {
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  run_id: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  full_description?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  last_modified?: string | null
  /**
   *
   * @type {boolean}
   * @memberof LearningResourceRunRequest
   */
  published?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResourceRunRequest
   */
  languages?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  url?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  level?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  slug?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  availability?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  semester?: string | null
  /**
   *
   * @type {number}
   * @memberof LearningResourceRunRequest
   */
  year?: number | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  start_date?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  end_date?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  enrollment_start?: string | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  enrollment_end?: string | null
  /**
   *
   * @type {Array<string>}
   * @memberof LearningResourceRunRequest
   */
  prices?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof LearningResourceRunRequest
   */
  checksum?: string | null
}
/**
 * Serializer for LearningResourceTopic model
 * @export
 * @interface LearningResourceTopic
 */
export interface LearningResourceTopic {
  /**
   *
   * @type {number}
   * @memberof LearningResourceTopic
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof LearningResourceTopic
   */
  name: string
}
/**
 * Serializer containing only parent and child ids for a learning path relationship
 * @export
 * @interface MicroLearningPathRelationship
 */
export interface MicroLearningPathRelationship {
  /**
   *
   * @type {number}
   * @memberof MicroLearningPathRelationship
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof MicroLearningPathRelationship
   */
  parent: number
  /**
   *
   * @type {number}
   * @memberof MicroLearningPathRelationship
   */
  child: number
}
/**
 * Serializer containing only parent and child ids for a user list relationship
 * @export
 * @interface MicroUserListRelationship
 */
export interface MicroUserListRelationship {
  /**
   *
   * @type {number}
   * @memberof MicroUserListRelationship
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof MicroUserListRelationship
   */
  parent: number
  /**
   *
   * @type {number}
   * @memberof MicroUserListRelationship
   */
  child: number
}
/**
 *
 * @export
 * @interface PaginatedArticleList
 */
export interface PaginatedArticleList {
  /**
   *
   * @type {number}
   * @memberof PaginatedArticleList
   */
  count?: number
  /**
   *
   * @type {string}
   * @memberof PaginatedArticleList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedArticleList
   */
  previous?: string | null
  /**
   *
   * @type {Array<Article>}
   * @memberof PaginatedArticleList
   */
  results?: Array<Article>
}
/**
 *
 * @export
 * @interface PaginatedContentFileList
 */
export interface PaginatedContentFileList {
  /**
   *
   * @type {number}
   * @memberof PaginatedContentFileList
   */
  count?: number
  /**
   *
   * @type {string}
   * @memberof PaginatedContentFileList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedContentFileList
   */
  previous?: string | null
  /**
   *
   * @type {Array<ContentFile>}
   * @memberof PaginatedContentFileList
   */
  results?: Array<ContentFile>
}
/**
 *
 * @export
 * @interface PaginatedFieldChannelList
 */
export interface PaginatedFieldChannelList {
  /**
   *
   * @type {number}
   * @memberof PaginatedFieldChannelList
   */
  count?: number
  /**
   *
   * @type {string}
   * @memberof PaginatedFieldChannelList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedFieldChannelList
   */
  previous?: string | null
  /**
   *
   * @type {Array<FieldChannel>}
   * @memberof PaginatedFieldChannelList
   */
  results?: Array<FieldChannel>
}
/**
 *
 * @export
 * @interface PaginatedLearningPathRelationshipList
 */
export interface PaginatedLearningPathRelationshipList {
  /**
   *
   * @type {number}
   * @memberof PaginatedLearningPathRelationshipList
   */
  count?: number
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningPathRelationshipList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningPathRelationshipList
   */
  previous?: string | null
  /**
   *
   * @type {Array<LearningPathRelationship>}
   * @memberof PaginatedLearningPathRelationshipList
   */
  results?: Array<LearningPathRelationship>
}
/**
 *
 * @export
 * @interface PaginatedLearningPathResourceList
 */
export interface PaginatedLearningPathResourceList {
  /**
   *
   * @type {number}
   * @memberof PaginatedLearningPathResourceList
   */
  count?: number
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningPathResourceList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningPathResourceList
   */
  previous?: string | null
  /**
   *
   * @type {Array<LearningPathResource>}
   * @memberof PaginatedLearningPathResourceList
   */
  results?: Array<LearningPathResource>
}
/**
 *
 * @export
 * @interface PaginatedLearningResourceChildList
 */
export interface PaginatedLearningResourceChildList {
  /**
   *
   * @type {number}
   * @memberof PaginatedLearningResourceChildList
   */
  count?: number
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningResourceChildList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningResourceChildList
   */
  previous?: string | null
  /**
   *
   * @type {Array<LearningResourceChild>}
   * @memberof PaginatedLearningResourceChildList
   */
  results?: Array<LearningResourceChild>
}
/**
 *
 * @export
 * @interface PaginatedLearningResourceList
 */
export interface PaginatedLearningResourceList {
  /**
   *
   * @type {number}
   * @memberof PaginatedLearningResourceList
   */
  count?: number
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningResourceList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningResourceList
   */
  previous?: string | null
  /**
   *
   * @type {Array<LearningResource>}
   * @memberof PaginatedLearningResourceList
   */
  results?: Array<LearningResource>
}
/**
 *
 * @export
 * @interface PaginatedLearningResourceTopicList
 */
export interface PaginatedLearningResourceTopicList {
  /**
   *
   * @type {number}
   * @memberof PaginatedLearningResourceTopicList
   */
  count?: number
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningResourceTopicList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedLearningResourceTopicList
   */
  previous?: string | null
  /**
   *
   * @type {Array<LearningResourceTopic>}
   * @memberof PaginatedLearningResourceTopicList
   */
  results?: Array<LearningResourceTopic>
}
/**
 *
 * @export
 * @interface PaginatedUserListList
 */
export interface PaginatedUserListList {
  /**
   *
   * @type {number}
   * @memberof PaginatedUserListList
   */
  count?: number
  /**
   *
   * @type {string}
   * @memberof PaginatedUserListList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedUserListList
   */
  previous?: string | null
  /**
   *
   * @type {Array<UserList>}
   * @memberof PaginatedUserListList
   */
  results?: Array<UserList>
}
/**
 *
 * @export
 * @interface PaginatedUserListRelationshipList
 */
export interface PaginatedUserListRelationshipList {
  /**
   *
   * @type {number}
   * @memberof PaginatedUserListRelationshipList
   */
  count?: number
  /**
   *
   * @type {string}
   * @memberof PaginatedUserListRelationshipList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedUserListRelationshipList
   */
  previous?: string | null
  /**
   *
   * @type {Array<UserListRelationship>}
   * @memberof PaginatedUserListRelationshipList
   */
  results?: Array<UserListRelationship>
}
/**
 * Serializer for LearningResourceInstructor model
 * @export
 * @interface PatchedArticleRequest
 */
export interface PatchedArticleRequest {
  /**
   *
   * @type {string}
   * @memberof PatchedArticleRequest
   */
  html?: string
  /**
   *
   * @type {string}
   * @memberof PatchedArticleRequest
   */
  title?: string
}
/**
 * Similar to FieldChannelCreateSerializer, with read-only name
 * @export
 * @interface PatchedFieldChannelWriteRequest
 */
export interface PatchedFieldChannelWriteRequest {
  /**
   *
   * @type {string}
   * @memberof PatchedFieldChannelWriteRequest
   */
  title?: string
  /**
   *
   * @type {string}
   * @memberof PatchedFieldChannelWriteRequest
   */
  public_description?: string
  /**
   *
   * @type {Array<string>}
   * @memberof PatchedFieldChannelWriteRequest
   */
  subfields?: Array<string>
  /**
   * Learng path featured in this field.
   * @type {number}
   * @memberof PatchedFieldChannelWriteRequest
   */
  featured_list?: number | null
  /**
   * Learng paths in this field.
   * @type {Array<number>}
   * @memberof PatchedFieldChannelWriteRequest
   */
  lists?: Array<number>
  /**
   * Get the avatar image URL
   * @type {string}
   * @memberof PatchedFieldChannelWriteRequest
   */
  avatar?: string
  /**
   * Get the banner image URL
   * @type {string}
   * @memberof PatchedFieldChannelWriteRequest
   */
  banner?: string
  /**
   *
   * @type {{ [key: string]: any; }}
   * @memberof PatchedFieldChannelWriteRequest
   */
  about?: { [key: string]: any } | null
}
/**
 * Specialized serializer for a LearningPath relationship
 * @export
 * @interface PatchedLearningPathRelationshipRequest
 */
export interface PatchedLearningPathRelationshipRequest {
  /**
   *
   * @type {number}
   * @memberof PatchedLearningPathRelationshipRequest
   */
  position?: number
  /**
   *
   * @type {number}
   * @memberof PatchedLearningPathRelationshipRequest
   */
  parent?: number
  /**
   *
   * @type {number}
   * @memberof PatchedLearningPathRelationshipRequest
   */
  child?: number
}
/**
 * CRUD serializer for LearningPath resources
 * @export
 * @interface PatchedLearningPathResourceRequest
 */
export interface PatchedLearningPathResourceRequest {
  /**
   *
   * @type {Array<LearningResourceTopic>}
   * @memberof PatchedLearningPathResourceRequest
   */
  topics?: Array<LearningResourceTopic>
  /**
   *
   * @type {string}
   * @memberof PatchedLearningPathResourceRequest
   */
  readable_id?: string
  /**
   *
   * @type {string}
   * @memberof PatchedLearningPathResourceRequest
   */
  title?: string
  /**
   *
   * @type {string}
   * @memberof PatchedLearningPathResourceRequest
   */
  description?: string | null
  /**
   *
   * @type {string}
   * @memberof PatchedLearningPathResourceRequest
   */
  full_description?: string | null
  /**
   *
   * @type {string}
   * @memberof PatchedLearningPathResourceRequest
   */
  last_modified?: string | null
  /**
   *
   * @type {boolean}
   * @memberof PatchedLearningPathResourceRequest
   */
  published?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof PatchedLearningPathResourceRequest
   */
  languages?: Array<string> | null
  /**
   *
   * @type {string}
   * @memberof PatchedLearningPathResourceRequest
   */
  url?: string | null
  /**
   *
   * @type {ResourceTypeEnum}
   * @memberof PatchedLearningPathResourceRequest
   */
  resource_type?: ResourceTypeEnum
  /**
   *
   * @type {boolean}
   * @memberof PatchedLearningPathResourceRequest
   */
  professional?: boolean
}

/**
 * Serializer for UserListRelationship model
 * @export
 * @interface PatchedUserListRelationshipRequest
 */
export interface PatchedUserListRelationshipRequest {
  /**
   *
   * @type {number}
   * @memberof PatchedUserListRelationshipRequest
   */
  position?: number
  /**
   *
   * @type {number}
   * @memberof PatchedUserListRelationshipRequest
   */
  parent?: number
  /**
   *
   * @type {number}
   * @memberof PatchedUserListRelationshipRequest
   */
  child?: number
}
/**
 * Simplified serializer for UserList model.
 * @export
 * @interface PatchedUserListRequest
 */
export interface PatchedUserListRequest {
  /**
   *
   * @type {Array<LearningResourceTopic>}
   * @memberof PatchedUserListRequest
   */
  topics?: Array<LearningResourceTopic>
  /**
   *
   * @type {string}
   * @memberof PatchedUserListRequest
   */
  title?: string
  /**
   *
   * @type {string}
   * @memberof PatchedUserListRequest
   */
  description?: string
  /**
   *
   * @type {PrivacyLevelEnum}
   * @memberof PatchedUserListRequest
   */
  privacy_level?: PrivacyLevelEnum
}

/**
 * Serializer for Podcasts
 * @export
 * @interface Podcast
 */
export interface Podcast {
  /**
   *
   * @type {number}
   * @memberof Podcast
   */
  id: number
  /**
   * Return the number of episodes in the podcast
   * @type {number}
   * @memberof Podcast
   */
  episode_count: number
  /**
   *
   * @type {string}
   * @memberof Podcast
   */
  apple_podcasts_url?: string | null
  /**
   *
   * @type {string}
   * @memberof Podcast
   */
  google_podcasts_url?: string | null
  /**
   *
   * @type {string}
   * @memberof Podcast
   */
  rss_url?: string | null
}
/**
 * Serializer for PodcastEpisode
 * @export
 * @interface PodcastEpisode
 */
export interface PodcastEpisode {
  /**
   *
   * @type {number}
   * @memberof PodcastEpisode
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof PodcastEpisode
   */
  transcript?: string
  /**
   *
   * @type {string}
   * @memberof PodcastEpisode
   */
  episode_link?: string | null
  /**
   *
   * @type {string}
   * @memberof PodcastEpisode
   */
  duration?: string | null
  /**
   *
   * @type {string}
   * @memberof PodcastEpisode
   */
  rss?: string | null
}
/**
 * Serializer for PodcastEpisode
 * @export
 * @interface PodcastEpisodeRequest
 */
export interface PodcastEpisodeRequest {
  /**
   *
   * @type {string}
   * @memberof PodcastEpisodeRequest
   */
  transcript?: string
  /**
   *
   * @type {string}
   * @memberof PodcastEpisodeRequest
   */
  episode_link?: string | null
  /**
   *
   * @type {string}
   * @memberof PodcastEpisodeRequest
   */
  duration?: string | null
  /**
   *
   * @type {string}
   * @memberof PodcastEpisodeRequest
   */
  rss?: string | null
}
/**
 * Serializer for Podcasts
 * @export
 * @interface PodcastRequest
 */
export interface PodcastRequest {
  /**
   *
   * @type {string}
   * @memberof PodcastRequest
   */
  apple_podcasts_url?: string | null
  /**
   *
   * @type {string}
   * @memberof PodcastRequest
   */
  google_podcasts_url?: string | null
  /**
   *
   * @type {string}
   * @memberof PodcastRequest
   */
  rss_url?: string | null
}
/**
 * * `private` - private * `unlisted` - unlisted
 * @export
 * @enum {string}
 */

export const PrivacyLevelEnum = {
  Private: "private",
  Unlisted: "unlisted"
} as const

export type PrivacyLevelEnum =
  typeof PrivacyLevelEnum[keyof typeof PrivacyLevelEnum]

/**
 * Serializer for the Program model
 * @export
 * @interface Program
 */
export interface Program {
  /**
   *
   * @type {Array<LearningResourceBase>}
   * @memberof Program
   */
  courses: Array<LearningResourceBase> | null
}
/**
 * * `course` - Course * `program` - Program * `learning_path` - Learning Path * `podcast` - Podcast * `podcast_episode` - Podcast Episode
 * @export
 * @enum {string}
 */

export const ResourceTypeEnum = {
  Course: "course",
  Program: "program",
  LearningPath: "learning_path",
  Podcast: "podcast",
  PodcastEpisode: "podcast_episode"
} as const

export type ResourceTypeEnum =
  typeof ResourceTypeEnum[keyof typeof ResourceTypeEnum]

/**
 *
 * @export
 * @interface SearchResponse
 */
export interface SearchResponse {
  /**
   *
   * @type {number}
   * @memberof SearchResponse
   */
  count: number
  /**
   *
   * @type {Array<LearningResource>}
   * @memberof SearchResponse
   */
  results: Array<LearningResource>
  /**
   *
   * @type {any}
   * @memberof SearchResponse
   */
  metadata: any
}
/**
 * Serializer for Subfields
 * @export
 * @interface Subfield
 */
export interface Subfield {
  /**
   *
   * @type {string}
   * @memberof Subfield
   */
  parent_field: string
  /**
   *
   * @type {string}
   * @memberof Subfield
   */
  field_channel: string
  /**
   *
   * @type {number}
   * @memberof Subfield
   */
  position?: number
}
/**
 * Simplified serializer for UserList model.
 * @export
 * @interface UserList
 */
export interface UserList {
  /**
   *
   * @type {number}
   * @memberof UserList
   */
  id: number
  /**
   *
   * @type {Array<LearningResourceTopic>}
   * @memberof UserList
   */
  topics?: Array<LearningResourceTopic>
  /**
   * Return the number of items in the list
   * @type {number}
   * @memberof UserList
   */
  item_count: number
  /**
   * Return the image of the first item
   * @type {{ [key: string]: any; }}
   * @memberof UserList
   */
  image: { [key: string]: any }
  /**
   *
   * @type {string}
   * @memberof UserList
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof UserList
   */
  description?: string
  /**
   *
   * @type {PrivacyLevelEnum}
   * @memberof UserList
   */
  privacy_level?: PrivacyLevelEnum
  /**
   *
   * @type {number}
   * @memberof UserList
   */
  author: number
}

/**
 * Serializer for UserListRelationship model
 * @export
 * @interface UserListRelationship
 */
export interface UserListRelationship {
  /**
   *
   * @type {number}
   * @memberof UserListRelationship
   */
  id: number
  /**
   *
   * @type {LearningResource}
   * @memberof UserListRelationship
   */
  resource: LearningResource
  /**
   *
   * @type {number}
   * @memberof UserListRelationship
   */
  position?: number
  /**
   *
   * @type {number}
   * @memberof UserListRelationship
   */
  parent: number
  /**
   *
   * @type {number}
   * @memberof UserListRelationship
   */
  child: number
}
/**
 * Serializer for UserListRelationship model
 * @export
 * @interface UserListRelationshipRequest
 */
export interface UserListRelationshipRequest {
  /**
   *
   * @type {number}
   * @memberof UserListRelationshipRequest
   */
  position?: number
  /**
   *
   * @type {number}
   * @memberof UserListRelationshipRequest
   */
  parent: number
  /**
   *
   * @type {number}
   * @memberof UserListRelationshipRequest
   */
  child: number
}
/**
 * Simplified serializer for UserList model.
 * @export
 * @interface UserListRequest
 */
export interface UserListRequest {
  /**
   *
   * @type {Array<LearningResourceTopic>}
   * @memberof UserListRequest
   */
  topics?: Array<LearningResourceTopic>
  /**
   *
   * @type {string}
   * @memberof UserListRequest
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof UserListRequest
   */
  description?: string
  /**
   *
   * @type {PrivacyLevelEnum}
   * @memberof UserListRequest
   */
  privacy_level?: PrivacyLevelEnum
}

/**
 * ArticlesApi - axios parameter creator
 * @export
 */
export const ArticlesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Viewset for Article viewing and editing.
     * @param {ArticleRequest} articleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articlesCreate: async (
      articleRequest: ArticleRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'articleRequest' is not null or undefined
      assertParamExists("articlesCreate", "articleRequest", articleRequest)
      const localVarPath = `/api/v1/articles/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        articleRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for Article viewing and editing.
     * @param {number} id A unique integer value identifying this article.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articlesDestroy: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("articlesDestroy", "id", id)
      const localVarPath = `/api/v1/articles/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for Article viewing and editing.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articlesList: async (
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/articles/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for Article viewing and editing.
     * @param {number} id A unique integer value identifying this article.
     * @param {PatchedArticleRequest} [patchedArticleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articlesPartialUpdate: async (
      id: number,
      patchedArticleRequest?: PatchedArticleRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("articlesPartialUpdate", "id", id)
      const localVarPath = `/api/v1/articles/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchedArticleRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for Article viewing and editing.
     * @param {number} id A unique integer value identifying this article.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articlesRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("articlesRetrieve", "id", id)
      const localVarPath = `/api/v1/articles/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for Article viewing and editing.
     * @param {number} id A unique integer value identifying this article.
     * @param {ArticleRequest} articleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articlesUpdate: async (
      id: number,
      articleRequest: ArticleRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("articlesUpdate", "id", id)
      // verify required parameter 'articleRequest' is not null or undefined
      assertParamExists("articlesUpdate", "articleRequest", articleRequest)
      const localVarPath = `/api/v1/articles/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        articleRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * ArticlesApi - functional programming interface
 * @export
 */
export const ArticlesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ArticlesApiAxiosParamCreator(configuration)
  return {
    /**
     * Viewset for Article viewing and editing.
     * @param {ArticleRequest} articleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async articlesCreate(
      articleRequest: ArticleRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Article>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.articlesCreate(
        articleRequest,
        options
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ArticlesApi.articlesCreate"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for Article viewing and editing.
     * @param {number} id A unique integer value identifying this article.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async articlesDestroy(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.articlesDestroy(
        id,
        options
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ArticlesApi.articlesDestroy"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for Article viewing and editing.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async articlesList(
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedArticleList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.articlesList(
        limit,
        offset,
        options
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ArticlesApi.articlesList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for Article viewing and editing.
     * @param {number} id A unique integer value identifying this article.
     * @param {PatchedArticleRequest} [patchedArticleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async articlesPartialUpdate(
      id: number,
      patchedArticleRequest?: PatchedArticleRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Article>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.articlesPartialUpdate(
          id,
          patchedArticleRequest,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ArticlesApi.articlesPartialUpdate"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for Article viewing and editing.
     * @param {number} id A unique integer value identifying this article.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async articlesRetrieve(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Article>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.articlesRetrieve(id, options)
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ArticlesApi.articlesRetrieve"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for Article viewing and editing.
     * @param {number} id A unique integer value identifying this article.
     * @param {ArticleRequest} articleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async articlesUpdate(
      id: number,
      articleRequest: ArticleRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Article>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.articlesUpdate(
        id,
        articleRequest,
        options
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ArticlesApi.articlesUpdate"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    }
  }
}

/**
 * ArticlesApi - factory interface
 * @export
 */
export const ArticlesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ArticlesApiFp(configuration)
  return {
    /**
     * Viewset for Article viewing and editing.
     * @param {ArticleRequest} articleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articlesCreate(
      articleRequest: ArticleRequest,
      options?: any
    ): AxiosPromise<Article> {
      return localVarFp
        .articlesCreate(articleRequest, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for Article viewing and editing.
     * @param {number} id A unique integer value identifying this article.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articlesDestroy(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .articlesDestroy(id, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for Article viewing and editing.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articlesList(
      limit?: number,
      offset?: number,
      options?: any
    ): AxiosPromise<PaginatedArticleList> {
      return localVarFp
        .articlesList(limit, offset, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for Article viewing and editing.
     * @param {number} id A unique integer value identifying this article.
     * @param {PatchedArticleRequest} [patchedArticleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articlesPartialUpdate(
      id: number,
      patchedArticleRequest?: PatchedArticleRequest,
      options?: any
    ): AxiosPromise<Article> {
      return localVarFp
        .articlesPartialUpdate(id, patchedArticleRequest, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for Article viewing and editing.
     * @param {number} id A unique integer value identifying this article.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articlesRetrieve(id: number, options?: any): AxiosPromise<Article> {
      return localVarFp
        .articlesRetrieve(id, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for Article viewing and editing.
     * @param {number} id A unique integer value identifying this article.
     * @param {ArticleRequest} articleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articlesUpdate(
      id: number,
      articleRequest: ArticleRequest,
      options?: any
    ): AxiosPromise<Article> {
      return localVarFp
        .articlesUpdate(id, articleRequest, options)
        .then(request => request(axios, basePath))
    }
  }
}

/**
 * ArticlesApi - object-oriented interface
 * @export
 * @class ArticlesApi
 * @extends {BaseAPI}
 */
export class ArticlesApi extends BaseAPI {
  /**
   * Viewset for Article viewing and editing.
   * @param {ArticleRequest} articleRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticlesApi
   */
  public articlesCreate(
    articleRequest: ArticleRequest,
    options?: AxiosRequestConfig
  ) {
    return ArticlesApiFp(this.configuration)
      .articlesCreate(articleRequest, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for Article viewing and editing.
   * @param {number} id A unique integer value identifying this article.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticlesApi
   */
  public articlesDestroy(id: number, options?: AxiosRequestConfig) {
    return ArticlesApiFp(this.configuration)
      .articlesDestroy(id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for Article viewing and editing.
   * @param {number} [limit] Number of results to return per page.
   * @param {number} [offset] The initial index from which to return the results.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticlesApi
   */
  public articlesList(
    limit?: number,
    offset?: number,
    options?: AxiosRequestConfig
  ) {
    return ArticlesApiFp(this.configuration)
      .articlesList(limit, offset, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for Article viewing and editing.
   * @param {number} id A unique integer value identifying this article.
   * @param {PatchedArticleRequest} [patchedArticleRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticlesApi
   */
  public articlesPartialUpdate(
    id: number,
    patchedArticleRequest?: PatchedArticleRequest,
    options?: AxiosRequestConfig
  ) {
    return ArticlesApiFp(this.configuration)
      .articlesPartialUpdate(id, patchedArticleRequest, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for Article viewing and editing.
   * @param {number} id A unique integer value identifying this article.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticlesApi
   */
  public articlesRetrieve(id: number, options?: AxiosRequestConfig) {
    return ArticlesApiFp(this.configuration)
      .articlesRetrieve(id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for Article viewing and editing.
   * @param {number} id A unique integer value identifying this article.
   * @param {ArticleRequest} articleRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticlesApi
   */
  public articlesUpdate(
    id: number,
    articleRequest: ArticleRequest,
    options?: AxiosRequestConfig
  ) {
    return ArticlesApiFp(this.configuration)
      .articlesUpdate(id, articleRequest, options)
      .then(request => request(this.axios, this.basePath))
  }
}

/**
 * ContentFileSearchApi - axios parameter creator
 * @export
 */
export const ContentFileSearchApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * View for executing searches of learning resources
     * @param {Array<ContentFileSearchRetrieveAggregationsEnum>} [aggregations]
     * @param {Array<string>} [contentCategory]
     * @param {Array<number>} [id]
     * @param {number} [limit]
     * @param {Array<ContentFileSearchRetrieveOfferedByEnum>} [offeredBy]
     * @param {number} [offset]
     * @param {Array<ContentFileSearchRetrievePlatformEnum>} [platform]
     * @param {string} [q] The search text
     * @param {Array<number>} [resourceId]
     * @param {Array<number>} [runId]
     * @param {ContentFileSearchRetrieveSortbyEnum} [sortby] if the parameter starts with \&#39;-\&#39; the sort is in descending order  * &#x60;id&#x60; - id * &#x60;-id&#x60; - -id * &#x60;resource_readable_id&#x60; - resource_readable_id * &#x60;-resource_readable_id&#x60; - -resource_readable_id
     * @param {Array<string>} [topic]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentFileSearchRetrieve: async (
      aggregations?: Array<ContentFileSearchRetrieveAggregationsEnum>,
      contentCategory?: Array<string>,
      id?: Array<number>,
      limit?: number,
      offeredBy?: Array<ContentFileSearchRetrieveOfferedByEnum>,
      offset?: number,
      platform?: Array<ContentFileSearchRetrievePlatformEnum>,
      q?: string,
      resourceId?: Array<number>,
      runId?: Array<number>,
      sortby?: ContentFileSearchRetrieveSortbyEnum,
      topic?: Array<string>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/content_file_search/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (aggregations) {
        localVarQueryParameter["aggregations"] = aggregations
      }

      if (contentCategory) {
        localVarQueryParameter["content_category"] = contentCategory
      }

      if (id) {
        localVarQueryParameter["id"] = id
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offeredBy) {
        localVarQueryParameter["offered_by"] = offeredBy
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (platform) {
        localVarQueryParameter["platform"] = platform
      }

      if (q !== undefined) {
        localVarQueryParameter["q"] = q
      }

      if (resourceId) {
        localVarQueryParameter["resource_id"] = resourceId
      }

      if (runId) {
        localVarQueryParameter["run_id"] = runId
      }

      if (sortby !== undefined) {
        localVarQueryParameter["sortby"] = sortby
      }

      if (topic) {
        localVarQueryParameter["topic"] = topic
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * ContentFileSearchApi - functional programming interface
 * @export
 */
export const ContentFileSearchApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    ContentFileSearchApiAxiosParamCreator(configuration)
  return {
    /**
     * View for executing searches of learning resources
     * @param {Array<ContentFileSearchRetrieveAggregationsEnum>} [aggregations]
     * @param {Array<string>} [contentCategory]
     * @param {Array<number>} [id]
     * @param {number} [limit]
     * @param {Array<ContentFileSearchRetrieveOfferedByEnum>} [offeredBy]
     * @param {number} [offset]
     * @param {Array<ContentFileSearchRetrievePlatformEnum>} [platform]
     * @param {string} [q] The search text
     * @param {Array<number>} [resourceId]
     * @param {Array<number>} [runId]
     * @param {ContentFileSearchRetrieveSortbyEnum} [sortby] if the parameter starts with \&#39;-\&#39; the sort is in descending order  * &#x60;id&#x60; - id * &#x60;-id&#x60; - -id * &#x60;resource_readable_id&#x60; - resource_readable_id * &#x60;-resource_readable_id&#x60; - -resource_readable_id
     * @param {Array<string>} [topic]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async contentFileSearchRetrieve(
      aggregations?: Array<ContentFileSearchRetrieveAggregationsEnum>,
      contentCategory?: Array<string>,
      id?: Array<number>,
      limit?: number,
      offeredBy?: Array<ContentFileSearchRetrieveOfferedByEnum>,
      offset?: number,
      platform?: Array<ContentFileSearchRetrievePlatformEnum>,
      q?: string,
      resourceId?: Array<number>,
      runId?: Array<number>,
      sortby?: ContentFileSearchRetrieveSortbyEnum,
      topic?: Array<string>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.contentFileSearchRetrieve(
          aggregations,
          contentCategory,
          id,
          limit,
          offeredBy,
          offset,
          platform,
          q,
          resourceId,
          runId,
          sortby,
          topic,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ContentFileSearchApi.contentFileSearchRetrieve"]?.[
          index
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    }
  }
}

/**
 * ContentFileSearchApi - factory interface
 * @export
 */
export const ContentFileSearchApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ContentFileSearchApiFp(configuration)
  return {
    /**
     * View for executing searches of learning resources
     * @param {Array<ContentFileSearchRetrieveAggregationsEnum>} [aggregations]
     * @param {Array<string>} [contentCategory]
     * @param {Array<number>} [id]
     * @param {number} [limit]
     * @param {Array<ContentFileSearchRetrieveOfferedByEnum>} [offeredBy]
     * @param {number} [offset]
     * @param {Array<ContentFileSearchRetrievePlatformEnum>} [platform]
     * @param {string} [q] The search text
     * @param {Array<number>} [resourceId]
     * @param {Array<number>} [runId]
     * @param {ContentFileSearchRetrieveSortbyEnum} [sortby] if the parameter starts with \&#39;-\&#39; the sort is in descending order  * &#x60;id&#x60; - id * &#x60;-id&#x60; - -id * &#x60;resource_readable_id&#x60; - resource_readable_id * &#x60;-resource_readable_id&#x60; - -resource_readable_id
     * @param {Array<string>} [topic]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentFileSearchRetrieve(
      aggregations?: Array<ContentFileSearchRetrieveAggregationsEnum>,
      contentCategory?: Array<string>,
      id?: Array<number>,
      limit?: number,
      offeredBy?: Array<ContentFileSearchRetrieveOfferedByEnum>,
      offset?: number,
      platform?: Array<ContentFileSearchRetrievePlatformEnum>,
      q?: string,
      resourceId?: Array<number>,
      runId?: Array<number>,
      sortby?: ContentFileSearchRetrieveSortbyEnum,
      topic?: Array<string>,
      options?: any
    ): AxiosPromise<SearchResponse> {
      return localVarFp
        .contentFileSearchRetrieve(
          aggregations,
          contentCategory,
          id,
          limit,
          offeredBy,
          offset,
          platform,
          q,
          resourceId,
          runId,
          sortby,
          topic,
          options
        )
        .then(request => request(axios, basePath))
    }
  }
}

/**
 * ContentFileSearchApi - object-oriented interface
 * @export
 * @class ContentFileSearchApi
 * @extends {BaseAPI}
 */
export class ContentFileSearchApi extends BaseAPI {
  /**
   * View for executing searches of learning resources
   * @param {Array<ContentFileSearchRetrieveAggregationsEnum>} [aggregations]
   * @param {Array<string>} [contentCategory]
   * @param {Array<number>} [id]
   * @param {number} [limit]
   * @param {Array<ContentFileSearchRetrieveOfferedByEnum>} [offeredBy]
   * @param {number} [offset]
   * @param {Array<ContentFileSearchRetrievePlatformEnum>} [platform]
   * @param {string} [q] The search text
   * @param {Array<number>} [resourceId]
   * @param {Array<number>} [runId]
   * @param {ContentFileSearchRetrieveSortbyEnum} [sortby] if the parameter starts with \&#39;-\&#39; the sort is in descending order  * &#x60;id&#x60; - id * &#x60;-id&#x60; - -id * &#x60;resource_readable_id&#x60; - resource_readable_id * &#x60;-resource_readable_id&#x60; - -resource_readable_id
   * @param {Array<string>} [topic]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContentFileSearchApi
   */
  public contentFileSearchRetrieve(
    aggregations?: Array<ContentFileSearchRetrieveAggregationsEnum>,
    contentCategory?: Array<string>,
    id?: Array<number>,
    limit?: number,
    offeredBy?: Array<ContentFileSearchRetrieveOfferedByEnum>,
    offset?: number,
    platform?: Array<ContentFileSearchRetrievePlatformEnum>,
    q?: string,
    resourceId?: Array<number>,
    runId?: Array<number>,
    sortby?: ContentFileSearchRetrieveSortbyEnum,
    topic?: Array<string>,
    options?: AxiosRequestConfig
  ) {
    return ContentFileSearchApiFp(this.configuration)
      .contentFileSearchRetrieve(
        aggregations,
        contentCategory,
        id,
        limit,
        offeredBy,
        offset,
        platform,
        q,
        resourceId,
        runId,
        sortby,
        topic,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }
}

/**
 * @export
 */
export const ContentFileSearchRetrieveAggregationsEnum = {
  Topic: "topic",
  ContentCategory: "content_category",
  Platform: "platform",
  OfferedBy: "offered_by"
} as const
export type ContentFileSearchRetrieveAggregationsEnum =
  typeof ContentFileSearchRetrieveAggregationsEnum[keyof typeof ContentFileSearchRetrieveAggregationsEnum]
/**
 * @export
 */
export const ContentFileSearchRetrieveOfferedByEnum = {
  Mitx: "mitx",
  Ocw: "ocw",
  Bootcamps: "bootcamps",
  Xpro: "xpro",
  Csail: "csail",
  ProfessionalEducation: "professional education",
  SloanExecutiveEducation: "sloan executive education",
  SchwarzmanCollegeOfComputing: "schwarzman college of computing",
  CenterForTransportationLogistics: "center for transportation & logistics"
} as const
export type ContentFileSearchRetrieveOfferedByEnum =
  typeof ContentFileSearchRetrieveOfferedByEnum[keyof typeof ContentFileSearchRetrieveOfferedByEnum]
/**
 * @export
 */
export const ContentFileSearchRetrievePlatformEnum = {
  Edx: "edx",
  Ocw: "ocw",
  OpenLearningLibrary: "open learning library",
  MitxOnline: "mitx online",
  Bootcamps: "bootcamps",
  Xpro: "xpro",
  Csail: "csail",
  ProfessionalEducation: "professional education",
  SloanExecutiveEducation: "sloan executive education",
  SchwarzmanCollegeOfComputing: "schwarzman college of computing",
  CenterForTransportationLogistics: "center for transportation & logistics",
  Whu: "whu",
  Susskind: "susskind",
  GlobalAlumni: "global alumni",
  Simplilearn: "simplilearn",
  Emeritus: "emeritus",
  Podcast: "podcast"
} as const
export type ContentFileSearchRetrievePlatformEnum =
  typeof ContentFileSearchRetrievePlatformEnum[keyof typeof ContentFileSearchRetrievePlatformEnum]
/**
 * @export
 */
export const ContentFileSearchRetrieveSortbyEnum = {
  Id: "id",
  Id2: "-id",
  ResourceReadableId: "resource_readable_id",
  ResourceReadableId2: "-resource_readable_id"
} as const
export type ContentFileSearchRetrieveSortbyEnum =
  typeof ContentFileSearchRetrieveSortbyEnum[keyof typeof ContentFileSearchRetrieveSortbyEnum]

/**
 * ContentfilesApi - axios parameter creator
 * @export
 */
export const ContentfilesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Viewset for CpntentFiles
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {number} [run]
     * @param {number} [runLearningResource]
     * @param {string} [runLearningResourceOfferedByName]
     * @param {string} [runLearningResourcePlatform]
     * @param {string} [runLearningResourceReadableId]
     * @param {string} [runRunId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentfilesList: async (
      limit?: number,
      offset?: number,
      run?: number,
      runLearningResource?: number,
      runLearningResourceOfferedByName?: string,
      runLearningResourcePlatform?: string,
      runLearningResourceReadableId?: string,
      runRunId?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/contentfiles/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (run !== undefined) {
        localVarQueryParameter["run"] = run
      }

      if (runLearningResource !== undefined) {
        localVarQueryParameter["run__learning_resource"] = runLearningResource
      }

      if (runLearningResourceOfferedByName !== undefined) {
        localVarQueryParameter["run__learning_resource__offered_by__name"] =
          runLearningResourceOfferedByName
      }

      if (runLearningResourcePlatform !== undefined) {
        localVarQueryParameter["run__learning_resource__platform"] =
          runLearningResourcePlatform
      }

      if (runLearningResourceReadableId !== undefined) {
        localVarQueryParameter["run__learning_resource__readable_id"] =
          runLearningResourceReadableId
      }

      if (runRunId !== undefined) {
        localVarQueryParameter["run__run_id"] = runRunId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for CpntentFiles
     * @param {number} id A unique integer value identifying this contentfile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentfilesRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("contentfilesRetrieve", "id", id)
      const localVarPath = `/api/v1/contentfiles/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * ContentfilesApi - functional programming interface
 * @export
 */
export const ContentfilesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    ContentfilesApiAxiosParamCreator(configuration)
  return {
    /**
     * Viewset for CpntentFiles
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {number} [run]
     * @param {number} [runLearningResource]
     * @param {string} [runLearningResourceOfferedByName]
     * @param {string} [runLearningResourcePlatform]
     * @param {string} [runLearningResourceReadableId]
     * @param {string} [runRunId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async contentfilesList(
      limit?: number,
      offset?: number,
      run?: number,
      runLearningResource?: number,
      runLearningResourceOfferedByName?: string,
      runLearningResourcePlatform?: string,
      runLearningResourceReadableId?: string,
      runRunId?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedContentFileList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.contentfilesList(
          limit,
          offset,
          run,
          runLearningResource,
          runLearningResourceOfferedByName,
          runLearningResourcePlatform,
          runLearningResourceReadableId,
          runRunId,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ContentfilesApi.contentfilesList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for CpntentFiles
     * @param {number} id A unique integer value identifying this contentfile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async contentfilesRetrieve(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContentFile>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.contentfilesRetrieve(id, options)
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ContentfilesApi.contentfilesRetrieve"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    }
  }
}

/**
 * ContentfilesApi - factory interface
 * @export
 */
export const ContentfilesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ContentfilesApiFp(configuration)
  return {
    /**
     * Viewset for CpntentFiles
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {number} [run]
     * @param {number} [runLearningResource]
     * @param {string} [runLearningResourceOfferedByName]
     * @param {string} [runLearningResourcePlatform]
     * @param {string} [runLearningResourceReadableId]
     * @param {string} [runRunId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentfilesList(
      limit?: number,
      offset?: number,
      run?: number,
      runLearningResource?: number,
      runLearningResourceOfferedByName?: string,
      runLearningResourcePlatform?: string,
      runLearningResourceReadableId?: string,
      runRunId?: string,
      options?: any
    ): AxiosPromise<PaginatedContentFileList> {
      return localVarFp
        .contentfilesList(
          limit,
          offset,
          run,
          runLearningResource,
          runLearningResourceOfferedByName,
          runLearningResourcePlatform,
          runLearningResourceReadableId,
          runRunId,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for CpntentFiles
     * @param {number} id A unique integer value identifying this contentfile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentfilesRetrieve(id: number, options?: any): AxiosPromise<ContentFile> {
      return localVarFp
        .contentfilesRetrieve(id, options)
        .then(request => request(axios, basePath))
    }
  }
}

/**
 * ContentfilesApi - object-oriented interface
 * @export
 * @class ContentfilesApi
 * @extends {BaseAPI}
 */
export class ContentfilesApi extends BaseAPI {
  /**
   * Viewset for CpntentFiles
   * @param {number} [limit] Number of results to return per page.
   * @param {number} [offset] The initial index from which to return the results.
   * @param {number} [run]
   * @param {number} [runLearningResource]
   * @param {string} [runLearningResourceOfferedByName]
   * @param {string} [runLearningResourcePlatform]
   * @param {string} [runLearningResourceReadableId]
   * @param {string} [runRunId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContentfilesApi
   */
  public contentfilesList(
    limit?: number,
    offset?: number,
    run?: number,
    runLearningResource?: number,
    runLearningResourceOfferedByName?: string,
    runLearningResourcePlatform?: string,
    runLearningResourceReadableId?: string,
    runRunId?: string,
    options?: AxiosRequestConfig
  ) {
    return ContentfilesApiFp(this.configuration)
      .contentfilesList(
        limit,
        offset,
        run,
        runLearningResource,
        runLearningResourceOfferedByName,
        runLearningResourcePlatform,
        runLearningResourceReadableId,
        runRunId,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for CpntentFiles
   * @param {number} id A unique integer value identifying this contentfile.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContentfilesApi
   */
  public contentfilesRetrieve(id: number, options?: AxiosRequestConfig) {
    return ContentfilesApiFp(this.configuration)
      .contentfilesRetrieve(id, options)
      .then(request => request(this.axios, this.basePath))
  }
}

/**
 * CoursesApi - axios parameter creator
 * @export
 */
export const CoursesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Viewset for LearningResource nested ContentFiles
     * @param {number} runLearningResource
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {number} [run]
     * @param {string} [runRunId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesContentfilesList: async (
      runLearningResource: number,
      limit?: number,
      offset?: number,
      run?: number,
      runRunId?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'runLearningResource' is not null or undefined
      assertParamExists(
        "coursesContentfilesList",
        "runLearningResource",
        runLearningResource
      )
      const localVarPath =
        `/api/v1/courses/{run__learning_resource}/contentfiles/`.replace(
          `{${"run__learning_resource"}}`,
          encodeURIComponent(String(runLearningResource))
        )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (run !== undefined) {
        localVarQueryParameter["run"] = run
      }

      if (runRunId !== undefined) {
        localVarQueryParameter["run__run_id"] = runRunId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningResource nested ContentFiles
     * @param {number} id A unique integer value identifying this contentfile.
     * @param {number} runLearningResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesContentfilesRetrieve: async (
      id: number,
      runLearningResource: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("coursesContentfilesRetrieve", "id", id)
      // verify required parameter 'runLearningResource' is not null or undefined
      assertParamExists(
        "coursesContentfilesRetrieve",
        "runLearningResource",
        runLearningResource
      )
      const localVarPath =
        `/api/v1/courses/{run__learning_resource}/contentfiles/{id}/`
          .replace(`{${"id"}}`, encodeURIComponent(String(id)))
          .replace(
            `{${"run__learning_resource"}}`,
            encodeURIComponent(String(runLearningResource))
          )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {CoursesListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {CoursesListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {CoursesListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {CoursesListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {CoursesListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesList: async (
      department?: CoursesListDepartmentEnum,
      limit?: number,
      offeredBy?: CoursesListOfferedByEnum,
      offset?: number,
      platform?: CoursesListPlatformEnum,
      professional?: boolean,
      resourceType?: CoursesListResourceTypeEnum,
      sortby?: CoursesListSortbyEnum,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/courses/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (department !== undefined) {
        localVarQueryParameter["department"] = department
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offeredBy !== undefined) {
        localVarQueryParameter["offered_by"] = offeredBy
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (platform !== undefined) {
        localVarQueryParameter["platform"] = platform
      }

      if (professional !== undefined) {
        localVarQueryParameter["professional"] = professional
      }

      if (resourceType !== undefined) {
        localVarQueryParameter["resource_type"] = resourceType
      }

      if (sortby !== undefined) {
        localVarQueryParameter["sortby"] = sortby
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {CoursesNewListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {CoursesNewListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {CoursesNewListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {CoursesNewListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {CoursesNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesNewList: async (
      department?: CoursesNewListDepartmentEnum,
      limit?: number,
      offeredBy?: CoursesNewListOfferedByEnum,
      offset?: number,
      platform?: CoursesNewListPlatformEnum,
      professional?: boolean,
      resourceType?: CoursesNewListResourceTypeEnum,
      sortby?: CoursesNewListSortbyEnum,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/courses/new/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (department !== undefined) {
        localVarQueryParameter["department"] = department
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offeredBy !== undefined) {
        localVarQueryParameter["offered_by"] = offeredBy
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (platform !== undefined) {
        localVarQueryParameter["platform"] = platform
      }

      if (professional !== undefined) {
        localVarQueryParameter["professional"] = professional
      }

      if (resourceType !== undefined) {
        localVarQueryParameter["resource_type"] = resourceType
      }

      if (sortby !== undefined) {
        localVarQueryParameter["sortby"] = sortby
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("coursesRetrieve", "id", id)
      const localVarPath = `/api/v1/courses/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {CoursesUpcomingListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {CoursesUpcomingListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {CoursesUpcomingListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {CoursesUpcomingListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {CoursesUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesUpcomingList: async (
      department?: CoursesUpcomingListDepartmentEnum,
      limit?: number,
      offeredBy?: CoursesUpcomingListOfferedByEnum,
      offset?: number,
      platform?: CoursesUpcomingListPlatformEnum,
      professional?: boolean,
      resourceType?: CoursesUpcomingListResourceTypeEnum,
      sortby?: CoursesUpcomingListSortbyEnum,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/courses/upcoming/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (department !== undefined) {
        localVarQueryParameter["department"] = department
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offeredBy !== undefined) {
        localVarQueryParameter["offered_by"] = offeredBy
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (platform !== undefined) {
        localVarQueryParameter["platform"] = platform
      }

      if (professional !== undefined) {
        localVarQueryParameter["professional"] = professional
      }

      if (resourceType !== undefined) {
        localVarQueryParameter["resource_type"] = resourceType
      }

      if (sortby !== undefined) {
        localVarQueryParameter["sortby"] = sortby
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * CoursesApi - functional programming interface
 * @export
 */
export const CoursesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CoursesApiAxiosParamCreator(configuration)
  return {
    /**
     * Viewset for LearningResource nested ContentFiles
     * @param {number} runLearningResource
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {number} [run]
     * @param {string} [runRunId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async coursesContentfilesList(
      runLearningResource: number,
      limit?: number,
      offset?: number,
      run?: number,
      runRunId?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedContentFileList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.coursesContentfilesList(
          runLearningResource,
          limit,
          offset,
          run,
          runRunId,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["CoursesApi.coursesContentfilesList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for LearningResource nested ContentFiles
     * @param {number} id A unique integer value identifying this contentfile.
     * @param {number} runLearningResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async coursesContentfilesRetrieve(
      id: number,
      runLearningResource: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContentFile>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.coursesContentfilesRetrieve(
          id,
          runLearningResource,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["CoursesApi.coursesContentfilesRetrieve"]?.[index]
          ?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {CoursesListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {CoursesListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {CoursesListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {CoursesListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {CoursesListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async coursesList(
      department?: CoursesListDepartmentEnum,
      limit?: number,
      offeredBy?: CoursesListOfferedByEnum,
      offset?: number,
      platform?: CoursesListPlatformEnum,
      professional?: boolean,
      resourceType?: CoursesListResourceTypeEnum,
      sortby?: CoursesListSortbyEnum,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.coursesList(
        department,
        limit,
        offeredBy,
        offset,
        platform,
        professional,
        resourceType,
        sortby,
        options
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["CoursesApi.coursesList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {CoursesNewListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {CoursesNewListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {CoursesNewListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {CoursesNewListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {CoursesNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async coursesNewList(
      department?: CoursesNewListDepartmentEnum,
      limit?: number,
      offeredBy?: CoursesNewListOfferedByEnum,
      offset?: number,
      platform?: CoursesNewListPlatformEnum,
      professional?: boolean,
      resourceType?: CoursesNewListResourceTypeEnum,
      sortby?: CoursesNewListSortbyEnum,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.coursesNewList(
        department,
        limit,
        offeredBy,
        offset,
        platform,
        professional,
        resourceType,
        sortby,
        options
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["CoursesApi.coursesNewList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async coursesRetrieve(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.coursesRetrieve(
        id,
        options
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["CoursesApi.coursesRetrieve"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {CoursesUpcomingListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {CoursesUpcomingListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {CoursesUpcomingListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {CoursesUpcomingListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {CoursesUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async coursesUpcomingList(
      department?: CoursesUpcomingListDepartmentEnum,
      limit?: number,
      offeredBy?: CoursesUpcomingListOfferedByEnum,
      offset?: number,
      platform?: CoursesUpcomingListPlatformEnum,
      professional?: boolean,
      resourceType?: CoursesUpcomingListResourceTypeEnum,
      sortby?: CoursesUpcomingListSortbyEnum,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.coursesUpcomingList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["CoursesApi.coursesUpcomingList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    }
  }
}

/**
 * CoursesApi - factory interface
 * @export
 */
export const CoursesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CoursesApiFp(configuration)
  return {
    /**
     * Viewset for LearningResource nested ContentFiles
     * @param {number} runLearningResource
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {number} [run]
     * @param {string} [runRunId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesContentfilesList(
      runLearningResource: number,
      limit?: number,
      offset?: number,
      run?: number,
      runRunId?: string,
      options?: any
    ): AxiosPromise<PaginatedContentFileList> {
      return localVarFp
        .coursesContentfilesList(
          runLearningResource,
          limit,
          offset,
          run,
          runRunId,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningResource nested ContentFiles
     * @param {number} id A unique integer value identifying this contentfile.
     * @param {number} runLearningResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesContentfilesRetrieve(
      id: number,
      runLearningResource: number,
      options?: any
    ): AxiosPromise<ContentFile> {
      return localVarFp
        .coursesContentfilesRetrieve(id, runLearningResource, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {CoursesListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {CoursesListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {CoursesListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {CoursesListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {CoursesListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesList(
      department?: CoursesListDepartmentEnum,
      limit?: number,
      offeredBy?: CoursesListOfferedByEnum,
      offset?: number,
      platform?: CoursesListPlatformEnum,
      professional?: boolean,
      resourceType?: CoursesListResourceTypeEnum,
      sortby?: CoursesListSortbyEnum,
      options?: any
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .coursesList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {CoursesNewListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {CoursesNewListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {CoursesNewListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {CoursesNewListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {CoursesNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesNewList(
      department?: CoursesNewListDepartmentEnum,
      limit?: number,
      offeredBy?: CoursesNewListOfferedByEnum,
      offset?: number,
      platform?: CoursesNewListPlatformEnum,
      professional?: boolean,
      resourceType?: CoursesNewListResourceTypeEnum,
      sortby?: CoursesNewListSortbyEnum,
      options?: any
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .coursesNewList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesRetrieve(id: number, options?: any): AxiosPromise<LearningResource> {
      return localVarFp
        .coursesRetrieve(id, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {CoursesUpcomingListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {CoursesUpcomingListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {CoursesUpcomingListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {CoursesUpcomingListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {CoursesUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coursesUpcomingList(
      department?: CoursesUpcomingListDepartmentEnum,
      limit?: number,
      offeredBy?: CoursesUpcomingListOfferedByEnum,
      offset?: number,
      platform?: CoursesUpcomingListPlatformEnum,
      professional?: boolean,
      resourceType?: CoursesUpcomingListResourceTypeEnum,
      sortby?: CoursesUpcomingListSortbyEnum,
      options?: any
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .coursesUpcomingList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
        .then(request => request(axios, basePath))
    }
  }
}

/**
 * CoursesApi - object-oriented interface
 * @export
 * @class CoursesApi
 * @extends {BaseAPI}
 */
export class CoursesApi extends BaseAPI {
  /**
   * Viewset for LearningResource nested ContentFiles
   * @param {number} runLearningResource
   * @param {number} [limit] Number of results to return per page.
   * @param {number} [offset] The initial index from which to return the results.
   * @param {number} [run]
   * @param {string} [runRunId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursesApi
   */
  public coursesContentfilesList(
    runLearningResource: number,
    limit?: number,
    offset?: number,
    run?: number,
    runRunId?: string,
    options?: AxiosRequestConfig
  ) {
    return CoursesApiFp(this.configuration)
      .coursesContentfilesList(
        runLearningResource,
        limit,
        offset,
        run,
        runRunId,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningResource nested ContentFiles
   * @param {number} id A unique integer value identifying this contentfile.
   * @param {number} runLearningResource
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursesApi
   */
  public coursesContentfilesRetrieve(
    id: number,
    runLearningResource: number,
    options?: AxiosRequestConfig
  ) {
    return CoursesApiFp(this.configuration)
      .coursesContentfilesRetrieve(id, runLearningResource, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of learning resources.
   * @summary List
   * @param {CoursesListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
   * @param {number} [limit] Number of results to return per page.
   * @param {CoursesListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @param {number} [offset] The initial index from which to return the results.
   * @param {CoursesListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
   * @param {boolean} [professional]
   * @param {CoursesListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
   * @param {CoursesListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursesApi
   */
  public coursesList(
    department?: CoursesListDepartmentEnum,
    limit?: number,
    offeredBy?: CoursesListOfferedByEnum,
    offset?: number,
    platform?: CoursesListPlatformEnum,
    professional?: boolean,
    resourceType?: CoursesListResourceTypeEnum,
    sortby?: CoursesListSortbyEnum,
    options?: AxiosRequestConfig
  ) {
    return CoursesApiFp(this.configuration)
      .coursesList(
        department,
        limit,
        offeredBy,
        offset,
        platform,
        professional,
        resourceType,
        sortby,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of newly released resources.
   * @summary List New
   * @param {CoursesNewListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
   * @param {number} [limit] Number of results to return per page.
   * @param {CoursesNewListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @param {number} [offset] The initial index from which to return the results.
   * @param {CoursesNewListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
   * @param {boolean} [professional]
   * @param {CoursesNewListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
   * @param {CoursesNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursesApi
   */
  public coursesNewList(
    department?: CoursesNewListDepartmentEnum,
    limit?: number,
    offeredBy?: CoursesNewListOfferedByEnum,
    offset?: number,
    platform?: CoursesNewListPlatformEnum,
    professional?: boolean,
    resourceType?: CoursesNewListResourceTypeEnum,
    sortby?: CoursesNewListSortbyEnum,
    options?: AxiosRequestConfig
  ) {
    return CoursesApiFp(this.configuration)
      .coursesNewList(
        department,
        limit,
        offeredBy,
        offset,
        platform,
        professional,
        resourceType,
        sortby,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Retrieve a single learning resource.
   * @summary Retrieve
   * @param {number} id A unique integer value identifying this learning resource.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursesApi
   */
  public coursesRetrieve(id: number, options?: AxiosRequestConfig) {
    return CoursesApiFp(this.configuration)
      .coursesRetrieve(id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of upcoming resources.
   * @summary List Upcoming
   * @param {CoursesUpcomingListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
   * @param {number} [limit] Number of results to return per page.
   * @param {CoursesUpcomingListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @param {number} [offset] The initial index from which to return the results.
   * @param {CoursesUpcomingListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
   * @param {boolean} [professional]
   * @param {CoursesUpcomingListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
   * @param {CoursesUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursesApi
   */
  public coursesUpcomingList(
    department?: CoursesUpcomingListDepartmentEnum,
    limit?: number,
    offeredBy?: CoursesUpcomingListOfferedByEnum,
    offset?: number,
    platform?: CoursesUpcomingListPlatformEnum,
    professional?: boolean,
    resourceType?: CoursesUpcomingListResourceTypeEnum,
    sortby?: CoursesUpcomingListSortbyEnum,
    options?: AxiosRequestConfig
  ) {
    return CoursesApiFp(this.configuration)
      .coursesUpcomingList(
        department,
        limit,
        offeredBy,
        offset,
        platform,
        professional,
        resourceType,
        sortby,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }
}

/**
 * @export
 */
export const CoursesListDepartmentEnum = {
  _1: "1",
  _10: "10",
  _11: "11",
  _12: "12",
  _14: "14",
  _15: "15",
  _16: "16",
  _17: "17",
  _18: "18",
  _2: "2",
  _20: "20",
  _21A: "21A",
  _21G: "21G",
  _21H: "21H",
  _21L: "21L",
  _21M: "21M",
  _22: "22",
  _24: "24",
  _3: "3",
  _4: "4",
  _5: "5",
  _6: "6",
  _7: "7",
  _8: "8",
  _9: "9",
  Cc: "CC",
  CmsW: "CMS-W",
  Ec: "EC",
  Es: "ES",
  Esd: "ESD",
  Hst: "HST",
  Ids: "IDS",
  Mas: "MAS",
  Pe: "PE",
  Res: "RES",
  Sts: "STS",
  Wgs: "WGS"
} as const
export type CoursesListDepartmentEnum =
  typeof CoursesListDepartmentEnum[keyof typeof CoursesListDepartmentEnum]
/**
 * @export
 */
export const CoursesListOfferedByEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Mitpe: "mitpe",
  Mitx: "mitx",
  Ocw: "ocw",
  Scc: "scc",
  See: "see",
  Xpro: "xpro"
} as const
export type CoursesListOfferedByEnum =
  typeof CoursesListOfferedByEnum[keyof typeof CoursesListOfferedByEnum]
/**
 * @export
 */
export const CoursesListPlatformEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Edx: "edx",
  Emeritus: "emeritus",
  Globalalumni: "globalalumni",
  Mitpe: "mitpe",
  Mitxonline: "mitxonline",
  Ocw: "ocw",
  Oll: "oll",
  Podcast: "podcast",
  Scc: "scc",
  See: "see",
  Simplilearn: "simplilearn",
  Susskind: "susskind",
  Whu: "whu",
  Xpro: "xpro"
} as const
export type CoursesListPlatformEnum =
  typeof CoursesListPlatformEnum[keyof typeof CoursesListPlatformEnum]
/**
 * @export
 */
export const CoursesListResourceTypeEnum = {
  Course: "course",
  LearningPath: "learning_path",
  Podcast: "podcast",
  PodcastEpisode: "podcast_episode",
  Program: "program"
} as const
export type CoursesListResourceTypeEnum =
  typeof CoursesListResourceTypeEnum[keyof typeof CoursesListResourceTypeEnum]
/**
 * @export
 */
export const CoursesListSortbyEnum = {
  CreatedOn: "-created_on",
  Id: "-id",
  LastModified: "-last_modified",
  Mitcoursenumber: "-mitcoursenumber",
  ReadableId: "-readable_id",
  StartDate: "-start_date",
  CreatedOn2: "created_on",
  Id2: "id",
  LastModified2: "last_modified",
  Mitcoursenumber2: "mitcoursenumber",
  ReadableId2: "readable_id",
  StartDate2: "start_date"
} as const
export type CoursesListSortbyEnum =
  typeof CoursesListSortbyEnum[keyof typeof CoursesListSortbyEnum]
/**
 * @export
 */
export const CoursesNewListDepartmentEnum = {
  _1: "1",
  _10: "10",
  _11: "11",
  _12: "12",
  _14: "14",
  _15: "15",
  _16: "16",
  _17: "17",
  _18: "18",
  _2: "2",
  _20: "20",
  _21A: "21A",
  _21G: "21G",
  _21H: "21H",
  _21L: "21L",
  _21M: "21M",
  _22: "22",
  _24: "24",
  _3: "3",
  _4: "4",
  _5: "5",
  _6: "6",
  _7: "7",
  _8: "8",
  _9: "9",
  Cc: "CC",
  CmsW: "CMS-W",
  Ec: "EC",
  Es: "ES",
  Esd: "ESD",
  Hst: "HST",
  Ids: "IDS",
  Mas: "MAS",
  Pe: "PE",
  Res: "RES",
  Sts: "STS",
  Wgs: "WGS"
} as const
export type CoursesNewListDepartmentEnum =
  typeof CoursesNewListDepartmentEnum[keyof typeof CoursesNewListDepartmentEnum]
/**
 * @export
 */
export const CoursesNewListOfferedByEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Mitpe: "mitpe",
  Mitx: "mitx",
  Ocw: "ocw",
  Scc: "scc",
  See: "see",
  Xpro: "xpro"
} as const
export type CoursesNewListOfferedByEnum =
  typeof CoursesNewListOfferedByEnum[keyof typeof CoursesNewListOfferedByEnum]
/**
 * @export
 */
export const CoursesNewListPlatformEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Edx: "edx",
  Emeritus: "emeritus",
  Globalalumni: "globalalumni",
  Mitpe: "mitpe",
  Mitxonline: "mitxonline",
  Ocw: "ocw",
  Oll: "oll",
  Podcast: "podcast",
  Scc: "scc",
  See: "see",
  Simplilearn: "simplilearn",
  Susskind: "susskind",
  Whu: "whu",
  Xpro: "xpro"
} as const
export type CoursesNewListPlatformEnum =
  typeof CoursesNewListPlatformEnum[keyof typeof CoursesNewListPlatformEnum]
/**
 * @export
 */
export const CoursesNewListResourceTypeEnum = {
  Course: "course",
  LearningPath: "learning_path",
  Podcast: "podcast",
  PodcastEpisode: "podcast_episode",
  Program: "program"
} as const
export type CoursesNewListResourceTypeEnum =
  typeof CoursesNewListResourceTypeEnum[keyof typeof CoursesNewListResourceTypeEnum]
/**
 * @export
 */
export const CoursesNewListSortbyEnum = {
  CreatedOn: "-created_on",
  Id: "-id",
  LastModified: "-last_modified",
  Mitcoursenumber: "-mitcoursenumber",
  ReadableId: "-readable_id",
  StartDate: "-start_date",
  CreatedOn2: "created_on",
  Id2: "id",
  LastModified2: "last_modified",
  Mitcoursenumber2: "mitcoursenumber",
  ReadableId2: "readable_id",
  StartDate2: "start_date"
} as const
export type CoursesNewListSortbyEnum =
  typeof CoursesNewListSortbyEnum[keyof typeof CoursesNewListSortbyEnum]
/**
 * @export
 */
export const CoursesUpcomingListDepartmentEnum = {
  _1: "1",
  _10: "10",
  _11: "11",
  _12: "12",
  _14: "14",
  _15: "15",
  _16: "16",
  _17: "17",
  _18: "18",
  _2: "2",
  _20: "20",
  _21A: "21A",
  _21G: "21G",
  _21H: "21H",
  _21L: "21L",
  _21M: "21M",
  _22: "22",
  _24: "24",
  _3: "3",
  _4: "4",
  _5: "5",
  _6: "6",
  _7: "7",
  _8: "8",
  _9: "9",
  Cc: "CC",
  CmsW: "CMS-W",
  Ec: "EC",
  Es: "ES",
  Esd: "ESD",
  Hst: "HST",
  Ids: "IDS",
  Mas: "MAS",
  Pe: "PE",
  Res: "RES",
  Sts: "STS",
  Wgs: "WGS"
} as const
export type CoursesUpcomingListDepartmentEnum =
  typeof CoursesUpcomingListDepartmentEnum[keyof typeof CoursesUpcomingListDepartmentEnum]
/**
 * @export
 */
export const CoursesUpcomingListOfferedByEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Mitpe: "mitpe",
  Mitx: "mitx",
  Ocw: "ocw",
  Scc: "scc",
  See: "see",
  Xpro: "xpro"
} as const
export type CoursesUpcomingListOfferedByEnum =
  typeof CoursesUpcomingListOfferedByEnum[keyof typeof CoursesUpcomingListOfferedByEnum]
/**
 * @export
 */
export const CoursesUpcomingListPlatformEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Edx: "edx",
  Emeritus: "emeritus",
  Globalalumni: "globalalumni",
  Mitpe: "mitpe",
  Mitxonline: "mitxonline",
  Ocw: "ocw",
  Oll: "oll",
  Podcast: "podcast",
  Scc: "scc",
  See: "see",
  Simplilearn: "simplilearn",
  Susskind: "susskind",
  Whu: "whu",
  Xpro: "xpro"
} as const
export type CoursesUpcomingListPlatformEnum =
  typeof CoursesUpcomingListPlatformEnum[keyof typeof CoursesUpcomingListPlatformEnum]
/**
 * @export
 */
export const CoursesUpcomingListResourceTypeEnum = {
  Course: "course",
  LearningPath: "learning_path",
  Podcast: "podcast",
  PodcastEpisode: "podcast_episode",
  Program: "program"
} as const
export type CoursesUpcomingListResourceTypeEnum =
  typeof CoursesUpcomingListResourceTypeEnum[keyof typeof CoursesUpcomingListResourceTypeEnum]
/**
 * @export
 */
export const CoursesUpcomingListSortbyEnum = {
  CreatedOn: "-created_on",
  Id: "-id",
  LastModified: "-last_modified",
  Mitcoursenumber: "-mitcoursenumber",
  ReadableId: "-readable_id",
  StartDate: "-start_date",
  CreatedOn2: "created_on",
  Id2: "id",
  LastModified2: "last_modified",
  Mitcoursenumber2: "mitcoursenumber",
  ReadableId2: "readable_id",
  StartDate2: "start_date"
} as const
export type CoursesUpcomingListSortbyEnum =
  typeof CoursesUpcomingListSortbyEnum[keyof typeof CoursesUpcomingListSortbyEnum]

/**
 * FieldsApi - axios parameter creator
 * @export
 */
export const FieldsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
     * @param {FieldChannelCreateRequest} fieldChannelCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fieldsCreate: async (
      fieldChannelCreateRequest: FieldChannelCreateRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'fieldChannelCreateRequest' is not null or undefined
      assertParamExists(
        "fieldsCreate",
        "fieldChannelCreateRequest",
        fieldChannelCreateRequest
      )
      const localVarPath = `/api/v1/fields/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        fieldChannelCreateRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
     * @param {string} fieldName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fieldsDestroy: async (
      fieldName: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'fieldName' is not null or undefined
      assertParamExists("fieldsDestroy", "fieldName", fieldName)
      const localVarPath = `/api/v1/fields/{field_name}/`.replace(
        `{${"field_name"}}`,
        encodeURIComponent(String(fieldName))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fieldsList: async (
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/fields/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * View for listing and adding moderators
     * @param {string} fieldName
     * @param {FieldModeratorRequest} [fieldModeratorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fieldsModeratorsCreate: async (
      fieldName: string,
      fieldModeratorRequest?: FieldModeratorRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'fieldName' is not null or undefined
      assertParamExists("fieldsModeratorsCreate", "fieldName", fieldName)
      const localVarPath = `/api/v1/fields/{field_name}/moderators/`.replace(
        `{${"field_name"}}`,
        encodeURIComponent(String(fieldName))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        fieldModeratorRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Remove the user from the moderator groups for this website
     * @param {string} fieldName
     * @param {string} moderatorName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fieldsModeratorsDestroy: async (
      fieldName: string,
      moderatorName: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'fieldName' is not null or undefined
      assertParamExists("fieldsModeratorsDestroy", "fieldName", fieldName)
      // verify required parameter 'moderatorName' is not null or undefined
      assertParamExists(
        "fieldsModeratorsDestroy",
        "moderatorName",
        moderatorName
      )
      const localVarPath =
        `/api/v1/fields/{field_name}/moderators/{moderator_name}/`
          .replace(`{${"field_name"}}`, encodeURIComponent(String(fieldName)))
          .replace(
            `{${"moderator_name"}}`,
            encodeURIComponent(String(moderatorName))
          )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * View for listing and adding moderators
     * @param {string} fieldName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fieldsModeratorsList: async (
      fieldName: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'fieldName' is not null or undefined
      assertParamExists("fieldsModeratorsList", "fieldName", fieldName)
      const localVarPath = `/api/v1/fields/{field_name}/moderators/`.replace(
        `{${"field_name"}}`,
        encodeURIComponent(String(fieldName))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
     * @param {string} fieldName
     * @param {PatchedFieldChannelWriteRequest} [patchedFieldChannelWriteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fieldsPartialUpdate: async (
      fieldName: string,
      patchedFieldChannelWriteRequest?: PatchedFieldChannelWriteRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'fieldName' is not null or undefined
      assertParamExists("fieldsPartialUpdate", "fieldName", fieldName)
      const localVarPath = `/api/v1/fields/{field_name}/`.replace(
        `{${"field_name"}}`,
        encodeURIComponent(String(fieldName))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchedFieldChannelWriteRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
     * @param {string} fieldName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fieldsRetrieve: async (
      fieldName: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'fieldName' is not null or undefined
      assertParamExists("fieldsRetrieve", "fieldName", fieldName)
      const localVarPath = `/api/v1/fields/{field_name}/`.replace(
        `{${"field_name"}}`,
        encodeURIComponent(String(fieldName))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
     * @param {string} fieldName
     * @param {FieldChannelWriteRequest} fieldChannelWriteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fieldsUpdate: async (
      fieldName: string,
      fieldChannelWriteRequest: FieldChannelWriteRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'fieldName' is not null or undefined
      assertParamExists("fieldsUpdate", "fieldName", fieldName)
      // verify required parameter 'fieldChannelWriteRequest' is not null or undefined
      assertParamExists(
        "fieldsUpdate",
        "fieldChannelWriteRequest",
        fieldChannelWriteRequest
      )
      const localVarPath = `/api/v1/fields/{field_name}/`.replace(
        `{${"field_name"}}`,
        encodeURIComponent(String(fieldName))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        fieldChannelWriteRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * FieldsApi - functional programming interface
 * @export
 */
export const FieldsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = FieldsApiAxiosParamCreator(configuration)
  return {
    /**
     * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
     * @param {FieldChannelCreateRequest} fieldChannelCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fieldsCreate(
      fieldChannelCreateRequest: FieldChannelCreateRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FieldChannel>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fieldsCreate(
        fieldChannelCreateRequest,
        options
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["FieldsApi.fieldsCreate"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
     * @param {string} fieldName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fieldsDestroy(
      fieldName: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fieldsDestroy(
        fieldName,
        options
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["FieldsApi.fieldsDestroy"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fieldsList(
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedFieldChannelList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fieldsList(
        limit,
        offset,
        options
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["FieldsApi.fieldsList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * View for listing and adding moderators
     * @param {string} fieldName
     * @param {FieldModeratorRequest} [fieldModeratorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fieldsModeratorsCreate(
      fieldName: string,
      fieldModeratorRequest?: FieldModeratorRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FieldModerator>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.fieldsModeratorsCreate(
          fieldName,
          fieldModeratorRequest,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["FieldsApi.fieldsModeratorsCreate"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Remove the user from the moderator groups for this website
     * @param {string} fieldName
     * @param {string} moderatorName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fieldsModeratorsDestroy(
      fieldName: string,
      moderatorName: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.fieldsModeratorsDestroy(
          fieldName,
          moderatorName,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["FieldsApi.fieldsModeratorsDestroy"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * View for listing and adding moderators
     * @param {string} fieldName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fieldsModeratorsList(
      fieldName: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<FieldModerator>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.fieldsModeratorsList(fieldName, options)
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["FieldsApi.fieldsModeratorsList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
     * @param {string} fieldName
     * @param {PatchedFieldChannelWriteRequest} [patchedFieldChannelWriteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fieldsPartialUpdate(
      fieldName: string,
      patchedFieldChannelWriteRequest?: PatchedFieldChannelWriteRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FieldChannel>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.fieldsPartialUpdate(
          fieldName,
          patchedFieldChannelWriteRequest,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["FieldsApi.fieldsPartialUpdate"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
     * @param {string} fieldName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fieldsRetrieve(
      fieldName: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FieldChannel>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fieldsRetrieve(
        fieldName,
        options
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["FieldsApi.fieldsRetrieve"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
     * @param {string} fieldName
     * @param {FieldChannelWriteRequest} fieldChannelWriteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fieldsUpdate(
      fieldName: string,
      fieldChannelWriteRequest: FieldChannelWriteRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FieldChannel>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fieldsUpdate(
        fieldName,
        fieldChannelWriteRequest,
        options
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["FieldsApi.fieldsUpdate"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    }
  }
}

/**
 * FieldsApi - factory interface
 * @export
 */
export const FieldsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = FieldsApiFp(configuration)
  return {
    /**
     * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
     * @param {FieldChannelCreateRequest} fieldChannelCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fieldsCreate(
      fieldChannelCreateRequest: FieldChannelCreateRequest,
      options?: any
    ): AxiosPromise<FieldChannel> {
      return localVarFp
        .fieldsCreate(fieldChannelCreateRequest, options)
        .then(request => request(axios, basePath))
    },
    /**
     * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
     * @param {string} fieldName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fieldsDestroy(fieldName: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .fieldsDestroy(fieldName, options)
        .then(request => request(axios, basePath))
    },
    /**
     * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fieldsList(
      limit?: number,
      offset?: number,
      options?: any
    ): AxiosPromise<PaginatedFieldChannelList> {
      return localVarFp
        .fieldsList(limit, offset, options)
        .then(request => request(axios, basePath))
    },
    /**
     * View for listing and adding moderators
     * @param {string} fieldName
     * @param {FieldModeratorRequest} [fieldModeratorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fieldsModeratorsCreate(
      fieldName: string,
      fieldModeratorRequest?: FieldModeratorRequest,
      options?: any
    ): AxiosPromise<FieldModerator> {
      return localVarFp
        .fieldsModeratorsCreate(fieldName, fieldModeratorRequest, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Remove the user from the moderator groups for this website
     * @param {string} fieldName
     * @param {string} moderatorName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fieldsModeratorsDestroy(
      fieldName: string,
      moderatorName: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .fieldsModeratorsDestroy(fieldName, moderatorName, options)
        .then(request => request(axios, basePath))
    },
    /**
     * View for listing and adding moderators
     * @param {string} fieldName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fieldsModeratorsList(
      fieldName: string,
      options?: any
    ): AxiosPromise<Array<FieldModerator>> {
      return localVarFp
        .fieldsModeratorsList(fieldName, options)
        .then(request => request(axios, basePath))
    },
    /**
     * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
     * @param {string} fieldName
     * @param {PatchedFieldChannelWriteRequest} [patchedFieldChannelWriteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fieldsPartialUpdate(
      fieldName: string,
      patchedFieldChannelWriteRequest?: PatchedFieldChannelWriteRequest,
      options?: any
    ): AxiosPromise<FieldChannel> {
      return localVarFp
        .fieldsPartialUpdate(
          fieldName,
          patchedFieldChannelWriteRequest,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
     * @param {string} fieldName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fieldsRetrieve(
      fieldName: string,
      options?: any
    ): AxiosPromise<FieldChannel> {
      return localVarFp
        .fieldsRetrieve(fieldName, options)
        .then(request => request(axios, basePath))
    },
    /**
     * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
     * @param {string} fieldName
     * @param {FieldChannelWriteRequest} fieldChannelWriteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fieldsUpdate(
      fieldName: string,
      fieldChannelWriteRequest: FieldChannelWriteRequest,
      options?: any
    ): AxiosPromise<FieldChannel> {
      return localVarFp
        .fieldsUpdate(fieldName, fieldChannelWriteRequest, options)
        .then(request => request(axios, basePath))
    }
  }
}

/**
 * FieldsApi - object-oriented interface
 * @export
 * @class FieldsApi
 * @extends {BaseAPI}
 */
export class FieldsApi extends BaseAPI {
  /**
   * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
   * @param {FieldChannelCreateRequest} fieldChannelCreateRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FieldsApi
   */
  public fieldsCreate(
    fieldChannelCreateRequest: FieldChannelCreateRequest,
    options?: AxiosRequestConfig
  ) {
    return FieldsApiFp(this.configuration)
      .fieldsCreate(fieldChannelCreateRequest, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
   * @param {string} fieldName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FieldsApi
   */
  public fieldsDestroy(fieldName: string, options?: AxiosRequestConfig) {
    return FieldsApiFp(this.configuration)
      .fieldsDestroy(fieldName, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
   * @param {number} [limit] Number of results to return per page.
   * @param {number} [offset] The initial index from which to return the results.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FieldsApi
   */
  public fieldsList(
    limit?: number,
    offset?: number,
    options?: AxiosRequestConfig
  ) {
    return FieldsApiFp(this.configuration)
      .fieldsList(limit, offset, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * View for listing and adding moderators
   * @param {string} fieldName
   * @param {FieldModeratorRequest} [fieldModeratorRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FieldsApi
   */
  public fieldsModeratorsCreate(
    fieldName: string,
    fieldModeratorRequest?: FieldModeratorRequest,
    options?: AxiosRequestConfig
  ) {
    return FieldsApiFp(this.configuration)
      .fieldsModeratorsCreate(fieldName, fieldModeratorRequest, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Remove the user from the moderator groups for this website
   * @param {string} fieldName
   * @param {string} moderatorName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FieldsApi
   */
  public fieldsModeratorsDestroy(
    fieldName: string,
    moderatorName: string,
    options?: AxiosRequestConfig
  ) {
    return FieldsApiFp(this.configuration)
      .fieldsModeratorsDestroy(fieldName, moderatorName, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * View for listing and adding moderators
   * @param {string} fieldName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FieldsApi
   */
  public fieldsModeratorsList(fieldName: string, options?: AxiosRequestConfig) {
    return FieldsApiFp(this.configuration)
      .fieldsModeratorsList(fieldName, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
   * @param {string} fieldName
   * @param {PatchedFieldChannelWriteRequest} [patchedFieldChannelWriteRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FieldsApi
   */
  public fieldsPartialUpdate(
    fieldName: string,
    patchedFieldChannelWriteRequest?: PatchedFieldChannelWriteRequest,
    options?: AxiosRequestConfig
  ) {
    return FieldsApiFp(this.configuration)
      .fieldsPartialUpdate(fieldName, patchedFieldChannelWriteRequest, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
   * @param {string} fieldName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FieldsApi
   */
  public fieldsRetrieve(fieldName: string, options?: AxiosRequestConfig) {
    return FieldsApiFp(this.configuration)
      .fieldsRetrieve(fieldName, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * CRUD Operations related to Fields. Fields may represent groups or organizations at MIT and are a high-level categorization of content.
   * @param {string} fieldName
   * @param {FieldChannelWriteRequest} fieldChannelWriteRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FieldsApi
   */
  public fieldsUpdate(
    fieldName: string,
    fieldChannelWriteRequest: FieldChannelWriteRequest,
    options?: AxiosRequestConfig
  ) {
    return FieldsApiFp(this.configuration)
      .fieldsUpdate(fieldName, fieldChannelWriteRequest, options)
      .then(request => request(this.axios, this.basePath))
  }
}

/**
 * LearningResourcesApi - axios parameter creator
 * @export
 */
export const LearningResourcesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Viewset for LearningResource nested ContentFiles
     * @param {number} runLearningResource
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {number} [run]
     * @param {string} [runRunId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesContentfilesList: async (
      runLearningResource: number,
      limit?: number,
      offset?: number,
      run?: number,
      runRunId?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'runLearningResource' is not null or undefined
      assertParamExists(
        "learningResourcesContentfilesList",
        "runLearningResource",
        runLearningResource
      )
      const localVarPath =
        `/api/v1/learning_resources/{run__learning_resource}/contentfiles/`.replace(
          `{${"run__learning_resource"}}`,
          encodeURIComponent(String(runLearningResource))
        )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (run !== undefined) {
        localVarQueryParameter["run"] = run
      }

      if (runRunId !== undefined) {
        localVarQueryParameter["run__run_id"] = runRunId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningResource nested ContentFiles
     * @param {number} id A unique integer value identifying this contentfile.
     * @param {number} runLearningResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesContentfilesRetrieve: async (
      id: number,
      runLearningResource: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningResourcesContentfilesRetrieve", "id", id)
      // verify required parameter 'runLearningResource' is not null or undefined
      assertParamExists(
        "learningResourcesContentfilesRetrieve",
        "runLearningResource",
        runLearningResource
      )
      const localVarPath =
        `/api/v1/learning_resources/{run__learning_resource}/contentfiles/{id}/`
          .replace(`{${"id"}}`, encodeURIComponent(String(id)))
          .replace(
            `{${"run__learning_resource"}}`,
            encodeURIComponent(String(runLearningResource))
          )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningResource related resources
     * @param {number} parentId
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [sortby] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesItemsList: async (
      parentId: number,
      limit?: number,
      offset?: number,
      sortby?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("learningResourcesItemsList", "parentId", parentId)
      const localVarPath =
        `/api/v1/learning_resources/{parent_id}/items/`.replace(
          `{${"parent_id"}}`,
          encodeURIComponent(String(parentId))
        )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (sortby !== undefined) {
        localVarQueryParameter["sortby"] = sortby
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningResource related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesItemsRetrieve: async (
      id: number,
      parentId: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningResourcesItemsRetrieve", "id", id)
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("learningResourcesItemsRetrieve", "parentId", parentId)
      const localVarPath = `/api/v1/learning_resources/{parent_id}/items/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {LearningResourcesListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {LearningResourcesListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {LearningResourcesListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {LearningResourcesListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {LearningResourcesListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesList: async (
      department?: LearningResourcesListDepartmentEnum,
      limit?: number,
      offeredBy?: LearningResourcesListOfferedByEnum,
      offset?: number,
      platform?: LearningResourcesListPlatformEnum,
      professional?: boolean,
      resourceType?: LearningResourcesListResourceTypeEnum,
      sortby?: LearningResourcesListSortbyEnum,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/learning_resources/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (department !== undefined) {
        localVarQueryParameter["department"] = department
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offeredBy !== undefined) {
        localVarQueryParameter["offered_by"] = offeredBy
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (platform !== undefined) {
        localVarQueryParameter["platform"] = platform
      }

      if (professional !== undefined) {
        localVarQueryParameter["professional"] = professional
      }

      if (resourceType !== undefined) {
        localVarQueryParameter["resource_type"] = resourceType
      }

      if (sortby !== undefined) {
        localVarQueryParameter["sortby"] = sortby
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {LearningResourcesNewListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {LearningResourcesNewListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {LearningResourcesNewListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {LearningResourcesNewListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {LearningResourcesNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesNewList: async (
      department?: LearningResourcesNewListDepartmentEnum,
      limit?: number,
      offeredBy?: LearningResourcesNewListOfferedByEnum,
      offset?: number,
      platform?: LearningResourcesNewListPlatformEnum,
      professional?: boolean,
      resourceType?: LearningResourcesNewListResourceTypeEnum,
      sortby?: LearningResourcesNewListSortbyEnum,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/learning_resources/new/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (department !== undefined) {
        localVarQueryParameter["department"] = department
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offeredBy !== undefined) {
        localVarQueryParameter["offered_by"] = offeredBy
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (platform !== undefined) {
        localVarQueryParameter["platform"] = platform
      }

      if (professional !== undefined) {
        localVarQueryParameter["professional"] = professional
      }

      if (resourceType !== undefined) {
        localVarQueryParameter["resource_type"] = resourceType
      }

      if (sortby !== undefined) {
        localVarQueryParameter["sortby"] = sortby
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningResourcesRetrieve", "id", id)
      const localVarPath = `/api/v1/learning_resources/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {LearningResourcesUpcomingListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {LearningResourcesUpcomingListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {LearningResourcesUpcomingListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {LearningResourcesUpcomingListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {LearningResourcesUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesUpcomingList: async (
      department?: LearningResourcesUpcomingListDepartmentEnum,
      limit?: number,
      offeredBy?: LearningResourcesUpcomingListOfferedByEnum,
      offset?: number,
      platform?: LearningResourcesUpcomingListPlatformEnum,
      professional?: boolean,
      resourceType?: LearningResourcesUpcomingListResourceTypeEnum,
      sortby?: LearningResourcesUpcomingListSortbyEnum,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/learning_resources/upcoming/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (department !== undefined) {
        localVarQueryParameter["department"] = department
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offeredBy !== undefined) {
        localVarQueryParameter["offered_by"] = offeredBy
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (platform !== undefined) {
        localVarQueryParameter["platform"] = platform
      }

      if (professional !== undefined) {
        localVarQueryParameter["professional"] = professional
      }

      if (resourceType !== undefined) {
        localVarQueryParameter["resource_type"] = resourceType
      }

      if (sortby !== undefined) {
        localVarQueryParameter["sortby"] = sortby
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * LearningResourcesApi - functional programming interface
 * @export
 */
export const LearningResourcesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    LearningResourcesApiAxiosParamCreator(configuration)
  return {
    /**
     * Viewset for LearningResource nested ContentFiles
     * @param {number} runLearningResource
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {number} [run]
     * @param {string} [runRunId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesContentfilesList(
      runLearningResource: number,
      limit?: number,
      offset?: number,
      run?: number,
      runRunId?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedContentFileList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesContentfilesList(
          runLearningResource,
          limit,
          offset,
          run,
          runRunId,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap[
          "LearningResourcesApi.learningResourcesContentfilesList"
        ]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for LearningResource nested ContentFiles
     * @param {number} id A unique integer value identifying this contentfile.
     * @param {number} runLearningResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesContentfilesRetrieve(
      id: number,
      runLearningResource: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContentFile>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesContentfilesRetrieve(
          id,
          runLearningResource,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap[
          "LearningResourcesApi.learningResourcesContentfilesRetrieve"
        ]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for LearningResource related resources
     * @param {number} parentId
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [sortby] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesItemsList(
      parentId: number,
      limit?: number,
      offset?: number,
      sortby?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceChildList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesItemsList(
          parentId,
          limit,
          offset,
          sortby,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["LearningResourcesApi.learningResourcesItemsList"]?.[
          index
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for LearningResource related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesItemsRetrieve(
      id: number,
      parentId: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResourceChild>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesItemsRetrieve(
          id,
          parentId,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap[
          "LearningResourcesApi.learningResourcesItemsRetrieve"
        ]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {LearningResourcesListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {LearningResourcesListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {LearningResourcesListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {LearningResourcesListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {LearningResourcesListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesList(
      department?: LearningResourcesListDepartmentEnum,
      limit?: number,
      offeredBy?: LearningResourcesListOfferedByEnum,
      offset?: number,
      platform?: LearningResourcesListPlatformEnum,
      professional?: boolean,
      resourceType?: LearningResourcesListResourceTypeEnum,
      sortby?: LearningResourcesListSortbyEnum,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["LearningResourcesApi.learningResourcesList"]?.[
          index
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {LearningResourcesNewListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {LearningResourcesNewListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {LearningResourcesNewListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {LearningResourcesNewListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {LearningResourcesNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesNewList(
      department?: LearningResourcesNewListDepartmentEnum,
      limit?: number,
      offeredBy?: LearningResourcesNewListOfferedByEnum,
      offset?: number,
      platform?: LearningResourcesNewListPlatformEnum,
      professional?: boolean,
      resourceType?: LearningResourcesNewListResourceTypeEnum,
      sortby?: LearningResourcesNewListSortbyEnum,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesNewList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["LearningResourcesApi.learningResourcesNewList"]?.[
          index
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesRetrieve(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesRetrieve(id, options)
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["LearningResourcesApi.learningResourcesRetrieve"]?.[
          index
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {LearningResourcesUpcomingListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {LearningResourcesUpcomingListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {LearningResourcesUpcomingListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {LearningResourcesUpcomingListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {LearningResourcesUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesUpcomingList(
      department?: LearningResourcesUpcomingListDepartmentEnum,
      limit?: number,
      offeredBy?: LearningResourcesUpcomingListOfferedByEnum,
      offset?: number,
      platform?: LearningResourcesUpcomingListPlatformEnum,
      professional?: boolean,
      resourceType?: LearningResourcesUpcomingListResourceTypeEnum,
      sortby?: LearningResourcesUpcomingListSortbyEnum,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesUpcomingList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap[
          "LearningResourcesApi.learningResourcesUpcomingList"
        ]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    }
  }
}

/**
 * LearningResourcesApi - factory interface
 * @export
 */
export const LearningResourcesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = LearningResourcesApiFp(configuration)
  return {
    /**
     * Viewset for LearningResource nested ContentFiles
     * @param {number} runLearningResource
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {number} [run]
     * @param {string} [runRunId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesContentfilesList(
      runLearningResource: number,
      limit?: number,
      offset?: number,
      run?: number,
      runRunId?: string,
      options?: any
    ): AxiosPromise<PaginatedContentFileList> {
      return localVarFp
        .learningResourcesContentfilesList(
          runLearningResource,
          limit,
          offset,
          run,
          runRunId,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningResource nested ContentFiles
     * @param {number} id A unique integer value identifying this contentfile.
     * @param {number} runLearningResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesContentfilesRetrieve(
      id: number,
      runLearningResource: number,
      options?: any
    ): AxiosPromise<ContentFile> {
      return localVarFp
        .learningResourcesContentfilesRetrieve(id, runLearningResource, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningResource related resources
     * @param {number} parentId
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [sortby] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesItemsList(
      parentId: number,
      limit?: number,
      offset?: number,
      sortby?: string,
      options?: any
    ): AxiosPromise<PaginatedLearningResourceChildList> {
      return localVarFp
        .learningResourcesItemsList(parentId, limit, offset, sortby, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningResource related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesItemsRetrieve(
      id: number,
      parentId: number,
      options?: any
    ): AxiosPromise<LearningResourceChild> {
      return localVarFp
        .learningResourcesItemsRetrieve(id, parentId, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {LearningResourcesListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {LearningResourcesListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {LearningResourcesListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {LearningResourcesListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {LearningResourcesListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesList(
      department?: LearningResourcesListDepartmentEnum,
      limit?: number,
      offeredBy?: LearningResourcesListOfferedByEnum,
      offset?: number,
      platform?: LearningResourcesListPlatformEnum,
      professional?: boolean,
      resourceType?: LearningResourcesListResourceTypeEnum,
      sortby?: LearningResourcesListSortbyEnum,
      options?: any
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .learningResourcesList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {LearningResourcesNewListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {LearningResourcesNewListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {LearningResourcesNewListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {LearningResourcesNewListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {LearningResourcesNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesNewList(
      department?: LearningResourcesNewListDepartmentEnum,
      limit?: number,
      offeredBy?: LearningResourcesNewListOfferedByEnum,
      offset?: number,
      platform?: LearningResourcesNewListPlatformEnum,
      professional?: boolean,
      resourceType?: LearningResourcesNewListResourceTypeEnum,
      sortby?: LearningResourcesNewListSortbyEnum,
      options?: any
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .learningResourcesNewList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesRetrieve(
      id: number,
      options?: any
    ): AxiosPromise<LearningResource> {
      return localVarFp
        .learningResourcesRetrieve(id, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {LearningResourcesUpcomingListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {LearningResourcesUpcomingListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {LearningResourcesUpcomingListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {LearningResourcesUpcomingListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {LearningResourcesUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesUpcomingList(
      department?: LearningResourcesUpcomingListDepartmentEnum,
      limit?: number,
      offeredBy?: LearningResourcesUpcomingListOfferedByEnum,
      offset?: number,
      platform?: LearningResourcesUpcomingListPlatformEnum,
      professional?: boolean,
      resourceType?: LearningResourcesUpcomingListResourceTypeEnum,
      sortby?: LearningResourcesUpcomingListSortbyEnum,
      options?: any
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .learningResourcesUpcomingList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
        .then(request => request(axios, basePath))
    }
  }
}

/**
 * LearningResourcesApi - object-oriented interface
 * @export
 * @class LearningResourcesApi
 * @extends {BaseAPI}
 */
export class LearningResourcesApi extends BaseAPI {
  /**
   * Viewset for LearningResource nested ContentFiles
   * @param {number} runLearningResource
   * @param {number} [limit] Number of results to return per page.
   * @param {number} [offset] The initial index from which to return the results.
   * @param {number} [run]
   * @param {string} [runRunId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesContentfilesList(
    runLearningResource: number,
    limit?: number,
    offset?: number,
    run?: number,
    runRunId?: string,
    options?: AxiosRequestConfig
  ) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesContentfilesList(
        runLearningResource,
        limit,
        offset,
        run,
        runRunId,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningResource nested ContentFiles
   * @param {number} id A unique integer value identifying this contentfile.
   * @param {number} runLearningResource
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesContentfilesRetrieve(
    id: number,
    runLearningResource: number,
    options?: AxiosRequestConfig
  ) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesContentfilesRetrieve(id, runLearningResource, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningResource related resources
   * @param {number} parentId
   * @param {number} [limit] Number of results to return per page.
   * @param {number} [offset] The initial index from which to return the results.
   * @param {string} [sortby] Which field to use when ordering the results.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesItemsList(
    parentId: number,
    limit?: number,
    offset?: number,
    sortby?: string,
    options?: AxiosRequestConfig
  ) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesItemsList(parentId, limit, offset, sortby, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningResource related resources
   * @param {number} id A unique integer value identifying this learning resource relationship.
   * @param {number} parentId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesItemsRetrieve(
    id: number,
    parentId: number,
    options?: AxiosRequestConfig
  ) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesItemsRetrieve(id, parentId, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of learning resources.
   * @summary List
   * @param {LearningResourcesListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
   * @param {number} [limit] Number of results to return per page.
   * @param {LearningResourcesListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @param {number} [offset] The initial index from which to return the results.
   * @param {LearningResourcesListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
   * @param {boolean} [professional]
   * @param {LearningResourcesListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
   * @param {LearningResourcesListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesList(
    department?: LearningResourcesListDepartmentEnum,
    limit?: number,
    offeredBy?: LearningResourcesListOfferedByEnum,
    offset?: number,
    platform?: LearningResourcesListPlatformEnum,
    professional?: boolean,
    resourceType?: LearningResourcesListResourceTypeEnum,
    sortby?: LearningResourcesListSortbyEnum,
    options?: AxiosRequestConfig
  ) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesList(
        department,
        limit,
        offeredBy,
        offset,
        platform,
        professional,
        resourceType,
        sortby,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of newly released resources.
   * @summary List New
   * @param {LearningResourcesNewListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
   * @param {number} [limit] Number of results to return per page.
   * @param {LearningResourcesNewListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @param {number} [offset] The initial index from which to return the results.
   * @param {LearningResourcesNewListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
   * @param {boolean} [professional]
   * @param {LearningResourcesNewListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
   * @param {LearningResourcesNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesNewList(
    department?: LearningResourcesNewListDepartmentEnum,
    limit?: number,
    offeredBy?: LearningResourcesNewListOfferedByEnum,
    offset?: number,
    platform?: LearningResourcesNewListPlatformEnum,
    professional?: boolean,
    resourceType?: LearningResourcesNewListResourceTypeEnum,
    sortby?: LearningResourcesNewListSortbyEnum,
    options?: AxiosRequestConfig
  ) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesNewList(
        department,
        limit,
        offeredBy,
        offset,
        platform,
        professional,
        resourceType,
        sortby,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Retrieve a single learning resource.
   * @summary Retrieve
   * @param {number} id A unique integer value identifying this learning resource.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesRetrieve(id: number, options?: AxiosRequestConfig) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesRetrieve(id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of upcoming resources.
   * @summary List Upcoming
   * @param {LearningResourcesUpcomingListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
   * @param {number} [limit] Number of results to return per page.
   * @param {LearningResourcesUpcomingListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @param {number} [offset] The initial index from which to return the results.
   * @param {LearningResourcesUpcomingListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
   * @param {boolean} [professional]
   * @param {LearningResourcesUpcomingListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
   * @param {LearningResourcesUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesApi
   */
  public learningResourcesUpcomingList(
    department?: LearningResourcesUpcomingListDepartmentEnum,
    limit?: number,
    offeredBy?: LearningResourcesUpcomingListOfferedByEnum,
    offset?: number,
    platform?: LearningResourcesUpcomingListPlatformEnum,
    professional?: boolean,
    resourceType?: LearningResourcesUpcomingListResourceTypeEnum,
    sortby?: LearningResourcesUpcomingListSortbyEnum,
    options?: AxiosRequestConfig
  ) {
    return LearningResourcesApiFp(this.configuration)
      .learningResourcesUpcomingList(
        department,
        limit,
        offeredBy,
        offset,
        platform,
        professional,
        resourceType,
        sortby,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }
}

/**
 * @export
 */
export const LearningResourcesListDepartmentEnum = {
  _1: "1",
  _10: "10",
  _11: "11",
  _12: "12",
  _14: "14",
  _15: "15",
  _16: "16",
  _17: "17",
  _18: "18",
  _2: "2",
  _20: "20",
  _21A: "21A",
  _21G: "21G",
  _21H: "21H",
  _21L: "21L",
  _21M: "21M",
  _22: "22",
  _24: "24",
  _3: "3",
  _4: "4",
  _5: "5",
  _6: "6",
  _7: "7",
  _8: "8",
  _9: "9",
  Cc: "CC",
  CmsW: "CMS-W",
  Ec: "EC",
  Es: "ES",
  Esd: "ESD",
  Hst: "HST",
  Ids: "IDS",
  Mas: "MAS",
  Pe: "PE",
  Res: "RES",
  Sts: "STS",
  Wgs: "WGS"
} as const
export type LearningResourcesListDepartmentEnum =
  typeof LearningResourcesListDepartmentEnum[keyof typeof LearningResourcesListDepartmentEnum]
/**
 * @export
 */
export const LearningResourcesListOfferedByEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Mitpe: "mitpe",
  Mitx: "mitx",
  Ocw: "ocw",
  Scc: "scc",
  See: "see",
  Xpro: "xpro"
} as const
export type LearningResourcesListOfferedByEnum =
  typeof LearningResourcesListOfferedByEnum[keyof typeof LearningResourcesListOfferedByEnum]
/**
 * @export
 */
export const LearningResourcesListPlatformEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Edx: "edx",
  Emeritus: "emeritus",
  Globalalumni: "globalalumni",
  Mitpe: "mitpe",
  Mitxonline: "mitxonline",
  Ocw: "ocw",
  Oll: "oll",
  Podcast: "podcast",
  Scc: "scc",
  See: "see",
  Simplilearn: "simplilearn",
  Susskind: "susskind",
  Whu: "whu",
  Xpro: "xpro"
} as const
export type LearningResourcesListPlatformEnum =
  typeof LearningResourcesListPlatformEnum[keyof typeof LearningResourcesListPlatformEnum]
/**
 * @export
 */
export const LearningResourcesListResourceTypeEnum = {
  Course: "course",
  LearningPath: "learning_path",
  Podcast: "podcast",
  PodcastEpisode: "podcast_episode",
  Program: "program"
} as const
export type LearningResourcesListResourceTypeEnum =
  typeof LearningResourcesListResourceTypeEnum[keyof typeof LearningResourcesListResourceTypeEnum]
/**
 * @export
 */
export const LearningResourcesListSortbyEnum = {
  CreatedOn: "-created_on",
  Id: "-id",
  LastModified: "-last_modified",
  Mitcoursenumber: "-mitcoursenumber",
  ReadableId: "-readable_id",
  StartDate: "-start_date",
  CreatedOn2: "created_on",
  Id2: "id",
  LastModified2: "last_modified",
  Mitcoursenumber2: "mitcoursenumber",
  ReadableId2: "readable_id",
  StartDate2: "start_date"
} as const
export type LearningResourcesListSortbyEnum =
  typeof LearningResourcesListSortbyEnum[keyof typeof LearningResourcesListSortbyEnum]
/**
 * @export
 */
export const LearningResourcesNewListDepartmentEnum = {
  _1: "1",
  _10: "10",
  _11: "11",
  _12: "12",
  _14: "14",
  _15: "15",
  _16: "16",
  _17: "17",
  _18: "18",
  _2: "2",
  _20: "20",
  _21A: "21A",
  _21G: "21G",
  _21H: "21H",
  _21L: "21L",
  _21M: "21M",
  _22: "22",
  _24: "24",
  _3: "3",
  _4: "4",
  _5: "5",
  _6: "6",
  _7: "7",
  _8: "8",
  _9: "9",
  Cc: "CC",
  CmsW: "CMS-W",
  Ec: "EC",
  Es: "ES",
  Esd: "ESD",
  Hst: "HST",
  Ids: "IDS",
  Mas: "MAS",
  Pe: "PE",
  Res: "RES",
  Sts: "STS",
  Wgs: "WGS"
} as const
export type LearningResourcesNewListDepartmentEnum =
  typeof LearningResourcesNewListDepartmentEnum[keyof typeof LearningResourcesNewListDepartmentEnum]
/**
 * @export
 */
export const LearningResourcesNewListOfferedByEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Mitpe: "mitpe",
  Mitx: "mitx",
  Ocw: "ocw",
  Scc: "scc",
  See: "see",
  Xpro: "xpro"
} as const
export type LearningResourcesNewListOfferedByEnum =
  typeof LearningResourcesNewListOfferedByEnum[keyof typeof LearningResourcesNewListOfferedByEnum]
/**
 * @export
 */
export const LearningResourcesNewListPlatformEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Edx: "edx",
  Emeritus: "emeritus",
  Globalalumni: "globalalumni",
  Mitpe: "mitpe",
  Mitxonline: "mitxonline",
  Ocw: "ocw",
  Oll: "oll",
  Podcast: "podcast",
  Scc: "scc",
  See: "see",
  Simplilearn: "simplilearn",
  Susskind: "susskind",
  Whu: "whu",
  Xpro: "xpro"
} as const
export type LearningResourcesNewListPlatformEnum =
  typeof LearningResourcesNewListPlatformEnum[keyof typeof LearningResourcesNewListPlatformEnum]
/**
 * @export
 */
export const LearningResourcesNewListResourceTypeEnum = {
  Course: "course",
  LearningPath: "learning_path",
  Podcast: "podcast",
  PodcastEpisode: "podcast_episode",
  Program: "program"
} as const
export type LearningResourcesNewListResourceTypeEnum =
  typeof LearningResourcesNewListResourceTypeEnum[keyof typeof LearningResourcesNewListResourceTypeEnum]
/**
 * @export
 */
export const LearningResourcesNewListSortbyEnum = {
  CreatedOn: "-created_on",
  Id: "-id",
  LastModified: "-last_modified",
  Mitcoursenumber: "-mitcoursenumber",
  ReadableId: "-readable_id",
  StartDate: "-start_date",
  CreatedOn2: "created_on",
  Id2: "id",
  LastModified2: "last_modified",
  Mitcoursenumber2: "mitcoursenumber",
  ReadableId2: "readable_id",
  StartDate2: "start_date"
} as const
export type LearningResourcesNewListSortbyEnum =
  typeof LearningResourcesNewListSortbyEnum[keyof typeof LearningResourcesNewListSortbyEnum]
/**
 * @export
 */
export const LearningResourcesUpcomingListDepartmentEnum = {
  _1: "1",
  _10: "10",
  _11: "11",
  _12: "12",
  _14: "14",
  _15: "15",
  _16: "16",
  _17: "17",
  _18: "18",
  _2: "2",
  _20: "20",
  _21A: "21A",
  _21G: "21G",
  _21H: "21H",
  _21L: "21L",
  _21M: "21M",
  _22: "22",
  _24: "24",
  _3: "3",
  _4: "4",
  _5: "5",
  _6: "6",
  _7: "7",
  _8: "8",
  _9: "9",
  Cc: "CC",
  CmsW: "CMS-W",
  Ec: "EC",
  Es: "ES",
  Esd: "ESD",
  Hst: "HST",
  Ids: "IDS",
  Mas: "MAS",
  Pe: "PE",
  Res: "RES",
  Sts: "STS",
  Wgs: "WGS"
} as const
export type LearningResourcesUpcomingListDepartmentEnum =
  typeof LearningResourcesUpcomingListDepartmentEnum[keyof typeof LearningResourcesUpcomingListDepartmentEnum]
/**
 * @export
 */
export const LearningResourcesUpcomingListOfferedByEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Mitpe: "mitpe",
  Mitx: "mitx",
  Ocw: "ocw",
  Scc: "scc",
  See: "see",
  Xpro: "xpro"
} as const
export type LearningResourcesUpcomingListOfferedByEnum =
  typeof LearningResourcesUpcomingListOfferedByEnum[keyof typeof LearningResourcesUpcomingListOfferedByEnum]
/**
 * @export
 */
export const LearningResourcesUpcomingListPlatformEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Edx: "edx",
  Emeritus: "emeritus",
  Globalalumni: "globalalumni",
  Mitpe: "mitpe",
  Mitxonline: "mitxonline",
  Ocw: "ocw",
  Oll: "oll",
  Podcast: "podcast",
  Scc: "scc",
  See: "see",
  Simplilearn: "simplilearn",
  Susskind: "susskind",
  Whu: "whu",
  Xpro: "xpro"
} as const
export type LearningResourcesUpcomingListPlatformEnum =
  typeof LearningResourcesUpcomingListPlatformEnum[keyof typeof LearningResourcesUpcomingListPlatformEnum]
/**
 * @export
 */
export const LearningResourcesUpcomingListResourceTypeEnum = {
  Course: "course",
  LearningPath: "learning_path",
  Podcast: "podcast",
  PodcastEpisode: "podcast_episode",
  Program: "program"
} as const
export type LearningResourcesUpcomingListResourceTypeEnum =
  typeof LearningResourcesUpcomingListResourceTypeEnum[keyof typeof LearningResourcesUpcomingListResourceTypeEnum]
/**
 * @export
 */
export const LearningResourcesUpcomingListSortbyEnum = {
  CreatedOn: "-created_on",
  Id: "-id",
  LastModified: "-last_modified",
  Mitcoursenumber: "-mitcoursenumber",
  ReadableId: "-readable_id",
  StartDate: "-start_date",
  CreatedOn2: "created_on",
  Id2: "id",
  LastModified2: "last_modified",
  Mitcoursenumber2: "mitcoursenumber",
  ReadableId2: "readable_id",
  StartDate2: "start_date"
} as const
export type LearningResourcesUpcomingListSortbyEnum =
  typeof LearningResourcesUpcomingListSortbyEnum[keyof typeof LearningResourcesUpcomingListSortbyEnum]

/**
 * LearningResourcesSearchApi - axios parameter creator
 * @export
 */
export const LearningResourcesSearchApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * View for executing searches of learning resources
     * @param {Array<LearningResourcesSearchRetrieveAggregationsEnum>} [aggregations]
     * @param {Array<string>} [certification]
     * @param {Array<string>} [department]
     * @param {Array<number>} [id]
     * @param {Array<string>} [level]
     * @param {number} [limit]
     * @param {Array<LearningResourcesSearchRetrieveOfferedByEnum>} [offeredBy]
     * @param {number} [offset]
     * @param {Array<LearningResourcesSearchRetrievePlatformEnum>} [platform]
     * @param {Array<LearningResourcesSearchRetrieveProfessionalEnum>} [professional]
     * @param {string} [q] The search text
     * @param {Array<string>} [resourceContentTags]
     * @param {Array<LearningResourcesSearchRetrieveResourceTypeEnum>} [resourceType]
     * @param {LearningResourcesSearchRetrieveSortbyEnum} [sortby] if the parameter starts with \&#39;-\&#39; the sort is in descending order  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {Array<string>} [topic]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesSearchRetrieve: async (
      aggregations?: Array<LearningResourcesSearchRetrieveAggregationsEnum>,
      certification?: Array<string>,
      department?: Array<string>,
      id?: Array<number>,
      level?: Array<string>,
      limit?: number,
      offeredBy?: Array<LearningResourcesSearchRetrieveOfferedByEnum>,
      offset?: number,
      platform?: Array<LearningResourcesSearchRetrievePlatformEnum>,
      professional?: Array<LearningResourcesSearchRetrieveProfessionalEnum>,
      q?: string,
      resourceContentTags?: Array<string>,
      resourceType?: Array<LearningResourcesSearchRetrieveResourceTypeEnum>,
      sortby?: LearningResourcesSearchRetrieveSortbyEnum,
      topic?: Array<string>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/learning_resources_search/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (aggregations) {
        localVarQueryParameter["aggregations"] = aggregations
      }

      if (certification) {
        localVarQueryParameter["certification"] = certification
      }

      if (department) {
        localVarQueryParameter["department"] = department
      }

      if (id) {
        localVarQueryParameter["id"] = id
      }

      if (level) {
        localVarQueryParameter["level"] = level
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offeredBy) {
        localVarQueryParameter["offered_by"] = offeredBy
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (platform) {
        localVarQueryParameter["platform"] = platform
      }

      if (professional) {
        localVarQueryParameter["professional"] = professional
      }

      if (q !== undefined) {
        localVarQueryParameter["q"] = q
      }

      if (resourceContentTags) {
        localVarQueryParameter["resource_content_tags"] = resourceContentTags
      }

      if (resourceType) {
        localVarQueryParameter["resource_type"] = resourceType
      }

      if (sortby !== undefined) {
        localVarQueryParameter["sortby"] = sortby
      }

      if (topic) {
        localVarQueryParameter["topic"] = topic
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * LearningResourcesSearchApi - functional programming interface
 * @export
 */
export const LearningResourcesSearchApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator =
    LearningResourcesSearchApiAxiosParamCreator(configuration)
  return {
    /**
     * View for executing searches of learning resources
     * @param {Array<LearningResourcesSearchRetrieveAggregationsEnum>} [aggregations]
     * @param {Array<string>} [certification]
     * @param {Array<string>} [department]
     * @param {Array<number>} [id]
     * @param {Array<string>} [level]
     * @param {number} [limit]
     * @param {Array<LearningResourcesSearchRetrieveOfferedByEnum>} [offeredBy]
     * @param {number} [offset]
     * @param {Array<LearningResourcesSearchRetrievePlatformEnum>} [platform]
     * @param {Array<LearningResourcesSearchRetrieveProfessionalEnum>} [professional]
     * @param {string} [q] The search text
     * @param {Array<string>} [resourceContentTags]
     * @param {Array<LearningResourcesSearchRetrieveResourceTypeEnum>} [resourceType]
     * @param {LearningResourcesSearchRetrieveSortbyEnum} [sortby] if the parameter starts with \&#39;-\&#39; the sort is in descending order  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {Array<string>} [topic]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningResourcesSearchRetrieve(
      aggregations?: Array<LearningResourcesSearchRetrieveAggregationsEnum>,
      certification?: Array<string>,
      department?: Array<string>,
      id?: Array<number>,
      level?: Array<string>,
      limit?: number,
      offeredBy?: Array<LearningResourcesSearchRetrieveOfferedByEnum>,
      offset?: number,
      platform?: Array<LearningResourcesSearchRetrievePlatformEnum>,
      professional?: Array<LearningResourcesSearchRetrieveProfessionalEnum>,
      q?: string,
      resourceContentTags?: Array<string>,
      resourceType?: Array<LearningResourcesSearchRetrieveResourceTypeEnum>,
      sortby?: LearningResourcesSearchRetrieveSortbyEnum,
      topic?: Array<string>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningResourcesSearchRetrieve(
          aggregations,
          certification,
          department,
          id,
          level,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          q,
          resourceContentTags,
          resourceType,
          sortby,
          topic,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap[
          "LearningResourcesSearchApi.learningResourcesSearchRetrieve"
        ]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    }
  }
}

/**
 * LearningResourcesSearchApi - factory interface
 * @export
 */
export const LearningResourcesSearchApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = LearningResourcesSearchApiFp(configuration)
  return {
    /**
     * View for executing searches of learning resources
     * @param {Array<LearningResourcesSearchRetrieveAggregationsEnum>} [aggregations]
     * @param {Array<string>} [certification]
     * @param {Array<string>} [department]
     * @param {Array<number>} [id]
     * @param {Array<string>} [level]
     * @param {number} [limit]
     * @param {Array<LearningResourcesSearchRetrieveOfferedByEnum>} [offeredBy]
     * @param {number} [offset]
     * @param {Array<LearningResourcesSearchRetrievePlatformEnum>} [platform]
     * @param {Array<LearningResourcesSearchRetrieveProfessionalEnum>} [professional]
     * @param {string} [q] The search text
     * @param {Array<string>} [resourceContentTags]
     * @param {Array<LearningResourcesSearchRetrieveResourceTypeEnum>} [resourceType]
     * @param {LearningResourcesSearchRetrieveSortbyEnum} [sortby] if the parameter starts with \&#39;-\&#39; the sort is in descending order  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {Array<string>} [topic]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningResourcesSearchRetrieve(
      aggregations?: Array<LearningResourcesSearchRetrieveAggregationsEnum>,
      certification?: Array<string>,
      department?: Array<string>,
      id?: Array<number>,
      level?: Array<string>,
      limit?: number,
      offeredBy?: Array<LearningResourcesSearchRetrieveOfferedByEnum>,
      offset?: number,
      platform?: Array<LearningResourcesSearchRetrievePlatformEnum>,
      professional?: Array<LearningResourcesSearchRetrieveProfessionalEnum>,
      q?: string,
      resourceContentTags?: Array<string>,
      resourceType?: Array<LearningResourcesSearchRetrieveResourceTypeEnum>,
      sortby?: LearningResourcesSearchRetrieveSortbyEnum,
      topic?: Array<string>,
      options?: any
    ): AxiosPromise<SearchResponse> {
      return localVarFp
        .learningResourcesSearchRetrieve(
          aggregations,
          certification,
          department,
          id,
          level,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          q,
          resourceContentTags,
          resourceType,
          sortby,
          topic,
          options
        )
        .then(request => request(axios, basePath))
    }
  }
}

/**
 * LearningResourcesSearchApi - object-oriented interface
 * @export
 * @class LearningResourcesSearchApi
 * @extends {BaseAPI}
 */
export class LearningResourcesSearchApi extends BaseAPI {
  /**
   * View for executing searches of learning resources
   * @param {Array<LearningResourcesSearchRetrieveAggregationsEnum>} [aggregations]
   * @param {Array<string>} [certification]
   * @param {Array<string>} [department]
   * @param {Array<number>} [id]
   * @param {Array<string>} [level]
   * @param {number} [limit]
   * @param {Array<LearningResourcesSearchRetrieveOfferedByEnum>} [offeredBy]
   * @param {number} [offset]
   * @param {Array<LearningResourcesSearchRetrievePlatformEnum>} [platform]
   * @param {Array<LearningResourcesSearchRetrieveProfessionalEnum>} [professional]
   * @param {string} [q] The search text
   * @param {Array<string>} [resourceContentTags]
   * @param {Array<LearningResourcesSearchRetrieveResourceTypeEnum>} [resourceType]
   * @param {LearningResourcesSearchRetrieveSortbyEnum} [sortby] if the parameter starts with \&#39;-\&#39; the sort is in descending order  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
   * @param {Array<string>} [topic]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningResourcesSearchApi
   */
  public learningResourcesSearchRetrieve(
    aggregations?: Array<LearningResourcesSearchRetrieveAggregationsEnum>,
    certification?: Array<string>,
    department?: Array<string>,
    id?: Array<number>,
    level?: Array<string>,
    limit?: number,
    offeredBy?: Array<LearningResourcesSearchRetrieveOfferedByEnum>,
    offset?: number,
    platform?: Array<LearningResourcesSearchRetrievePlatformEnum>,
    professional?: Array<LearningResourcesSearchRetrieveProfessionalEnum>,
    q?: string,
    resourceContentTags?: Array<string>,
    resourceType?: Array<LearningResourcesSearchRetrieveResourceTypeEnum>,
    sortby?: LearningResourcesSearchRetrieveSortbyEnum,
    topic?: Array<string>,
    options?: AxiosRequestConfig
  ) {
    return LearningResourcesSearchApiFp(this.configuration)
      .learningResourcesSearchRetrieve(
        aggregations,
        certification,
        department,
        id,
        level,
        limit,
        offeredBy,
        offset,
        platform,
        professional,
        q,
        resourceContentTags,
        resourceType,
        sortby,
        topic,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }
}

/**
 * @export
 */
export const LearningResourcesSearchRetrieveAggregationsEnum = {
  ResourceType: "resource_type",
  Certification: "certification",
  OfferedBy: "offered_by",
  Platform: "platform",
  Topic: "topic",
  Department: "department",
  Level: "level",
  ResourceContentTags: "resource_content_tags",
  Professional: "professional"
} as const
export type LearningResourcesSearchRetrieveAggregationsEnum =
  typeof LearningResourcesSearchRetrieveAggregationsEnum[keyof typeof LearningResourcesSearchRetrieveAggregationsEnum]
/**
 * @export
 */
export const LearningResourcesSearchRetrieveOfferedByEnum = {
  Mitx: "mitx",
  Ocw: "ocw",
  Bootcamps: "bootcamps",
  Xpro: "xpro",
  Csail: "csail",
  ProfessionalEducation: "professional education",
  SloanExecutiveEducation: "sloan executive education",
  SchwarzmanCollegeOfComputing: "schwarzman college of computing",
  CenterForTransportationLogistics: "center for transportation & logistics"
} as const
export type LearningResourcesSearchRetrieveOfferedByEnum =
  typeof LearningResourcesSearchRetrieveOfferedByEnum[keyof typeof LearningResourcesSearchRetrieveOfferedByEnum]
/**
 * @export
 */
export const LearningResourcesSearchRetrievePlatformEnum = {
  Edx: "edx",
  Ocw: "ocw",
  OpenLearningLibrary: "open learning library",
  MitxOnline: "mitx online",
  Bootcamps: "bootcamps",
  Xpro: "xpro",
  Csail: "csail",
  ProfessionalEducation: "professional education",
  SloanExecutiveEducation: "sloan executive education",
  SchwarzmanCollegeOfComputing: "schwarzman college of computing",
  CenterForTransportationLogistics: "center for transportation & logistics",
  Whu: "whu",
  Susskind: "susskind",
  GlobalAlumni: "global alumni",
  Simplilearn: "simplilearn",
  Emeritus: "emeritus",
  Podcast: "podcast"
} as const
export type LearningResourcesSearchRetrievePlatformEnum =
  typeof LearningResourcesSearchRetrievePlatformEnum[keyof typeof LearningResourcesSearchRetrievePlatformEnum]
/**
 * @export
 */
export const LearningResourcesSearchRetrieveProfessionalEnum = {
  True: "true",
  False: "false"
} as const
export type LearningResourcesSearchRetrieveProfessionalEnum =
  typeof LearningResourcesSearchRetrieveProfessionalEnum[keyof typeof LearningResourcesSearchRetrieveProfessionalEnum]
/**
 * @export
 */
export const LearningResourcesSearchRetrieveResourceTypeEnum = {
  Course: "course",
  Program: "program",
  LearningPath: "learning path",
  Podcast: "podcast",
  PodcastEpisode: "podcast episode"
} as const
export type LearningResourcesSearchRetrieveResourceTypeEnum =
  typeof LearningResourcesSearchRetrieveResourceTypeEnum[keyof typeof LearningResourcesSearchRetrieveResourceTypeEnum]
/**
 * @export
 */
export const LearningResourcesSearchRetrieveSortbyEnum = {
  Id: "id",
  Id2: "-id",
  ReadableId: "readable_id",
  ReadableId2: "-readable_id",
  LastModified: "last_modified",
  LastModified2: "-last_modified",
  CreatedOn: "created_on",
  CreatedOn2: "-created_on",
  StartDate: "start_date",
  StartDate2: "-start_date",
  Mitcoursenumber: "mitcoursenumber",
  Mitcoursenumber2: "-mitcoursenumber"
} as const
export type LearningResourcesSearchRetrieveSortbyEnum =
  typeof LearningResourcesSearchRetrieveSortbyEnum[keyof typeof LearningResourcesSearchRetrieveSortbyEnum]

/**
 * LearningpathsApi - axios parameter creator
 * @export
 */
export const LearningpathsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Viewset for LearningPaths
     * @param {LearningPathResourceRequest} learningPathResourceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsCreate: async (
      learningPathResourceRequest: LearningPathResourceRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'learningPathResourceRequest' is not null or undefined
      assertParamExists(
        "learningpathsCreate",
        "learningPathResourceRequest",
        learningPathResourceRequest
      )
      const localVarPath = `/api/v1/learningpaths/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        learningPathResourceRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPaths
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsDestroy: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningpathsDestroy", "id", id)
      const localVarPath = `/api/v1/learningpaths/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {LearningpathsListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {LearningpathsListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {LearningpathsListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {LearningpathsListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {LearningpathsListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsList: async (
      department?: LearningpathsListDepartmentEnum,
      limit?: number,
      offeredBy?: LearningpathsListOfferedByEnum,
      offset?: number,
      platform?: LearningpathsListPlatformEnum,
      professional?: boolean,
      resourceType?: LearningpathsListResourceTypeEnum,
      sortby?: LearningpathsListSortbyEnum,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/learningpaths/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (department !== undefined) {
        localVarQueryParameter["department"] = department
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offeredBy !== undefined) {
        localVarQueryParameter["offered_by"] = offeredBy
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (platform !== undefined) {
        localVarQueryParameter["platform"] = platform
      }

      if (professional !== undefined) {
        localVarQueryParameter["professional"] = professional
      }

      if (resourceType !== undefined) {
        localVarQueryParameter["resource_type"] = resourceType
      }

      if (sortby !== undefined) {
        localVarQueryParameter["sortby"] = sortby
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {LearningpathsNewListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {LearningpathsNewListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {LearningpathsNewListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {LearningpathsNewListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {LearningpathsNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsNewList: async (
      department?: LearningpathsNewListDepartmentEnum,
      limit?: number,
      offeredBy?: LearningpathsNewListOfferedByEnum,
      offset?: number,
      platform?: LearningpathsNewListPlatformEnum,
      professional?: boolean,
      resourceType?: LearningpathsNewListResourceTypeEnum,
      sortby?: LearningpathsNewListSortbyEnum,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/learningpaths/new/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (department !== undefined) {
        localVarQueryParameter["department"] = department
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offeredBy !== undefined) {
        localVarQueryParameter["offered_by"] = offeredBy
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (platform !== undefined) {
        localVarQueryParameter["platform"] = platform
      }

      if (professional !== undefined) {
        localVarQueryParameter["professional"] = professional
      }

      if (resourceType !== undefined) {
        localVarQueryParameter["resource_type"] = resourceType
      }

      if (sortby !== undefined) {
        localVarQueryParameter["sortby"] = sortby
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPaths
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {PatchedLearningPathResourceRequest} [patchedLearningPathResourceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsPartialUpdate: async (
      id: number,
      patchedLearningPathResourceRequest?: PatchedLearningPathResourceRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningpathsPartialUpdate", "id", id)
      const localVarPath = `/api/v1/learningpaths/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchedLearningPathResourceRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} parentId
     * @param {LearningPathRelationshipRequest} learningPathRelationshipRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesCreate: async (
      parentId: number,
      learningPathRelationshipRequest: LearningPathRelationshipRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("learningpathsResourcesCreate", "parentId", parentId)
      // verify required parameter 'learningPathRelationshipRequest' is not null or undefined
      assertParamExists(
        "learningpathsResourcesCreate",
        "learningPathRelationshipRequest",
        learningPathRelationshipRequest
      )
      const localVarPath =
        `/api/v1/learningpaths/{parent_id}/resources/`.replace(
          `{${"parent_id"}}`,
          encodeURIComponent(String(parentId))
        )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        learningPathRelationshipRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesDestroy: async (
      id: number,
      parentId: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningpathsResourcesDestroy", "id", id)
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("learningpathsResourcesDestroy", "parentId", parentId)
      const localVarPath = `/api/v1/learningpaths/{parent_id}/resources/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} parentId
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [sortby] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesList: async (
      parentId: number,
      limit?: number,
      offset?: number,
      sortby?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("learningpathsResourcesList", "parentId", parentId)
      const localVarPath =
        `/api/v1/learningpaths/{parent_id}/resources/`.replace(
          `{${"parent_id"}}`,
          encodeURIComponent(String(parentId))
        )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (sortby !== undefined) {
        localVarQueryParameter["sortby"] = sortby
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {PatchedLearningPathRelationshipRequest} [patchedLearningPathRelationshipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesPartialUpdate: async (
      id: number,
      parentId: number,
      patchedLearningPathRelationshipRequest?: PatchedLearningPathRelationshipRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningpathsResourcesPartialUpdate", "id", id)
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists(
        "learningpathsResourcesPartialUpdate",
        "parentId",
        parentId
      )
      const localVarPath = `/api/v1/learningpaths/{parent_id}/resources/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchedLearningPathRelationshipRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesRetrieve: async (
      id: number,
      parentId: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningpathsResourcesRetrieve", "id", id)
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("learningpathsResourcesRetrieve", "parentId", parentId)
      const localVarPath = `/api/v1/learningpaths/{parent_id}/resources/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {LearningPathRelationshipRequest} learningPathRelationshipRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesUpdate: async (
      id: number,
      parentId: number,
      learningPathRelationshipRequest: LearningPathRelationshipRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningpathsResourcesUpdate", "id", id)
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("learningpathsResourcesUpdate", "parentId", parentId)
      // verify required parameter 'learningPathRelationshipRequest' is not null or undefined
      assertParamExists(
        "learningpathsResourcesUpdate",
        "learningPathRelationshipRequest",
        learningPathRelationshipRequest
      )
      const localVarPath = `/api/v1/learningpaths/{parent_id}/resources/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        learningPathRelationshipRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningpathsRetrieve", "id", id)
      const localVarPath = `/api/v1/learningpaths/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {LearningpathsUpcomingListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {LearningpathsUpcomingListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {LearningpathsUpcomingListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {LearningpathsUpcomingListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {LearningpathsUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsUpcomingList: async (
      department?: LearningpathsUpcomingListDepartmentEnum,
      limit?: number,
      offeredBy?: LearningpathsUpcomingListOfferedByEnum,
      offset?: number,
      platform?: LearningpathsUpcomingListPlatformEnum,
      professional?: boolean,
      resourceType?: LearningpathsUpcomingListResourceTypeEnum,
      sortby?: LearningpathsUpcomingListSortbyEnum,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/learningpaths/upcoming/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (department !== undefined) {
        localVarQueryParameter["department"] = department
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offeredBy !== undefined) {
        localVarQueryParameter["offered_by"] = offeredBy
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (platform !== undefined) {
        localVarQueryParameter["platform"] = platform
      }

      if (professional !== undefined) {
        localVarQueryParameter["professional"] = professional
      }

      if (resourceType !== undefined) {
        localVarQueryParameter["resource_type"] = resourceType
      }

      if (sortby !== undefined) {
        localVarQueryParameter["sortby"] = sortby
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningPaths
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {LearningPathResourceRequest} learningPathResourceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsUpdate: async (
      id: number,
      learningPathResourceRequest: LearningPathResourceRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("learningpathsUpdate", "id", id)
      // verify required parameter 'learningPathResourceRequest' is not null or undefined
      assertParamExists(
        "learningpathsUpdate",
        "learningPathResourceRequest",
        learningPathResourceRequest
      )
      const localVarPath = `/api/v1/learningpaths/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        learningPathResourceRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * LearningpathsApi - functional programming interface
 * @export
 */
export const LearningpathsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    LearningpathsApiAxiosParamCreator(configuration)
  return {
    /**
     * Viewset for LearningPaths
     * @param {LearningPathResourceRequest} learningPathResourceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsCreate(
      learningPathResourceRequest: LearningPathResourceRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningPathResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsCreate(
          learningPathResourceRequest,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["LearningpathsApi.learningpathsCreate"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for LearningPaths
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsDestroy(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsDestroy(id, options)
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["LearningpathsApi.learningpathsDestroy"]?.[index]
          ?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {LearningpathsListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {LearningpathsListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {LearningpathsListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {LearningpathsListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {LearningpathsListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsList(
      department?: LearningpathsListDepartmentEnum,
      limit?: number,
      offeredBy?: LearningpathsListOfferedByEnum,
      offset?: number,
      platform?: LearningpathsListPlatformEnum,
      professional?: boolean,
      resourceType?: LearningpathsListResourceTypeEnum,
      sortby?: LearningpathsListSortbyEnum,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningPathResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["LearningpathsApi.learningpathsList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {LearningpathsNewListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {LearningpathsNewListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {LearningpathsNewListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {LearningpathsNewListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {LearningpathsNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsNewList(
      department?: LearningpathsNewListDepartmentEnum,
      limit?: number,
      offeredBy?: LearningpathsNewListOfferedByEnum,
      offset?: number,
      platform?: LearningpathsNewListPlatformEnum,
      professional?: boolean,
      resourceType?: LearningpathsNewListResourceTypeEnum,
      sortby?: LearningpathsNewListSortbyEnum,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsNewList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["LearningpathsApi.learningpathsNewList"]?.[index]
          ?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for LearningPaths
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {PatchedLearningPathResourceRequest} [patchedLearningPathResourceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsPartialUpdate(
      id: number,
      patchedLearningPathResourceRequest?: PatchedLearningPathResourceRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningPathResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsPartialUpdate(
          id,
          patchedLearningPathResourceRequest,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["LearningpathsApi.learningpathsPartialUpdate"]?.[
          index
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} parentId
     * @param {LearningPathRelationshipRequest} learningPathRelationshipRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsResourcesCreate(
      parentId: number,
      learningPathRelationshipRequest: LearningPathRelationshipRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningPathRelationship>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsResourcesCreate(
          parentId,
          learningPathRelationshipRequest,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["LearningpathsApi.learningpathsResourcesCreate"]?.[
          index
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsResourcesDestroy(
      id: number,
      parentId: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsResourcesDestroy(
          id,
          parentId,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["LearningpathsApi.learningpathsResourcesDestroy"]?.[
          index
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} parentId
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [sortby] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsResourcesList(
      parentId: number,
      limit?: number,
      offset?: number,
      sortby?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningPathRelationshipList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsResourcesList(
          parentId,
          limit,
          offset,
          sortby,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["LearningpathsApi.learningpathsResourcesList"]?.[
          index
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {PatchedLearningPathRelationshipRequest} [patchedLearningPathRelationshipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsResourcesPartialUpdate(
      id: number,
      parentId: number,
      patchedLearningPathRelationshipRequest?: PatchedLearningPathRelationshipRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningPathRelationship>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsResourcesPartialUpdate(
          id,
          parentId,
          patchedLearningPathRelationshipRequest,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap[
          "LearningpathsApi.learningpathsResourcesPartialUpdate"
        ]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsResourcesRetrieve(
      id: number,
      parentId: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningPathRelationship>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsResourcesRetrieve(
          id,
          parentId,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["LearningpathsApi.learningpathsResourcesRetrieve"]?.[
          index
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {LearningPathRelationshipRequest} learningPathRelationshipRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsResourcesUpdate(
      id: number,
      parentId: number,
      learningPathRelationshipRequest: LearningPathRelationshipRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningPathRelationship>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsResourcesUpdate(
          id,
          parentId,
          learningPathRelationshipRequest,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["LearningpathsApi.learningpathsResourcesUpdate"]?.[
          index
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsRetrieve(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningPathResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsRetrieve(id, options)
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["LearningpathsApi.learningpathsRetrieve"]?.[index]
          ?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {LearningpathsUpcomingListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {LearningpathsUpcomingListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {LearningpathsUpcomingListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {LearningpathsUpcomingListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {LearningpathsUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsUpcomingList(
      department?: LearningpathsUpcomingListDepartmentEnum,
      limit?: number,
      offeredBy?: LearningpathsUpcomingListOfferedByEnum,
      offset?: number,
      platform?: LearningpathsUpcomingListPlatformEnum,
      professional?: boolean,
      resourceType?: LearningpathsUpcomingListResourceTypeEnum,
      sortby?: LearningpathsUpcomingListSortbyEnum,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsUpcomingList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["LearningpathsApi.learningpathsUpcomingList"]?.[
          index
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for LearningPaths
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {LearningPathResourceRequest} learningPathResourceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async learningpathsUpdate(
      id: number,
      learningPathResourceRequest: LearningPathResourceRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningPathResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.learningpathsUpdate(
          id,
          learningPathResourceRequest,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["LearningpathsApi.learningpathsUpdate"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    }
  }
}

/**
 * LearningpathsApi - factory interface
 * @export
 */
export const LearningpathsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = LearningpathsApiFp(configuration)
  return {
    /**
     * Viewset for LearningPaths
     * @param {LearningPathResourceRequest} learningPathResourceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsCreate(
      learningPathResourceRequest: LearningPathResourceRequest,
      options?: any
    ): AxiosPromise<LearningPathResource> {
      return localVarFp
        .learningpathsCreate(learningPathResourceRequest, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPaths
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsDestroy(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .learningpathsDestroy(id, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {LearningpathsListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {LearningpathsListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {LearningpathsListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {LearningpathsListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {LearningpathsListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsList(
      department?: LearningpathsListDepartmentEnum,
      limit?: number,
      offeredBy?: LearningpathsListOfferedByEnum,
      offset?: number,
      platform?: LearningpathsListPlatformEnum,
      professional?: boolean,
      resourceType?: LearningpathsListResourceTypeEnum,
      sortby?: LearningpathsListSortbyEnum,
      options?: any
    ): AxiosPromise<PaginatedLearningPathResourceList> {
      return localVarFp
        .learningpathsList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {LearningpathsNewListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {LearningpathsNewListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {LearningpathsNewListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {LearningpathsNewListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {LearningpathsNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsNewList(
      department?: LearningpathsNewListDepartmentEnum,
      limit?: number,
      offeredBy?: LearningpathsNewListOfferedByEnum,
      offset?: number,
      platform?: LearningpathsNewListPlatformEnum,
      professional?: boolean,
      resourceType?: LearningpathsNewListResourceTypeEnum,
      sortby?: LearningpathsNewListSortbyEnum,
      options?: any
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .learningpathsNewList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPaths
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {PatchedLearningPathResourceRequest} [patchedLearningPathResourceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsPartialUpdate(
      id: number,
      patchedLearningPathResourceRequest?: PatchedLearningPathResourceRequest,
      options?: any
    ): AxiosPromise<LearningPathResource> {
      return localVarFp
        .learningpathsPartialUpdate(
          id,
          patchedLearningPathResourceRequest,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} parentId
     * @param {LearningPathRelationshipRequest} learningPathRelationshipRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesCreate(
      parentId: number,
      learningPathRelationshipRequest: LearningPathRelationshipRequest,
      options?: any
    ): AxiosPromise<LearningPathRelationship> {
      return localVarFp
        .learningpathsResourcesCreate(
          parentId,
          learningPathRelationshipRequest,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesDestroy(
      id: number,
      parentId: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .learningpathsResourcesDestroy(id, parentId, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} parentId
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [sortby] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesList(
      parentId: number,
      limit?: number,
      offset?: number,
      sortby?: string,
      options?: any
    ): AxiosPromise<PaginatedLearningPathRelationshipList> {
      return localVarFp
        .learningpathsResourcesList(parentId, limit, offset, sortby, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {PatchedLearningPathRelationshipRequest} [patchedLearningPathRelationshipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesPartialUpdate(
      id: number,
      parentId: number,
      patchedLearningPathRelationshipRequest?: PatchedLearningPathRelationshipRequest,
      options?: any
    ): AxiosPromise<LearningPathRelationship> {
      return localVarFp
        .learningpathsResourcesPartialUpdate(
          id,
          parentId,
          patchedLearningPathRelationshipRequest,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesRetrieve(
      id: number,
      parentId: number,
      options?: any
    ): AxiosPromise<LearningPathRelationship> {
      return localVarFp
        .learningpathsResourcesRetrieve(id, parentId, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPath related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {LearningPathRelationshipRequest} learningPathRelationshipRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsResourcesUpdate(
      id: number,
      parentId: number,
      learningPathRelationshipRequest: LearningPathRelationshipRequest,
      options?: any
    ): AxiosPromise<LearningPathRelationship> {
      return localVarFp
        .learningpathsResourcesUpdate(
          id,
          parentId,
          learningPathRelationshipRequest,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsRetrieve(
      id: number,
      options?: any
    ): AxiosPromise<LearningPathResource> {
      return localVarFp
        .learningpathsRetrieve(id, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {LearningpathsUpcomingListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {LearningpathsUpcomingListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {LearningpathsUpcomingListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {LearningpathsUpcomingListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {LearningpathsUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsUpcomingList(
      department?: LearningpathsUpcomingListDepartmentEnum,
      limit?: number,
      offeredBy?: LearningpathsUpcomingListOfferedByEnum,
      offset?: number,
      platform?: LearningpathsUpcomingListPlatformEnum,
      professional?: boolean,
      resourceType?: LearningpathsUpcomingListResourceTypeEnum,
      sortby?: LearningpathsUpcomingListSortbyEnum,
      options?: any
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .learningpathsUpcomingList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningPaths
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {LearningPathResourceRequest} learningPathResourceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learningpathsUpdate(
      id: number,
      learningPathResourceRequest: LearningPathResourceRequest,
      options?: any
    ): AxiosPromise<LearningPathResource> {
      return localVarFp
        .learningpathsUpdate(id, learningPathResourceRequest, options)
        .then(request => request(axios, basePath))
    }
  }
}

/**
 * LearningpathsApi - object-oriented interface
 * @export
 * @class LearningpathsApi
 * @extends {BaseAPI}
 */
export class LearningpathsApi extends BaseAPI {
  /**
   * Viewset for LearningPaths
   * @param {LearningPathResourceRequest} learningPathResourceRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsCreate(
    learningPathResourceRequest: LearningPathResourceRequest,
    options?: AxiosRequestConfig
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsCreate(learningPathResourceRequest, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPaths
   * @param {number} id A unique integer value identifying this learning resource.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsDestroy(id: number, options?: AxiosRequestConfig) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsDestroy(id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of learning resources.
   * @summary List
   * @param {LearningpathsListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
   * @param {number} [limit] Number of results to return per page.
   * @param {LearningpathsListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @param {number} [offset] The initial index from which to return the results.
   * @param {LearningpathsListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
   * @param {boolean} [professional]
   * @param {LearningpathsListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
   * @param {LearningpathsListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsList(
    department?: LearningpathsListDepartmentEnum,
    limit?: number,
    offeredBy?: LearningpathsListOfferedByEnum,
    offset?: number,
    platform?: LearningpathsListPlatformEnum,
    professional?: boolean,
    resourceType?: LearningpathsListResourceTypeEnum,
    sortby?: LearningpathsListSortbyEnum,
    options?: AxiosRequestConfig
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsList(
        department,
        limit,
        offeredBy,
        offset,
        platform,
        professional,
        resourceType,
        sortby,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of newly released resources.
   * @summary List New
   * @param {LearningpathsNewListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
   * @param {number} [limit] Number of results to return per page.
   * @param {LearningpathsNewListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @param {number} [offset] The initial index from which to return the results.
   * @param {LearningpathsNewListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
   * @param {boolean} [professional]
   * @param {LearningpathsNewListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
   * @param {LearningpathsNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsNewList(
    department?: LearningpathsNewListDepartmentEnum,
    limit?: number,
    offeredBy?: LearningpathsNewListOfferedByEnum,
    offset?: number,
    platform?: LearningpathsNewListPlatformEnum,
    professional?: boolean,
    resourceType?: LearningpathsNewListResourceTypeEnum,
    sortby?: LearningpathsNewListSortbyEnum,
    options?: AxiosRequestConfig
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsNewList(
        department,
        limit,
        offeredBy,
        offset,
        platform,
        professional,
        resourceType,
        sortby,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPaths
   * @param {number} id A unique integer value identifying this learning resource.
   * @param {PatchedLearningPathResourceRequest} [patchedLearningPathResourceRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsPartialUpdate(
    id: number,
    patchedLearningPathResourceRequest?: PatchedLearningPathResourceRequest,
    options?: AxiosRequestConfig
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsPartialUpdate(
        id,
        patchedLearningPathResourceRequest,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath related resources
   * @param {number} parentId
   * @param {LearningPathRelationshipRequest} learningPathRelationshipRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsResourcesCreate(
    parentId: number,
    learningPathRelationshipRequest: LearningPathRelationshipRequest,
    options?: AxiosRequestConfig
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsResourcesCreate(
        parentId,
        learningPathRelationshipRequest,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath related resources
   * @param {number} id A unique integer value identifying this learning resource relationship.
   * @param {number} parentId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsResourcesDestroy(
    id: number,
    parentId: number,
    options?: AxiosRequestConfig
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsResourcesDestroy(id, parentId, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath related resources
   * @param {number} parentId
   * @param {number} [limit] Number of results to return per page.
   * @param {number} [offset] The initial index from which to return the results.
   * @param {string} [sortby] Which field to use when ordering the results.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsResourcesList(
    parentId: number,
    limit?: number,
    offset?: number,
    sortby?: string,
    options?: AxiosRequestConfig
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsResourcesList(parentId, limit, offset, sortby, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath related resources
   * @param {number} id A unique integer value identifying this learning resource relationship.
   * @param {number} parentId
   * @param {PatchedLearningPathRelationshipRequest} [patchedLearningPathRelationshipRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsResourcesPartialUpdate(
    id: number,
    parentId: number,
    patchedLearningPathRelationshipRequest?: PatchedLearningPathRelationshipRequest,
    options?: AxiosRequestConfig
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsResourcesPartialUpdate(
        id,
        parentId,
        patchedLearningPathRelationshipRequest,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath related resources
   * @param {number} id A unique integer value identifying this learning resource relationship.
   * @param {number} parentId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsResourcesRetrieve(
    id: number,
    parentId: number,
    options?: AxiosRequestConfig
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsResourcesRetrieve(id, parentId, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPath related resources
   * @param {number} id A unique integer value identifying this learning resource relationship.
   * @param {number} parentId
   * @param {LearningPathRelationshipRequest} learningPathRelationshipRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsResourcesUpdate(
    id: number,
    parentId: number,
    learningPathRelationshipRequest: LearningPathRelationshipRequest,
    options?: AxiosRequestConfig
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsResourcesUpdate(
        id,
        parentId,
        learningPathRelationshipRequest,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Retrieve a single learning resource.
   * @summary Retrieve
   * @param {number} id A unique integer value identifying this learning resource.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsRetrieve(id: number, options?: AxiosRequestConfig) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsRetrieve(id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of upcoming resources.
   * @summary List Upcoming
   * @param {LearningpathsUpcomingListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
   * @param {number} [limit] Number of results to return per page.
   * @param {LearningpathsUpcomingListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @param {number} [offset] The initial index from which to return the results.
   * @param {LearningpathsUpcomingListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
   * @param {boolean} [professional]
   * @param {LearningpathsUpcomingListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
   * @param {LearningpathsUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsUpcomingList(
    department?: LearningpathsUpcomingListDepartmentEnum,
    limit?: number,
    offeredBy?: LearningpathsUpcomingListOfferedByEnum,
    offset?: number,
    platform?: LearningpathsUpcomingListPlatformEnum,
    professional?: boolean,
    resourceType?: LearningpathsUpcomingListResourceTypeEnum,
    sortby?: LearningpathsUpcomingListSortbyEnum,
    options?: AxiosRequestConfig
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsUpcomingList(
        department,
        limit,
        offeredBy,
        offset,
        platform,
        professional,
        resourceType,
        sortby,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningPaths
   * @param {number} id A unique integer value identifying this learning resource.
   * @param {LearningPathResourceRequest} learningPathResourceRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LearningpathsApi
   */
  public learningpathsUpdate(
    id: number,
    learningPathResourceRequest: LearningPathResourceRequest,
    options?: AxiosRequestConfig
  ) {
    return LearningpathsApiFp(this.configuration)
      .learningpathsUpdate(id, learningPathResourceRequest, options)
      .then(request => request(this.axios, this.basePath))
  }
}

/**
 * @export
 */
export const LearningpathsListDepartmentEnum = {
  _1: "1",
  _10: "10",
  _11: "11",
  _12: "12",
  _14: "14",
  _15: "15",
  _16: "16",
  _17: "17",
  _18: "18",
  _2: "2",
  _20: "20",
  _21A: "21A",
  _21G: "21G",
  _21H: "21H",
  _21L: "21L",
  _21M: "21M",
  _22: "22",
  _24: "24",
  _3: "3",
  _4: "4",
  _5: "5",
  _6: "6",
  _7: "7",
  _8: "8",
  _9: "9",
  Cc: "CC",
  CmsW: "CMS-W",
  Ec: "EC",
  Es: "ES",
  Esd: "ESD",
  Hst: "HST",
  Ids: "IDS",
  Mas: "MAS",
  Pe: "PE",
  Res: "RES",
  Sts: "STS",
  Wgs: "WGS"
} as const
export type LearningpathsListDepartmentEnum =
  typeof LearningpathsListDepartmentEnum[keyof typeof LearningpathsListDepartmentEnum]
/**
 * @export
 */
export const LearningpathsListOfferedByEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Mitpe: "mitpe",
  Mitx: "mitx",
  Ocw: "ocw",
  Scc: "scc",
  See: "see",
  Xpro: "xpro"
} as const
export type LearningpathsListOfferedByEnum =
  typeof LearningpathsListOfferedByEnum[keyof typeof LearningpathsListOfferedByEnum]
/**
 * @export
 */
export const LearningpathsListPlatformEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Edx: "edx",
  Emeritus: "emeritus",
  Globalalumni: "globalalumni",
  Mitpe: "mitpe",
  Mitxonline: "mitxonline",
  Ocw: "ocw",
  Oll: "oll",
  Podcast: "podcast",
  Scc: "scc",
  See: "see",
  Simplilearn: "simplilearn",
  Susskind: "susskind",
  Whu: "whu",
  Xpro: "xpro"
} as const
export type LearningpathsListPlatformEnum =
  typeof LearningpathsListPlatformEnum[keyof typeof LearningpathsListPlatformEnum]
/**
 * @export
 */
export const LearningpathsListResourceTypeEnum = {
  Course: "course",
  LearningPath: "learning_path",
  Podcast: "podcast",
  PodcastEpisode: "podcast_episode",
  Program: "program"
} as const
export type LearningpathsListResourceTypeEnum =
  typeof LearningpathsListResourceTypeEnum[keyof typeof LearningpathsListResourceTypeEnum]
/**
 * @export
 */
export const LearningpathsListSortbyEnum = {
  CreatedOn: "-created_on",
  Id: "-id",
  LastModified: "-last_modified",
  Mitcoursenumber: "-mitcoursenumber",
  ReadableId: "-readable_id",
  StartDate: "-start_date",
  CreatedOn2: "created_on",
  Id2: "id",
  LastModified2: "last_modified",
  Mitcoursenumber2: "mitcoursenumber",
  ReadableId2: "readable_id",
  StartDate2: "start_date"
} as const
export type LearningpathsListSortbyEnum =
  typeof LearningpathsListSortbyEnum[keyof typeof LearningpathsListSortbyEnum]
/**
 * @export
 */
export const LearningpathsNewListDepartmentEnum = {
  _1: "1",
  _10: "10",
  _11: "11",
  _12: "12",
  _14: "14",
  _15: "15",
  _16: "16",
  _17: "17",
  _18: "18",
  _2: "2",
  _20: "20",
  _21A: "21A",
  _21G: "21G",
  _21H: "21H",
  _21L: "21L",
  _21M: "21M",
  _22: "22",
  _24: "24",
  _3: "3",
  _4: "4",
  _5: "5",
  _6: "6",
  _7: "7",
  _8: "8",
  _9: "9",
  Cc: "CC",
  CmsW: "CMS-W",
  Ec: "EC",
  Es: "ES",
  Esd: "ESD",
  Hst: "HST",
  Ids: "IDS",
  Mas: "MAS",
  Pe: "PE",
  Res: "RES",
  Sts: "STS",
  Wgs: "WGS"
} as const
export type LearningpathsNewListDepartmentEnum =
  typeof LearningpathsNewListDepartmentEnum[keyof typeof LearningpathsNewListDepartmentEnum]
/**
 * @export
 */
export const LearningpathsNewListOfferedByEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Mitpe: "mitpe",
  Mitx: "mitx",
  Ocw: "ocw",
  Scc: "scc",
  See: "see",
  Xpro: "xpro"
} as const
export type LearningpathsNewListOfferedByEnum =
  typeof LearningpathsNewListOfferedByEnum[keyof typeof LearningpathsNewListOfferedByEnum]
/**
 * @export
 */
export const LearningpathsNewListPlatformEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Edx: "edx",
  Emeritus: "emeritus",
  Globalalumni: "globalalumni",
  Mitpe: "mitpe",
  Mitxonline: "mitxonline",
  Ocw: "ocw",
  Oll: "oll",
  Podcast: "podcast",
  Scc: "scc",
  See: "see",
  Simplilearn: "simplilearn",
  Susskind: "susskind",
  Whu: "whu",
  Xpro: "xpro"
} as const
export type LearningpathsNewListPlatformEnum =
  typeof LearningpathsNewListPlatformEnum[keyof typeof LearningpathsNewListPlatformEnum]
/**
 * @export
 */
export const LearningpathsNewListResourceTypeEnum = {
  Course: "course",
  LearningPath: "learning_path",
  Podcast: "podcast",
  PodcastEpisode: "podcast_episode",
  Program: "program"
} as const
export type LearningpathsNewListResourceTypeEnum =
  typeof LearningpathsNewListResourceTypeEnum[keyof typeof LearningpathsNewListResourceTypeEnum]
/**
 * @export
 */
export const LearningpathsNewListSortbyEnum = {
  CreatedOn: "-created_on",
  Id: "-id",
  LastModified: "-last_modified",
  Mitcoursenumber: "-mitcoursenumber",
  ReadableId: "-readable_id",
  StartDate: "-start_date",
  CreatedOn2: "created_on",
  Id2: "id",
  LastModified2: "last_modified",
  Mitcoursenumber2: "mitcoursenumber",
  ReadableId2: "readable_id",
  StartDate2: "start_date"
} as const
export type LearningpathsNewListSortbyEnum =
  typeof LearningpathsNewListSortbyEnum[keyof typeof LearningpathsNewListSortbyEnum]
/**
 * @export
 */
export const LearningpathsUpcomingListDepartmentEnum = {
  _1: "1",
  _10: "10",
  _11: "11",
  _12: "12",
  _14: "14",
  _15: "15",
  _16: "16",
  _17: "17",
  _18: "18",
  _2: "2",
  _20: "20",
  _21A: "21A",
  _21G: "21G",
  _21H: "21H",
  _21L: "21L",
  _21M: "21M",
  _22: "22",
  _24: "24",
  _3: "3",
  _4: "4",
  _5: "5",
  _6: "6",
  _7: "7",
  _8: "8",
  _9: "9",
  Cc: "CC",
  CmsW: "CMS-W",
  Ec: "EC",
  Es: "ES",
  Esd: "ESD",
  Hst: "HST",
  Ids: "IDS",
  Mas: "MAS",
  Pe: "PE",
  Res: "RES",
  Sts: "STS",
  Wgs: "WGS"
} as const
export type LearningpathsUpcomingListDepartmentEnum =
  typeof LearningpathsUpcomingListDepartmentEnum[keyof typeof LearningpathsUpcomingListDepartmentEnum]
/**
 * @export
 */
export const LearningpathsUpcomingListOfferedByEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Mitpe: "mitpe",
  Mitx: "mitx",
  Ocw: "ocw",
  Scc: "scc",
  See: "see",
  Xpro: "xpro"
} as const
export type LearningpathsUpcomingListOfferedByEnum =
  typeof LearningpathsUpcomingListOfferedByEnum[keyof typeof LearningpathsUpcomingListOfferedByEnum]
/**
 * @export
 */
export const LearningpathsUpcomingListPlatformEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Edx: "edx",
  Emeritus: "emeritus",
  Globalalumni: "globalalumni",
  Mitpe: "mitpe",
  Mitxonline: "mitxonline",
  Ocw: "ocw",
  Oll: "oll",
  Podcast: "podcast",
  Scc: "scc",
  See: "see",
  Simplilearn: "simplilearn",
  Susskind: "susskind",
  Whu: "whu",
  Xpro: "xpro"
} as const
export type LearningpathsUpcomingListPlatformEnum =
  typeof LearningpathsUpcomingListPlatformEnum[keyof typeof LearningpathsUpcomingListPlatformEnum]
/**
 * @export
 */
export const LearningpathsUpcomingListResourceTypeEnum = {
  Course: "course",
  LearningPath: "learning_path",
  Podcast: "podcast",
  PodcastEpisode: "podcast_episode",
  Program: "program"
} as const
export type LearningpathsUpcomingListResourceTypeEnum =
  typeof LearningpathsUpcomingListResourceTypeEnum[keyof typeof LearningpathsUpcomingListResourceTypeEnum]
/**
 * @export
 */
export const LearningpathsUpcomingListSortbyEnum = {
  CreatedOn: "-created_on",
  Id: "-id",
  LastModified: "-last_modified",
  Mitcoursenumber: "-mitcoursenumber",
  ReadableId: "-readable_id",
  StartDate: "-start_date",
  CreatedOn2: "created_on",
  Id2: "id",
  LastModified2: "last_modified",
  Mitcoursenumber2: "mitcoursenumber",
  ReadableId2: "readable_id",
  StartDate2: "start_date"
} as const
export type LearningpathsUpcomingListSortbyEnum =
  typeof LearningpathsUpcomingListSortbyEnum[keyof typeof LearningpathsUpcomingListSortbyEnum]

/**
 * PodcastEpisodesApi - axios parameter creator
 * @export
 */
export const PodcastEpisodesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {PodcastEpisodesListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {PodcastEpisodesListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {PodcastEpisodesListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {PodcastEpisodesListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {PodcastEpisodesListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastEpisodesList: async (
      department?: PodcastEpisodesListDepartmentEnum,
      limit?: number,
      offeredBy?: PodcastEpisodesListOfferedByEnum,
      offset?: number,
      platform?: PodcastEpisodesListPlatformEnum,
      professional?: boolean,
      resourceType?: PodcastEpisodesListResourceTypeEnum,
      sortby?: PodcastEpisodesListSortbyEnum,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/podcast_episodes/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (department !== undefined) {
        localVarQueryParameter["department"] = department
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offeredBy !== undefined) {
        localVarQueryParameter["offered_by"] = offeredBy
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (platform !== undefined) {
        localVarQueryParameter["platform"] = platform
      }

      if (professional !== undefined) {
        localVarQueryParameter["professional"] = professional
      }

      if (resourceType !== undefined) {
        localVarQueryParameter["resource_type"] = resourceType
      }

      if (sortby !== undefined) {
        localVarQueryParameter["sortby"] = sortby
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {PodcastEpisodesNewListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {PodcastEpisodesNewListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {PodcastEpisodesNewListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {PodcastEpisodesNewListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {PodcastEpisodesNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastEpisodesNewList: async (
      department?: PodcastEpisodesNewListDepartmentEnum,
      limit?: number,
      offeredBy?: PodcastEpisodesNewListOfferedByEnum,
      offset?: number,
      platform?: PodcastEpisodesNewListPlatformEnum,
      professional?: boolean,
      resourceType?: PodcastEpisodesNewListResourceTypeEnum,
      sortby?: PodcastEpisodesNewListSortbyEnum,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/podcast_episodes/new/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (department !== undefined) {
        localVarQueryParameter["department"] = department
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offeredBy !== undefined) {
        localVarQueryParameter["offered_by"] = offeredBy
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (platform !== undefined) {
        localVarQueryParameter["platform"] = platform
      }

      if (professional !== undefined) {
        localVarQueryParameter["professional"] = professional
      }

      if (resourceType !== undefined) {
        localVarQueryParameter["resource_type"] = resourceType
      }

      if (sortby !== undefined) {
        localVarQueryParameter["sortby"] = sortby
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastEpisodesRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("podcastEpisodesRetrieve", "id", id)
      const localVarPath = `/api/v1/podcast_episodes/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {PodcastEpisodesUpcomingListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {PodcastEpisodesUpcomingListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {PodcastEpisodesUpcomingListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {PodcastEpisodesUpcomingListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {PodcastEpisodesUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastEpisodesUpcomingList: async (
      department?: PodcastEpisodesUpcomingListDepartmentEnum,
      limit?: number,
      offeredBy?: PodcastEpisodesUpcomingListOfferedByEnum,
      offset?: number,
      platform?: PodcastEpisodesUpcomingListPlatformEnum,
      professional?: boolean,
      resourceType?: PodcastEpisodesUpcomingListResourceTypeEnum,
      sortby?: PodcastEpisodesUpcomingListSortbyEnum,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/podcast_episodes/upcoming/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (department !== undefined) {
        localVarQueryParameter["department"] = department
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offeredBy !== undefined) {
        localVarQueryParameter["offered_by"] = offeredBy
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (platform !== undefined) {
        localVarQueryParameter["platform"] = platform
      }

      if (professional !== undefined) {
        localVarQueryParameter["professional"] = professional
      }

      if (resourceType !== undefined) {
        localVarQueryParameter["resource_type"] = resourceType
      }

      if (sortby !== undefined) {
        localVarQueryParameter["sortby"] = sortby
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * PodcastEpisodesApi - functional programming interface
 * @export
 */
export const PodcastEpisodesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    PodcastEpisodesApiAxiosParamCreator(configuration)
  return {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {PodcastEpisodesListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {PodcastEpisodesListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {PodcastEpisodesListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {PodcastEpisodesListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {PodcastEpisodesListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async podcastEpisodesList(
      department?: PodcastEpisodesListDepartmentEnum,
      limit?: number,
      offeredBy?: PodcastEpisodesListOfferedByEnum,
      offset?: number,
      platform?: PodcastEpisodesListPlatformEnum,
      professional?: boolean,
      resourceType?: PodcastEpisodesListResourceTypeEnum,
      sortby?: PodcastEpisodesListSortbyEnum,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.podcastEpisodesList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["PodcastEpisodesApi.podcastEpisodesList"]?.[index]
          ?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {PodcastEpisodesNewListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {PodcastEpisodesNewListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {PodcastEpisodesNewListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {PodcastEpisodesNewListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {PodcastEpisodesNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async podcastEpisodesNewList(
      department?: PodcastEpisodesNewListDepartmentEnum,
      limit?: number,
      offeredBy?: PodcastEpisodesNewListOfferedByEnum,
      offset?: number,
      platform?: PodcastEpisodesNewListPlatformEnum,
      professional?: boolean,
      resourceType?: PodcastEpisodesNewListResourceTypeEnum,
      sortby?: PodcastEpisodesNewListSortbyEnum,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.podcastEpisodesNewList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["PodcastEpisodesApi.podcastEpisodesNewList"]?.[index]
          ?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async podcastEpisodesRetrieve(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.podcastEpisodesRetrieve(id, options)
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["PodcastEpisodesApi.podcastEpisodesRetrieve"]?.[
          index
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {PodcastEpisodesUpcomingListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {PodcastEpisodesUpcomingListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {PodcastEpisodesUpcomingListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {PodcastEpisodesUpcomingListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {PodcastEpisodesUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async podcastEpisodesUpcomingList(
      department?: PodcastEpisodesUpcomingListDepartmentEnum,
      limit?: number,
      offeredBy?: PodcastEpisodesUpcomingListOfferedByEnum,
      offset?: number,
      platform?: PodcastEpisodesUpcomingListPlatformEnum,
      professional?: boolean,
      resourceType?: PodcastEpisodesUpcomingListResourceTypeEnum,
      sortby?: PodcastEpisodesUpcomingListSortbyEnum,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.podcastEpisodesUpcomingList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["PodcastEpisodesApi.podcastEpisodesUpcomingList"]?.[
          index
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    }
  }
}

/**
 * PodcastEpisodesApi - factory interface
 * @export
 */
export const PodcastEpisodesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PodcastEpisodesApiFp(configuration)
  return {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {PodcastEpisodesListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {PodcastEpisodesListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {PodcastEpisodesListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {PodcastEpisodesListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {PodcastEpisodesListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastEpisodesList(
      department?: PodcastEpisodesListDepartmentEnum,
      limit?: number,
      offeredBy?: PodcastEpisodesListOfferedByEnum,
      offset?: number,
      platform?: PodcastEpisodesListPlatformEnum,
      professional?: boolean,
      resourceType?: PodcastEpisodesListResourceTypeEnum,
      sortby?: PodcastEpisodesListSortbyEnum,
      options?: any
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .podcastEpisodesList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {PodcastEpisodesNewListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {PodcastEpisodesNewListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {PodcastEpisodesNewListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {PodcastEpisodesNewListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {PodcastEpisodesNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastEpisodesNewList(
      department?: PodcastEpisodesNewListDepartmentEnum,
      limit?: number,
      offeredBy?: PodcastEpisodesNewListOfferedByEnum,
      offset?: number,
      platform?: PodcastEpisodesNewListPlatformEnum,
      professional?: boolean,
      resourceType?: PodcastEpisodesNewListResourceTypeEnum,
      sortby?: PodcastEpisodesNewListSortbyEnum,
      options?: any
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .podcastEpisodesNewList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastEpisodesRetrieve(
      id: number,
      options?: any
    ): AxiosPromise<LearningResource> {
      return localVarFp
        .podcastEpisodesRetrieve(id, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {PodcastEpisodesUpcomingListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {PodcastEpisodesUpcomingListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {PodcastEpisodesUpcomingListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {PodcastEpisodesUpcomingListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {PodcastEpisodesUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastEpisodesUpcomingList(
      department?: PodcastEpisodesUpcomingListDepartmentEnum,
      limit?: number,
      offeredBy?: PodcastEpisodesUpcomingListOfferedByEnum,
      offset?: number,
      platform?: PodcastEpisodesUpcomingListPlatformEnum,
      professional?: boolean,
      resourceType?: PodcastEpisodesUpcomingListResourceTypeEnum,
      sortby?: PodcastEpisodesUpcomingListSortbyEnum,
      options?: any
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .podcastEpisodesUpcomingList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
        .then(request => request(axios, basePath))
    }
  }
}

/**
 * PodcastEpisodesApi - object-oriented interface
 * @export
 * @class PodcastEpisodesApi
 * @extends {BaseAPI}
 */
export class PodcastEpisodesApi extends BaseAPI {
  /**
   * Get a paginated list of learning resources.
   * @summary List
   * @param {PodcastEpisodesListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
   * @param {number} [limit] Number of results to return per page.
   * @param {PodcastEpisodesListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @param {number} [offset] The initial index from which to return the results.
   * @param {PodcastEpisodesListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
   * @param {boolean} [professional]
   * @param {PodcastEpisodesListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
   * @param {PodcastEpisodesListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PodcastEpisodesApi
   */
  public podcastEpisodesList(
    department?: PodcastEpisodesListDepartmentEnum,
    limit?: number,
    offeredBy?: PodcastEpisodesListOfferedByEnum,
    offset?: number,
    platform?: PodcastEpisodesListPlatformEnum,
    professional?: boolean,
    resourceType?: PodcastEpisodesListResourceTypeEnum,
    sortby?: PodcastEpisodesListSortbyEnum,
    options?: AxiosRequestConfig
  ) {
    return PodcastEpisodesApiFp(this.configuration)
      .podcastEpisodesList(
        department,
        limit,
        offeredBy,
        offset,
        platform,
        professional,
        resourceType,
        sortby,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of newly released resources.
   * @summary List New
   * @param {PodcastEpisodesNewListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
   * @param {number} [limit] Number of results to return per page.
   * @param {PodcastEpisodesNewListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @param {number} [offset] The initial index from which to return the results.
   * @param {PodcastEpisodesNewListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
   * @param {boolean} [professional]
   * @param {PodcastEpisodesNewListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
   * @param {PodcastEpisodesNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PodcastEpisodesApi
   */
  public podcastEpisodesNewList(
    department?: PodcastEpisodesNewListDepartmentEnum,
    limit?: number,
    offeredBy?: PodcastEpisodesNewListOfferedByEnum,
    offset?: number,
    platform?: PodcastEpisodesNewListPlatformEnum,
    professional?: boolean,
    resourceType?: PodcastEpisodesNewListResourceTypeEnum,
    sortby?: PodcastEpisodesNewListSortbyEnum,
    options?: AxiosRequestConfig
  ) {
    return PodcastEpisodesApiFp(this.configuration)
      .podcastEpisodesNewList(
        department,
        limit,
        offeredBy,
        offset,
        platform,
        professional,
        resourceType,
        sortby,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Retrieve a single learning resource.
   * @summary Retrieve
   * @param {number} id A unique integer value identifying this learning resource.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PodcastEpisodesApi
   */
  public podcastEpisodesRetrieve(id: number, options?: AxiosRequestConfig) {
    return PodcastEpisodesApiFp(this.configuration)
      .podcastEpisodesRetrieve(id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of upcoming resources.
   * @summary List Upcoming
   * @param {PodcastEpisodesUpcomingListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
   * @param {number} [limit] Number of results to return per page.
   * @param {PodcastEpisodesUpcomingListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @param {number} [offset] The initial index from which to return the results.
   * @param {PodcastEpisodesUpcomingListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
   * @param {boolean} [professional]
   * @param {PodcastEpisodesUpcomingListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
   * @param {PodcastEpisodesUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PodcastEpisodesApi
   */
  public podcastEpisodesUpcomingList(
    department?: PodcastEpisodesUpcomingListDepartmentEnum,
    limit?: number,
    offeredBy?: PodcastEpisodesUpcomingListOfferedByEnum,
    offset?: number,
    platform?: PodcastEpisodesUpcomingListPlatformEnum,
    professional?: boolean,
    resourceType?: PodcastEpisodesUpcomingListResourceTypeEnum,
    sortby?: PodcastEpisodesUpcomingListSortbyEnum,
    options?: AxiosRequestConfig
  ) {
    return PodcastEpisodesApiFp(this.configuration)
      .podcastEpisodesUpcomingList(
        department,
        limit,
        offeredBy,
        offset,
        platform,
        professional,
        resourceType,
        sortby,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }
}

/**
 * @export
 */
export const PodcastEpisodesListDepartmentEnum = {
  _1: "1",
  _10: "10",
  _11: "11",
  _12: "12",
  _14: "14",
  _15: "15",
  _16: "16",
  _17: "17",
  _18: "18",
  _2: "2",
  _20: "20",
  _21A: "21A",
  _21G: "21G",
  _21H: "21H",
  _21L: "21L",
  _21M: "21M",
  _22: "22",
  _24: "24",
  _3: "3",
  _4: "4",
  _5: "5",
  _6: "6",
  _7: "7",
  _8: "8",
  _9: "9",
  Cc: "CC",
  CmsW: "CMS-W",
  Ec: "EC",
  Es: "ES",
  Esd: "ESD",
  Hst: "HST",
  Ids: "IDS",
  Mas: "MAS",
  Pe: "PE",
  Res: "RES",
  Sts: "STS",
  Wgs: "WGS"
} as const
export type PodcastEpisodesListDepartmentEnum =
  typeof PodcastEpisodesListDepartmentEnum[keyof typeof PodcastEpisodesListDepartmentEnum]
/**
 * @export
 */
export const PodcastEpisodesListOfferedByEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Mitpe: "mitpe",
  Mitx: "mitx",
  Ocw: "ocw",
  Scc: "scc",
  See: "see",
  Xpro: "xpro"
} as const
export type PodcastEpisodesListOfferedByEnum =
  typeof PodcastEpisodesListOfferedByEnum[keyof typeof PodcastEpisodesListOfferedByEnum]
/**
 * @export
 */
export const PodcastEpisodesListPlatformEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Edx: "edx",
  Emeritus: "emeritus",
  Globalalumni: "globalalumni",
  Mitpe: "mitpe",
  Mitxonline: "mitxonline",
  Ocw: "ocw",
  Oll: "oll",
  Podcast: "podcast",
  Scc: "scc",
  See: "see",
  Simplilearn: "simplilearn",
  Susskind: "susskind",
  Whu: "whu",
  Xpro: "xpro"
} as const
export type PodcastEpisodesListPlatformEnum =
  typeof PodcastEpisodesListPlatformEnum[keyof typeof PodcastEpisodesListPlatformEnum]
/**
 * @export
 */
export const PodcastEpisodesListResourceTypeEnum = {
  Course: "course",
  LearningPath: "learning_path",
  Podcast: "podcast",
  PodcastEpisode: "podcast_episode",
  Program: "program"
} as const
export type PodcastEpisodesListResourceTypeEnum =
  typeof PodcastEpisodesListResourceTypeEnum[keyof typeof PodcastEpisodesListResourceTypeEnum]
/**
 * @export
 */
export const PodcastEpisodesListSortbyEnum = {
  CreatedOn: "-created_on",
  Id: "-id",
  LastModified: "-last_modified",
  Mitcoursenumber: "-mitcoursenumber",
  ReadableId: "-readable_id",
  StartDate: "-start_date",
  CreatedOn2: "created_on",
  Id2: "id",
  LastModified2: "last_modified",
  Mitcoursenumber2: "mitcoursenumber",
  ReadableId2: "readable_id",
  StartDate2: "start_date"
} as const
export type PodcastEpisodesListSortbyEnum =
  typeof PodcastEpisodesListSortbyEnum[keyof typeof PodcastEpisodesListSortbyEnum]
/**
 * @export
 */
export const PodcastEpisodesNewListDepartmentEnum = {
  _1: "1",
  _10: "10",
  _11: "11",
  _12: "12",
  _14: "14",
  _15: "15",
  _16: "16",
  _17: "17",
  _18: "18",
  _2: "2",
  _20: "20",
  _21A: "21A",
  _21G: "21G",
  _21H: "21H",
  _21L: "21L",
  _21M: "21M",
  _22: "22",
  _24: "24",
  _3: "3",
  _4: "4",
  _5: "5",
  _6: "6",
  _7: "7",
  _8: "8",
  _9: "9",
  Cc: "CC",
  CmsW: "CMS-W",
  Ec: "EC",
  Es: "ES",
  Esd: "ESD",
  Hst: "HST",
  Ids: "IDS",
  Mas: "MAS",
  Pe: "PE",
  Res: "RES",
  Sts: "STS",
  Wgs: "WGS"
} as const
export type PodcastEpisodesNewListDepartmentEnum =
  typeof PodcastEpisodesNewListDepartmentEnum[keyof typeof PodcastEpisodesNewListDepartmentEnum]
/**
 * @export
 */
export const PodcastEpisodesNewListOfferedByEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Mitpe: "mitpe",
  Mitx: "mitx",
  Ocw: "ocw",
  Scc: "scc",
  See: "see",
  Xpro: "xpro"
} as const
export type PodcastEpisodesNewListOfferedByEnum =
  typeof PodcastEpisodesNewListOfferedByEnum[keyof typeof PodcastEpisodesNewListOfferedByEnum]
/**
 * @export
 */
export const PodcastEpisodesNewListPlatformEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Edx: "edx",
  Emeritus: "emeritus",
  Globalalumni: "globalalumni",
  Mitpe: "mitpe",
  Mitxonline: "mitxonline",
  Ocw: "ocw",
  Oll: "oll",
  Podcast: "podcast",
  Scc: "scc",
  See: "see",
  Simplilearn: "simplilearn",
  Susskind: "susskind",
  Whu: "whu",
  Xpro: "xpro"
} as const
export type PodcastEpisodesNewListPlatformEnum =
  typeof PodcastEpisodesNewListPlatformEnum[keyof typeof PodcastEpisodesNewListPlatformEnum]
/**
 * @export
 */
export const PodcastEpisodesNewListResourceTypeEnum = {
  Course: "course",
  LearningPath: "learning_path",
  Podcast: "podcast",
  PodcastEpisode: "podcast_episode",
  Program: "program"
} as const
export type PodcastEpisodesNewListResourceTypeEnum =
  typeof PodcastEpisodesNewListResourceTypeEnum[keyof typeof PodcastEpisodesNewListResourceTypeEnum]
/**
 * @export
 */
export const PodcastEpisodesNewListSortbyEnum = {
  CreatedOn: "-created_on",
  Id: "-id",
  LastModified: "-last_modified",
  Mitcoursenumber: "-mitcoursenumber",
  ReadableId: "-readable_id",
  StartDate: "-start_date",
  CreatedOn2: "created_on",
  Id2: "id",
  LastModified2: "last_modified",
  Mitcoursenumber2: "mitcoursenumber",
  ReadableId2: "readable_id",
  StartDate2: "start_date"
} as const
export type PodcastEpisodesNewListSortbyEnum =
  typeof PodcastEpisodesNewListSortbyEnum[keyof typeof PodcastEpisodesNewListSortbyEnum]
/**
 * @export
 */
export const PodcastEpisodesUpcomingListDepartmentEnum = {
  _1: "1",
  _10: "10",
  _11: "11",
  _12: "12",
  _14: "14",
  _15: "15",
  _16: "16",
  _17: "17",
  _18: "18",
  _2: "2",
  _20: "20",
  _21A: "21A",
  _21G: "21G",
  _21H: "21H",
  _21L: "21L",
  _21M: "21M",
  _22: "22",
  _24: "24",
  _3: "3",
  _4: "4",
  _5: "5",
  _6: "6",
  _7: "7",
  _8: "8",
  _9: "9",
  Cc: "CC",
  CmsW: "CMS-W",
  Ec: "EC",
  Es: "ES",
  Esd: "ESD",
  Hst: "HST",
  Ids: "IDS",
  Mas: "MAS",
  Pe: "PE",
  Res: "RES",
  Sts: "STS",
  Wgs: "WGS"
} as const
export type PodcastEpisodesUpcomingListDepartmentEnum =
  typeof PodcastEpisodesUpcomingListDepartmentEnum[keyof typeof PodcastEpisodesUpcomingListDepartmentEnum]
/**
 * @export
 */
export const PodcastEpisodesUpcomingListOfferedByEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Mitpe: "mitpe",
  Mitx: "mitx",
  Ocw: "ocw",
  Scc: "scc",
  See: "see",
  Xpro: "xpro"
} as const
export type PodcastEpisodesUpcomingListOfferedByEnum =
  typeof PodcastEpisodesUpcomingListOfferedByEnum[keyof typeof PodcastEpisodesUpcomingListOfferedByEnum]
/**
 * @export
 */
export const PodcastEpisodesUpcomingListPlatformEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Edx: "edx",
  Emeritus: "emeritus",
  Globalalumni: "globalalumni",
  Mitpe: "mitpe",
  Mitxonline: "mitxonline",
  Ocw: "ocw",
  Oll: "oll",
  Podcast: "podcast",
  Scc: "scc",
  See: "see",
  Simplilearn: "simplilearn",
  Susskind: "susskind",
  Whu: "whu",
  Xpro: "xpro"
} as const
export type PodcastEpisodesUpcomingListPlatformEnum =
  typeof PodcastEpisodesUpcomingListPlatformEnum[keyof typeof PodcastEpisodesUpcomingListPlatformEnum]
/**
 * @export
 */
export const PodcastEpisodesUpcomingListResourceTypeEnum = {
  Course: "course",
  LearningPath: "learning_path",
  Podcast: "podcast",
  PodcastEpisode: "podcast_episode",
  Program: "program"
} as const
export type PodcastEpisodesUpcomingListResourceTypeEnum =
  typeof PodcastEpisodesUpcomingListResourceTypeEnum[keyof typeof PodcastEpisodesUpcomingListResourceTypeEnum]
/**
 * @export
 */
export const PodcastEpisodesUpcomingListSortbyEnum = {
  CreatedOn: "-created_on",
  Id: "-id",
  LastModified: "-last_modified",
  Mitcoursenumber: "-mitcoursenumber",
  ReadableId: "-readable_id",
  StartDate: "-start_date",
  CreatedOn2: "created_on",
  Id2: "id",
  LastModified2: "last_modified",
  Mitcoursenumber2: "mitcoursenumber",
  ReadableId2: "readable_id",
  StartDate2: "start_date"
} as const
export type PodcastEpisodesUpcomingListSortbyEnum =
  typeof PodcastEpisodesUpcomingListSortbyEnum[keyof typeof PodcastEpisodesUpcomingListSortbyEnum]

/**
 * PodcastsApi - axios parameter creator
 * @export
 */
export const PodcastsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Viewset for LearningResource related resources
     * @param {number} parentId
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [sortby] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastsItemsList: async (
      parentId: number,
      limit?: number,
      offset?: number,
      sortby?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("podcastsItemsList", "parentId", parentId)
      const localVarPath = `/api/v1/podcasts/{parent_id}/items/`.replace(
        `{${"parent_id"}}`,
        encodeURIComponent(String(parentId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (sortby !== undefined) {
        localVarQueryParameter["sortby"] = sortby
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for LearningResource related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastsItemsRetrieve: async (
      id: number,
      parentId: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("podcastsItemsRetrieve", "id", id)
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("podcastsItemsRetrieve", "parentId", parentId)
      const localVarPath = `/api/v1/podcasts/{parent_id}/items/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {PodcastsListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {PodcastsListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {PodcastsListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {PodcastsListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {PodcastsListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastsList: async (
      department?: PodcastsListDepartmentEnum,
      limit?: number,
      offeredBy?: PodcastsListOfferedByEnum,
      offset?: number,
      platform?: PodcastsListPlatformEnum,
      professional?: boolean,
      resourceType?: PodcastsListResourceTypeEnum,
      sortby?: PodcastsListSortbyEnum,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/podcasts/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (department !== undefined) {
        localVarQueryParameter["department"] = department
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offeredBy !== undefined) {
        localVarQueryParameter["offered_by"] = offeredBy
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (platform !== undefined) {
        localVarQueryParameter["platform"] = platform
      }

      if (professional !== undefined) {
        localVarQueryParameter["professional"] = professional
      }

      if (resourceType !== undefined) {
        localVarQueryParameter["resource_type"] = resourceType
      }

      if (sortby !== undefined) {
        localVarQueryParameter["sortby"] = sortby
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {PodcastsNewListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {PodcastsNewListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {PodcastsNewListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {PodcastsNewListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {PodcastsNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastsNewList: async (
      department?: PodcastsNewListDepartmentEnum,
      limit?: number,
      offeredBy?: PodcastsNewListOfferedByEnum,
      offset?: number,
      platform?: PodcastsNewListPlatformEnum,
      professional?: boolean,
      resourceType?: PodcastsNewListResourceTypeEnum,
      sortby?: PodcastsNewListSortbyEnum,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/podcasts/new/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (department !== undefined) {
        localVarQueryParameter["department"] = department
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offeredBy !== undefined) {
        localVarQueryParameter["offered_by"] = offeredBy
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (platform !== undefined) {
        localVarQueryParameter["platform"] = platform
      }

      if (professional !== undefined) {
        localVarQueryParameter["professional"] = professional
      }

      if (resourceType !== undefined) {
        localVarQueryParameter["resource_type"] = resourceType
      }

      if (sortby !== undefined) {
        localVarQueryParameter["sortby"] = sortby
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastsRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("podcastsRetrieve", "id", id)
      const localVarPath = `/api/v1/podcasts/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {PodcastsUpcomingListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {PodcastsUpcomingListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {PodcastsUpcomingListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {PodcastsUpcomingListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {PodcastsUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastsUpcomingList: async (
      department?: PodcastsUpcomingListDepartmentEnum,
      limit?: number,
      offeredBy?: PodcastsUpcomingListOfferedByEnum,
      offset?: number,
      platform?: PodcastsUpcomingListPlatformEnum,
      professional?: boolean,
      resourceType?: PodcastsUpcomingListResourceTypeEnum,
      sortby?: PodcastsUpcomingListSortbyEnum,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/podcasts/upcoming/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (department !== undefined) {
        localVarQueryParameter["department"] = department
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offeredBy !== undefined) {
        localVarQueryParameter["offered_by"] = offeredBy
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (platform !== undefined) {
        localVarQueryParameter["platform"] = platform
      }

      if (professional !== undefined) {
        localVarQueryParameter["professional"] = professional
      }

      if (resourceType !== undefined) {
        localVarQueryParameter["resource_type"] = resourceType
      }

      if (sortby !== undefined) {
        localVarQueryParameter["sortby"] = sortby
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * PodcastsApi - functional programming interface
 * @export
 */
export const PodcastsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PodcastsApiAxiosParamCreator(configuration)
  return {
    /**
     * Viewset for LearningResource related resources
     * @param {number} parentId
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [sortby] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async podcastsItemsList(
      parentId: number,
      limit?: number,
      offset?: number,
      sortby?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceChildList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.podcastsItemsList(
          parentId,
          limit,
          offset,
          sortby,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["PodcastsApi.podcastsItemsList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for LearningResource related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async podcastsItemsRetrieve(
      id: number,
      parentId: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResourceChild>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.podcastsItemsRetrieve(
          id,
          parentId,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["PodcastsApi.podcastsItemsRetrieve"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {PodcastsListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {PodcastsListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {PodcastsListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {PodcastsListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {PodcastsListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async podcastsList(
      department?: PodcastsListDepartmentEnum,
      limit?: number,
      offeredBy?: PodcastsListOfferedByEnum,
      offset?: number,
      platform?: PodcastsListPlatformEnum,
      professional?: boolean,
      resourceType?: PodcastsListResourceTypeEnum,
      sortby?: PodcastsListSortbyEnum,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.podcastsList(
        department,
        limit,
        offeredBy,
        offset,
        platform,
        professional,
        resourceType,
        sortby,
        options
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["PodcastsApi.podcastsList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {PodcastsNewListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {PodcastsNewListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {PodcastsNewListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {PodcastsNewListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {PodcastsNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async podcastsNewList(
      department?: PodcastsNewListDepartmentEnum,
      limit?: number,
      offeredBy?: PodcastsNewListOfferedByEnum,
      offset?: number,
      platform?: PodcastsNewListPlatformEnum,
      professional?: boolean,
      resourceType?: PodcastsNewListResourceTypeEnum,
      sortby?: PodcastsNewListSortbyEnum,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.podcastsNewList(
        department,
        limit,
        offeredBy,
        offset,
        platform,
        professional,
        resourceType,
        sortby,
        options
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["PodcastsApi.podcastsNewList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async podcastsRetrieve(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.podcastsRetrieve(id, options)
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["PodcastsApi.podcastsRetrieve"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {PodcastsUpcomingListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {PodcastsUpcomingListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {PodcastsUpcomingListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {PodcastsUpcomingListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {PodcastsUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async podcastsUpcomingList(
      department?: PodcastsUpcomingListDepartmentEnum,
      limit?: number,
      offeredBy?: PodcastsUpcomingListOfferedByEnum,
      offset?: number,
      platform?: PodcastsUpcomingListPlatformEnum,
      professional?: boolean,
      resourceType?: PodcastsUpcomingListResourceTypeEnum,
      sortby?: PodcastsUpcomingListSortbyEnum,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.podcastsUpcomingList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["PodcastsApi.podcastsUpcomingList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    }
  }
}

/**
 * PodcastsApi - factory interface
 * @export
 */
export const PodcastsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PodcastsApiFp(configuration)
  return {
    /**
     * Viewset for LearningResource related resources
     * @param {number} parentId
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [sortby] Which field to use when ordering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastsItemsList(
      parentId: number,
      limit?: number,
      offset?: number,
      sortby?: string,
      options?: any
    ): AxiosPromise<PaginatedLearningResourceChildList> {
      return localVarFp
        .podcastsItemsList(parentId, limit, offset, sortby, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for LearningResource related resources
     * @param {number} id A unique integer value identifying this learning resource relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastsItemsRetrieve(
      id: number,
      parentId: number,
      options?: any
    ): AxiosPromise<LearningResourceChild> {
      return localVarFp
        .podcastsItemsRetrieve(id, parentId, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {PodcastsListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {PodcastsListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {PodcastsListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {PodcastsListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {PodcastsListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastsList(
      department?: PodcastsListDepartmentEnum,
      limit?: number,
      offeredBy?: PodcastsListOfferedByEnum,
      offset?: number,
      platform?: PodcastsListPlatformEnum,
      professional?: boolean,
      resourceType?: PodcastsListResourceTypeEnum,
      sortby?: PodcastsListSortbyEnum,
      options?: any
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .podcastsList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {PodcastsNewListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {PodcastsNewListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {PodcastsNewListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {PodcastsNewListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {PodcastsNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastsNewList(
      department?: PodcastsNewListDepartmentEnum,
      limit?: number,
      offeredBy?: PodcastsNewListOfferedByEnum,
      offset?: number,
      platform?: PodcastsNewListPlatformEnum,
      professional?: boolean,
      resourceType?: PodcastsNewListResourceTypeEnum,
      sortby?: PodcastsNewListSortbyEnum,
      options?: any
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .podcastsNewList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastsRetrieve(
      id: number,
      options?: any
    ): AxiosPromise<LearningResource> {
      return localVarFp
        .podcastsRetrieve(id, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {PodcastsUpcomingListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {PodcastsUpcomingListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {PodcastsUpcomingListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {PodcastsUpcomingListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {PodcastsUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    podcastsUpcomingList(
      department?: PodcastsUpcomingListDepartmentEnum,
      limit?: number,
      offeredBy?: PodcastsUpcomingListOfferedByEnum,
      offset?: number,
      platform?: PodcastsUpcomingListPlatformEnum,
      professional?: boolean,
      resourceType?: PodcastsUpcomingListResourceTypeEnum,
      sortby?: PodcastsUpcomingListSortbyEnum,
      options?: any
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .podcastsUpcomingList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
        .then(request => request(axios, basePath))
    }
  }
}

/**
 * PodcastsApi - object-oriented interface
 * @export
 * @class PodcastsApi
 * @extends {BaseAPI}
 */
export class PodcastsApi extends BaseAPI {
  /**
   * Viewset for LearningResource related resources
   * @param {number} parentId
   * @param {number} [limit] Number of results to return per page.
   * @param {number} [offset] The initial index from which to return the results.
   * @param {string} [sortby] Which field to use when ordering the results.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PodcastsApi
   */
  public podcastsItemsList(
    parentId: number,
    limit?: number,
    offset?: number,
    sortby?: string,
    options?: AxiosRequestConfig
  ) {
    return PodcastsApiFp(this.configuration)
      .podcastsItemsList(parentId, limit, offset, sortby, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for LearningResource related resources
   * @param {number} id A unique integer value identifying this learning resource relationship.
   * @param {number} parentId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PodcastsApi
   */
  public podcastsItemsRetrieve(
    id: number,
    parentId: number,
    options?: AxiosRequestConfig
  ) {
    return PodcastsApiFp(this.configuration)
      .podcastsItemsRetrieve(id, parentId, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of learning resources.
   * @summary List
   * @param {PodcastsListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
   * @param {number} [limit] Number of results to return per page.
   * @param {PodcastsListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @param {number} [offset] The initial index from which to return the results.
   * @param {PodcastsListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
   * @param {boolean} [professional]
   * @param {PodcastsListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
   * @param {PodcastsListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PodcastsApi
   */
  public podcastsList(
    department?: PodcastsListDepartmentEnum,
    limit?: number,
    offeredBy?: PodcastsListOfferedByEnum,
    offset?: number,
    platform?: PodcastsListPlatformEnum,
    professional?: boolean,
    resourceType?: PodcastsListResourceTypeEnum,
    sortby?: PodcastsListSortbyEnum,
    options?: AxiosRequestConfig
  ) {
    return PodcastsApiFp(this.configuration)
      .podcastsList(
        department,
        limit,
        offeredBy,
        offset,
        platform,
        professional,
        resourceType,
        sortby,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of newly released resources.
   * @summary List New
   * @param {PodcastsNewListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
   * @param {number} [limit] Number of results to return per page.
   * @param {PodcastsNewListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @param {number} [offset] The initial index from which to return the results.
   * @param {PodcastsNewListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
   * @param {boolean} [professional]
   * @param {PodcastsNewListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
   * @param {PodcastsNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PodcastsApi
   */
  public podcastsNewList(
    department?: PodcastsNewListDepartmentEnum,
    limit?: number,
    offeredBy?: PodcastsNewListOfferedByEnum,
    offset?: number,
    platform?: PodcastsNewListPlatformEnum,
    professional?: boolean,
    resourceType?: PodcastsNewListResourceTypeEnum,
    sortby?: PodcastsNewListSortbyEnum,
    options?: AxiosRequestConfig
  ) {
    return PodcastsApiFp(this.configuration)
      .podcastsNewList(
        department,
        limit,
        offeredBy,
        offset,
        platform,
        professional,
        resourceType,
        sortby,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Retrieve a single learning resource.
   * @summary Retrieve
   * @param {number} id A unique integer value identifying this learning resource.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PodcastsApi
   */
  public podcastsRetrieve(id: number, options?: AxiosRequestConfig) {
    return PodcastsApiFp(this.configuration)
      .podcastsRetrieve(id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of upcoming resources.
   * @summary List Upcoming
   * @param {PodcastsUpcomingListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
   * @param {number} [limit] Number of results to return per page.
   * @param {PodcastsUpcomingListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @param {number} [offset] The initial index from which to return the results.
   * @param {PodcastsUpcomingListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
   * @param {boolean} [professional]
   * @param {PodcastsUpcomingListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
   * @param {PodcastsUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PodcastsApi
   */
  public podcastsUpcomingList(
    department?: PodcastsUpcomingListDepartmentEnum,
    limit?: number,
    offeredBy?: PodcastsUpcomingListOfferedByEnum,
    offset?: number,
    platform?: PodcastsUpcomingListPlatformEnum,
    professional?: boolean,
    resourceType?: PodcastsUpcomingListResourceTypeEnum,
    sortby?: PodcastsUpcomingListSortbyEnum,
    options?: AxiosRequestConfig
  ) {
    return PodcastsApiFp(this.configuration)
      .podcastsUpcomingList(
        department,
        limit,
        offeredBy,
        offset,
        platform,
        professional,
        resourceType,
        sortby,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }
}

/**
 * @export
 */
export const PodcastsListDepartmentEnum = {
  _1: "1",
  _10: "10",
  _11: "11",
  _12: "12",
  _14: "14",
  _15: "15",
  _16: "16",
  _17: "17",
  _18: "18",
  _2: "2",
  _20: "20",
  _21A: "21A",
  _21G: "21G",
  _21H: "21H",
  _21L: "21L",
  _21M: "21M",
  _22: "22",
  _24: "24",
  _3: "3",
  _4: "4",
  _5: "5",
  _6: "6",
  _7: "7",
  _8: "8",
  _9: "9",
  Cc: "CC",
  CmsW: "CMS-W",
  Ec: "EC",
  Es: "ES",
  Esd: "ESD",
  Hst: "HST",
  Ids: "IDS",
  Mas: "MAS",
  Pe: "PE",
  Res: "RES",
  Sts: "STS",
  Wgs: "WGS"
} as const
export type PodcastsListDepartmentEnum =
  typeof PodcastsListDepartmentEnum[keyof typeof PodcastsListDepartmentEnum]
/**
 * @export
 */
export const PodcastsListOfferedByEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Mitpe: "mitpe",
  Mitx: "mitx",
  Ocw: "ocw",
  Scc: "scc",
  See: "see",
  Xpro: "xpro"
} as const
export type PodcastsListOfferedByEnum =
  typeof PodcastsListOfferedByEnum[keyof typeof PodcastsListOfferedByEnum]
/**
 * @export
 */
export const PodcastsListPlatformEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Edx: "edx",
  Emeritus: "emeritus",
  Globalalumni: "globalalumni",
  Mitpe: "mitpe",
  Mitxonline: "mitxonline",
  Ocw: "ocw",
  Oll: "oll",
  Podcast: "podcast",
  Scc: "scc",
  See: "see",
  Simplilearn: "simplilearn",
  Susskind: "susskind",
  Whu: "whu",
  Xpro: "xpro"
} as const
export type PodcastsListPlatformEnum =
  typeof PodcastsListPlatformEnum[keyof typeof PodcastsListPlatformEnum]
/**
 * @export
 */
export const PodcastsListResourceTypeEnum = {
  Course: "course",
  LearningPath: "learning_path",
  Podcast: "podcast",
  PodcastEpisode: "podcast_episode",
  Program: "program"
} as const
export type PodcastsListResourceTypeEnum =
  typeof PodcastsListResourceTypeEnum[keyof typeof PodcastsListResourceTypeEnum]
/**
 * @export
 */
export const PodcastsListSortbyEnum = {
  CreatedOn: "-created_on",
  Id: "-id",
  LastModified: "-last_modified",
  Mitcoursenumber: "-mitcoursenumber",
  ReadableId: "-readable_id",
  StartDate: "-start_date",
  CreatedOn2: "created_on",
  Id2: "id",
  LastModified2: "last_modified",
  Mitcoursenumber2: "mitcoursenumber",
  ReadableId2: "readable_id",
  StartDate2: "start_date"
} as const
export type PodcastsListSortbyEnum =
  typeof PodcastsListSortbyEnum[keyof typeof PodcastsListSortbyEnum]
/**
 * @export
 */
export const PodcastsNewListDepartmentEnum = {
  _1: "1",
  _10: "10",
  _11: "11",
  _12: "12",
  _14: "14",
  _15: "15",
  _16: "16",
  _17: "17",
  _18: "18",
  _2: "2",
  _20: "20",
  _21A: "21A",
  _21G: "21G",
  _21H: "21H",
  _21L: "21L",
  _21M: "21M",
  _22: "22",
  _24: "24",
  _3: "3",
  _4: "4",
  _5: "5",
  _6: "6",
  _7: "7",
  _8: "8",
  _9: "9",
  Cc: "CC",
  CmsW: "CMS-W",
  Ec: "EC",
  Es: "ES",
  Esd: "ESD",
  Hst: "HST",
  Ids: "IDS",
  Mas: "MAS",
  Pe: "PE",
  Res: "RES",
  Sts: "STS",
  Wgs: "WGS"
} as const
export type PodcastsNewListDepartmentEnum =
  typeof PodcastsNewListDepartmentEnum[keyof typeof PodcastsNewListDepartmentEnum]
/**
 * @export
 */
export const PodcastsNewListOfferedByEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Mitpe: "mitpe",
  Mitx: "mitx",
  Ocw: "ocw",
  Scc: "scc",
  See: "see",
  Xpro: "xpro"
} as const
export type PodcastsNewListOfferedByEnum =
  typeof PodcastsNewListOfferedByEnum[keyof typeof PodcastsNewListOfferedByEnum]
/**
 * @export
 */
export const PodcastsNewListPlatformEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Edx: "edx",
  Emeritus: "emeritus",
  Globalalumni: "globalalumni",
  Mitpe: "mitpe",
  Mitxonline: "mitxonline",
  Ocw: "ocw",
  Oll: "oll",
  Podcast: "podcast",
  Scc: "scc",
  See: "see",
  Simplilearn: "simplilearn",
  Susskind: "susskind",
  Whu: "whu",
  Xpro: "xpro"
} as const
export type PodcastsNewListPlatformEnum =
  typeof PodcastsNewListPlatformEnum[keyof typeof PodcastsNewListPlatformEnum]
/**
 * @export
 */
export const PodcastsNewListResourceTypeEnum = {
  Course: "course",
  LearningPath: "learning_path",
  Podcast: "podcast",
  PodcastEpisode: "podcast_episode",
  Program: "program"
} as const
export type PodcastsNewListResourceTypeEnum =
  typeof PodcastsNewListResourceTypeEnum[keyof typeof PodcastsNewListResourceTypeEnum]
/**
 * @export
 */
export const PodcastsNewListSortbyEnum = {
  CreatedOn: "-created_on",
  Id: "-id",
  LastModified: "-last_modified",
  Mitcoursenumber: "-mitcoursenumber",
  ReadableId: "-readable_id",
  StartDate: "-start_date",
  CreatedOn2: "created_on",
  Id2: "id",
  LastModified2: "last_modified",
  Mitcoursenumber2: "mitcoursenumber",
  ReadableId2: "readable_id",
  StartDate2: "start_date"
} as const
export type PodcastsNewListSortbyEnum =
  typeof PodcastsNewListSortbyEnum[keyof typeof PodcastsNewListSortbyEnum]
/**
 * @export
 */
export const PodcastsUpcomingListDepartmentEnum = {
  _1: "1",
  _10: "10",
  _11: "11",
  _12: "12",
  _14: "14",
  _15: "15",
  _16: "16",
  _17: "17",
  _18: "18",
  _2: "2",
  _20: "20",
  _21A: "21A",
  _21G: "21G",
  _21H: "21H",
  _21L: "21L",
  _21M: "21M",
  _22: "22",
  _24: "24",
  _3: "3",
  _4: "4",
  _5: "5",
  _6: "6",
  _7: "7",
  _8: "8",
  _9: "9",
  Cc: "CC",
  CmsW: "CMS-W",
  Ec: "EC",
  Es: "ES",
  Esd: "ESD",
  Hst: "HST",
  Ids: "IDS",
  Mas: "MAS",
  Pe: "PE",
  Res: "RES",
  Sts: "STS",
  Wgs: "WGS"
} as const
export type PodcastsUpcomingListDepartmentEnum =
  typeof PodcastsUpcomingListDepartmentEnum[keyof typeof PodcastsUpcomingListDepartmentEnum]
/**
 * @export
 */
export const PodcastsUpcomingListOfferedByEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Mitpe: "mitpe",
  Mitx: "mitx",
  Ocw: "ocw",
  Scc: "scc",
  See: "see",
  Xpro: "xpro"
} as const
export type PodcastsUpcomingListOfferedByEnum =
  typeof PodcastsUpcomingListOfferedByEnum[keyof typeof PodcastsUpcomingListOfferedByEnum]
/**
 * @export
 */
export const PodcastsUpcomingListPlatformEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Edx: "edx",
  Emeritus: "emeritus",
  Globalalumni: "globalalumni",
  Mitpe: "mitpe",
  Mitxonline: "mitxonline",
  Ocw: "ocw",
  Oll: "oll",
  Podcast: "podcast",
  Scc: "scc",
  See: "see",
  Simplilearn: "simplilearn",
  Susskind: "susskind",
  Whu: "whu",
  Xpro: "xpro"
} as const
export type PodcastsUpcomingListPlatformEnum =
  typeof PodcastsUpcomingListPlatformEnum[keyof typeof PodcastsUpcomingListPlatformEnum]
/**
 * @export
 */
export const PodcastsUpcomingListResourceTypeEnum = {
  Course: "course",
  LearningPath: "learning_path",
  Podcast: "podcast",
  PodcastEpisode: "podcast_episode",
  Program: "program"
} as const
export type PodcastsUpcomingListResourceTypeEnum =
  typeof PodcastsUpcomingListResourceTypeEnum[keyof typeof PodcastsUpcomingListResourceTypeEnum]
/**
 * @export
 */
export const PodcastsUpcomingListSortbyEnum = {
  CreatedOn: "-created_on",
  Id: "-id",
  LastModified: "-last_modified",
  Mitcoursenumber: "-mitcoursenumber",
  ReadableId: "-readable_id",
  StartDate: "-start_date",
  CreatedOn2: "created_on",
  Id2: "id",
  LastModified2: "last_modified",
  Mitcoursenumber2: "mitcoursenumber",
  ReadableId2: "readable_id",
  StartDate2: "start_date"
} as const
export type PodcastsUpcomingListSortbyEnum =
  typeof PodcastsUpcomingListSortbyEnum[keyof typeof PodcastsUpcomingListSortbyEnum]

/**
 * ProgramsApi - axios parameter creator
 * @export
 */
export const ProgramsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {ProgramsListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {ProgramsListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {ProgramsListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {ProgramsListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {ProgramsListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsList: async (
      department?: ProgramsListDepartmentEnum,
      limit?: number,
      offeredBy?: ProgramsListOfferedByEnum,
      offset?: number,
      platform?: ProgramsListPlatformEnum,
      professional?: boolean,
      resourceType?: ProgramsListResourceTypeEnum,
      sortby?: ProgramsListSortbyEnum,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/programs/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (department !== undefined) {
        localVarQueryParameter["department"] = department
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offeredBy !== undefined) {
        localVarQueryParameter["offered_by"] = offeredBy
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (platform !== undefined) {
        localVarQueryParameter["platform"] = platform
      }

      if (professional !== undefined) {
        localVarQueryParameter["professional"] = professional
      }

      if (resourceType !== undefined) {
        localVarQueryParameter["resource_type"] = resourceType
      }

      if (sortby !== undefined) {
        localVarQueryParameter["sortby"] = sortby
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {ProgramsNewListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {ProgramsNewListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {ProgramsNewListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {ProgramsNewListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {ProgramsNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsNewList: async (
      department?: ProgramsNewListDepartmentEnum,
      limit?: number,
      offeredBy?: ProgramsNewListOfferedByEnum,
      offset?: number,
      platform?: ProgramsNewListPlatformEnum,
      professional?: boolean,
      resourceType?: ProgramsNewListResourceTypeEnum,
      sortby?: ProgramsNewListSortbyEnum,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/programs/new/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (department !== undefined) {
        localVarQueryParameter["department"] = department
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offeredBy !== undefined) {
        localVarQueryParameter["offered_by"] = offeredBy
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (platform !== undefined) {
        localVarQueryParameter["platform"] = platform
      }

      if (professional !== undefined) {
        localVarQueryParameter["professional"] = professional
      }

      if (resourceType !== undefined) {
        localVarQueryParameter["resource_type"] = resourceType
      }

      if (sortby !== undefined) {
        localVarQueryParameter["sortby"] = sortby
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("programsRetrieve", "id", id)
      const localVarPath = `/api/v1/programs/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {ProgramsUpcomingListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {ProgramsUpcomingListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {ProgramsUpcomingListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {ProgramsUpcomingListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {ProgramsUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsUpcomingList: async (
      department?: ProgramsUpcomingListDepartmentEnum,
      limit?: number,
      offeredBy?: ProgramsUpcomingListOfferedByEnum,
      offset?: number,
      platform?: ProgramsUpcomingListPlatformEnum,
      professional?: boolean,
      resourceType?: ProgramsUpcomingListResourceTypeEnum,
      sortby?: ProgramsUpcomingListSortbyEnum,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/programs/upcoming/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (department !== undefined) {
        localVarQueryParameter["department"] = department
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offeredBy !== undefined) {
        localVarQueryParameter["offered_by"] = offeredBy
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (platform !== undefined) {
        localVarQueryParameter["platform"] = platform
      }

      if (professional !== undefined) {
        localVarQueryParameter["professional"] = professional
      }

      if (resourceType !== undefined) {
        localVarQueryParameter["resource_type"] = resourceType
      }

      if (sortby !== undefined) {
        localVarQueryParameter["sortby"] = sortby
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * ProgramsApi - functional programming interface
 * @export
 */
export const ProgramsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ProgramsApiAxiosParamCreator(configuration)
  return {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {ProgramsListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {ProgramsListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {ProgramsListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {ProgramsListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {ProgramsListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async programsList(
      department?: ProgramsListDepartmentEnum,
      limit?: number,
      offeredBy?: ProgramsListOfferedByEnum,
      offset?: number,
      platform?: ProgramsListPlatformEnum,
      professional?: boolean,
      resourceType?: ProgramsListResourceTypeEnum,
      sortby?: ProgramsListSortbyEnum,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.programsList(
        department,
        limit,
        offeredBy,
        offset,
        platform,
        professional,
        resourceType,
        sortby,
        options
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ProgramsApi.programsList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {ProgramsNewListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {ProgramsNewListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {ProgramsNewListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {ProgramsNewListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {ProgramsNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async programsNewList(
      department?: ProgramsNewListDepartmentEnum,
      limit?: number,
      offeredBy?: ProgramsNewListOfferedByEnum,
      offset?: number,
      platform?: ProgramsNewListPlatformEnum,
      professional?: boolean,
      resourceType?: ProgramsNewListResourceTypeEnum,
      sortby?: ProgramsNewListSortbyEnum,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.programsNewList(
        department,
        limit,
        offeredBy,
        offset,
        platform,
        professional,
        resourceType,
        sortby,
        options
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ProgramsApi.programsNewList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async programsRetrieve(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResource>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.programsRetrieve(id, options)
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ProgramsApi.programsRetrieve"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {ProgramsUpcomingListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {ProgramsUpcomingListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {ProgramsUpcomingListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {ProgramsUpcomingListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {ProgramsUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async programsUpcomingList(
      department?: ProgramsUpcomingListDepartmentEnum,
      limit?: number,
      offeredBy?: ProgramsUpcomingListOfferedByEnum,
      offset?: number,
      platform?: ProgramsUpcomingListPlatformEnum,
      professional?: boolean,
      resourceType?: ProgramsUpcomingListResourceTypeEnum,
      sortby?: ProgramsUpcomingListSortbyEnum,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.programsUpcomingList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ProgramsApi.programsUpcomingList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    }
  }
}

/**
 * ProgramsApi - factory interface
 * @export
 */
export const ProgramsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ProgramsApiFp(configuration)
  return {
    /**
     * Get a paginated list of learning resources.
     * @summary List
     * @param {ProgramsListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {ProgramsListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {ProgramsListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {ProgramsListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {ProgramsListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsList(
      department?: ProgramsListDepartmentEnum,
      limit?: number,
      offeredBy?: ProgramsListOfferedByEnum,
      offset?: number,
      platform?: ProgramsListPlatformEnum,
      professional?: boolean,
      resourceType?: ProgramsListResourceTypeEnum,
      sortby?: ProgramsListSortbyEnum,
      options?: any
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .programsList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of newly released resources.
     * @summary List New
     * @param {ProgramsNewListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {ProgramsNewListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {ProgramsNewListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {ProgramsNewListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {ProgramsNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsNewList(
      department?: ProgramsNewListDepartmentEnum,
      limit?: number,
      offeredBy?: ProgramsNewListOfferedByEnum,
      offset?: number,
      platform?: ProgramsNewListPlatformEnum,
      professional?: boolean,
      resourceType?: ProgramsNewListResourceTypeEnum,
      sortby?: ProgramsNewListSortbyEnum,
      options?: any
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .programsNewList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Retrieve a single learning resource.
     * @summary Retrieve
     * @param {number} id A unique integer value identifying this learning resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsRetrieve(
      id: number,
      options?: any
    ): AxiosPromise<LearningResource> {
      return localVarFp
        .programsRetrieve(id, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Get a paginated list of upcoming resources.
     * @summary List Upcoming
     * @param {ProgramsUpcomingListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
     * @param {number} [limit] Number of results to return per page.
     * @param {ProgramsUpcomingListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
     * @param {number} [offset] The initial index from which to return the results.
     * @param {ProgramsUpcomingListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
     * @param {boolean} [professional]
     * @param {ProgramsUpcomingListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
     * @param {ProgramsUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsUpcomingList(
      department?: ProgramsUpcomingListDepartmentEnum,
      limit?: number,
      offeredBy?: ProgramsUpcomingListOfferedByEnum,
      offset?: number,
      platform?: ProgramsUpcomingListPlatformEnum,
      professional?: boolean,
      resourceType?: ProgramsUpcomingListResourceTypeEnum,
      sortby?: ProgramsUpcomingListSortbyEnum,
      options?: any
    ): AxiosPromise<PaginatedLearningResourceList> {
      return localVarFp
        .programsUpcomingList(
          department,
          limit,
          offeredBy,
          offset,
          platform,
          professional,
          resourceType,
          sortby,
          options
        )
        .then(request => request(axios, basePath))
    }
  }
}

/**
 * ProgramsApi - object-oriented interface
 * @export
 * @class ProgramsApi
 * @extends {BaseAPI}
 */
export class ProgramsApi extends BaseAPI {
  /**
   * Get a paginated list of learning resources.
   * @summary List
   * @param {ProgramsListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
   * @param {number} [limit] Number of results to return per page.
   * @param {ProgramsListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @param {number} [offset] The initial index from which to return the results.
   * @param {ProgramsListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
   * @param {boolean} [professional]
   * @param {ProgramsListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
   * @param {ProgramsListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProgramsApi
   */
  public programsList(
    department?: ProgramsListDepartmentEnum,
    limit?: number,
    offeredBy?: ProgramsListOfferedByEnum,
    offset?: number,
    platform?: ProgramsListPlatformEnum,
    professional?: boolean,
    resourceType?: ProgramsListResourceTypeEnum,
    sortby?: ProgramsListSortbyEnum,
    options?: AxiosRequestConfig
  ) {
    return ProgramsApiFp(this.configuration)
      .programsList(
        department,
        limit,
        offeredBy,
        offset,
        platform,
        professional,
        resourceType,
        sortby,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of newly released resources.
   * @summary List New
   * @param {ProgramsNewListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
   * @param {number} [limit] Number of results to return per page.
   * @param {ProgramsNewListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @param {number} [offset] The initial index from which to return the results.
   * @param {ProgramsNewListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
   * @param {boolean} [professional]
   * @param {ProgramsNewListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
   * @param {ProgramsNewListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProgramsApi
   */
  public programsNewList(
    department?: ProgramsNewListDepartmentEnum,
    limit?: number,
    offeredBy?: ProgramsNewListOfferedByEnum,
    offset?: number,
    platform?: ProgramsNewListPlatformEnum,
    professional?: boolean,
    resourceType?: ProgramsNewListResourceTypeEnum,
    sortby?: ProgramsNewListSortbyEnum,
    options?: AxiosRequestConfig
  ) {
    return ProgramsApiFp(this.configuration)
      .programsNewList(
        department,
        limit,
        offeredBy,
        offset,
        platform,
        professional,
        resourceType,
        sortby,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Retrieve a single learning resource.
   * @summary Retrieve
   * @param {number} id A unique integer value identifying this learning resource.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProgramsApi
   */
  public programsRetrieve(id: number, options?: AxiosRequestConfig) {
    return ProgramsApiFp(this.configuration)
      .programsRetrieve(id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Get a paginated list of upcoming resources.
   * @summary List Upcoming
   * @param {ProgramsUpcomingListDepartmentEnum} [department] Department ID  * &#x60;1&#x60; - Civil and Environmental Engineering * &#x60;2&#x60; - Mechanical Engineering * &#x60;3&#x60; - Materials Science and Engineering * &#x60;4&#x60; - Architecture * &#x60;5&#x60; - Chemistry * &#x60;6&#x60; - Electrical Engineering and Computer Science * &#x60;7&#x60; - Biology * &#x60;8&#x60; - Physics * &#x60;9&#x60; - Brain and Cognitive Sciences * &#x60;10&#x60; - Chemical Engineering * &#x60;11&#x60; - Urban Studies and Planning * &#x60;12&#x60; - Earth, Atmospheric, and Planetary Sciences * &#x60;14&#x60; - Economics * &#x60;15&#x60; - Sloan School of Management * &#x60;16&#x60; - Aeronautics and Astronautics * &#x60;17&#x60; - Political Science * &#x60;18&#x60; - Mathematics * &#x60;20&#x60; - Biological Engineering * &#x60;21A&#x60; - Anthropology * &#x60;21G&#x60; - Global Studies and Languages * &#x60;21H&#x60; - History * &#x60;21L&#x60; - Literature * &#x60;21M&#x60; - Music and Theater Arts * &#x60;22&#x60; - Nuclear Science and Engineering * &#x60;24&#x60; - Linguistics and Philosophy * &#x60;CC&#x60; - Concourse * &#x60;CMS-W&#x60; - Comparative Media Studies/Writing * &#x60;EC&#x60; - Edgerton Center * &#x60;ES&#x60; - Experimental Study Group * &#x60;ESD&#x60; - Engineering Systems Division * &#x60;HST&#x60; - Health Sciences and Technology * &#x60;IDS&#x60; - Institute for Data, Systems, and Society * &#x60;MAS&#x60; - Media Arts and Sciences * &#x60;PE&#x60; - Athletics, Physical Education and Recreation * &#x60;RES&#x60; - Supplemental Resources * &#x60;STS&#x60; - Science, Technology, and Society * &#x60;WGS&#x60; - Women\&#39;s and Gender Studies
   * @param {number} [limit] Number of results to return per page.
   * @param {ProgramsUpcomingListOfferedByEnum} [offeredBy] Offered By  * &#x60;mitx&#x60; - MITx * &#x60;ocw&#x60; - OCW * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics
   * @param {number} [offset] The initial index from which to return the results.
   * @param {ProgramsUpcomingListPlatformEnum} [platform] Platform  * &#x60;edx&#x60; - edX * &#x60;ocw&#x60; - OCW * &#x60;oll&#x60; - Open Learning Library * &#x60;mitxonline&#x60; - MITx Online * &#x60;bootcamps&#x60; - Bootcamps * &#x60;xpro&#x60; - xPRO * &#x60;csail&#x60; - CSAIL * &#x60;mitpe&#x60; - Professional Education * &#x60;see&#x60; - Sloan Executive Education * &#x60;scc&#x60; - Schwarzman College of Computing * &#x60;ctl&#x60; - Center for Transportation &amp; Logistics * &#x60;whu&#x60; - WHU * &#x60;susskind&#x60; - Susskind * &#x60;globalalumni&#x60; - Global Alumni * &#x60;simplilearn&#x60; - Simplilearn * &#x60;emeritus&#x60; - Emeritus * &#x60;podcast&#x60; - Podcast
   * @param {boolean} [professional]
   * @param {ProgramsUpcomingListResourceTypeEnum} [resourceType] Resource Type  * &#x60;course&#x60; - Course * &#x60;program&#x60; - Program * &#x60;learning_path&#x60; - Learning Path * &#x60;podcast&#x60; - Podcast * &#x60;podcast_episode&#x60; - Podcast Episode
   * @param {ProgramsUpcomingListSortbyEnum} [sortby] Sort By  * &#x60;id&#x60; - Object ID ascending * &#x60;-id&#x60; - Object ID descending * &#x60;readable_id&#x60; - Readable ID ascending * &#x60;-readable_id&#x60; - Readable ID descending * &#x60;last_modified&#x60; - Last Modified Date ascending * &#x60;-last_modified&#x60; - Last Modified Date descending * &#x60;created_on&#x60; - Creation Date ascending * &#x60;-created_on&#x60; - CreationDate descending * &#x60;start_date&#x60; - Start Date ascending * &#x60;-start_date&#x60; - Start Date descending * &#x60;mitcoursenumber&#x60; - MIT course number ascending * &#x60;-mitcoursenumber&#x60; - MIT course number descending
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProgramsApi
   */
  public programsUpcomingList(
    department?: ProgramsUpcomingListDepartmentEnum,
    limit?: number,
    offeredBy?: ProgramsUpcomingListOfferedByEnum,
    offset?: number,
    platform?: ProgramsUpcomingListPlatformEnum,
    professional?: boolean,
    resourceType?: ProgramsUpcomingListResourceTypeEnum,
    sortby?: ProgramsUpcomingListSortbyEnum,
    options?: AxiosRequestConfig
  ) {
    return ProgramsApiFp(this.configuration)
      .programsUpcomingList(
        department,
        limit,
        offeredBy,
        offset,
        platform,
        professional,
        resourceType,
        sortby,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }
}

/**
 * @export
 */
export const ProgramsListDepartmentEnum = {
  _1: "1",
  _10: "10",
  _11: "11",
  _12: "12",
  _14: "14",
  _15: "15",
  _16: "16",
  _17: "17",
  _18: "18",
  _2: "2",
  _20: "20",
  _21A: "21A",
  _21G: "21G",
  _21H: "21H",
  _21L: "21L",
  _21M: "21M",
  _22: "22",
  _24: "24",
  _3: "3",
  _4: "4",
  _5: "5",
  _6: "6",
  _7: "7",
  _8: "8",
  _9: "9",
  Cc: "CC",
  CmsW: "CMS-W",
  Ec: "EC",
  Es: "ES",
  Esd: "ESD",
  Hst: "HST",
  Ids: "IDS",
  Mas: "MAS",
  Pe: "PE",
  Res: "RES",
  Sts: "STS",
  Wgs: "WGS"
} as const
export type ProgramsListDepartmentEnum =
  typeof ProgramsListDepartmentEnum[keyof typeof ProgramsListDepartmentEnum]
/**
 * @export
 */
export const ProgramsListOfferedByEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Mitpe: "mitpe",
  Mitx: "mitx",
  Ocw: "ocw",
  Scc: "scc",
  See: "see",
  Xpro: "xpro"
} as const
export type ProgramsListOfferedByEnum =
  typeof ProgramsListOfferedByEnum[keyof typeof ProgramsListOfferedByEnum]
/**
 * @export
 */
export const ProgramsListPlatformEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Edx: "edx",
  Emeritus: "emeritus",
  Globalalumni: "globalalumni",
  Mitpe: "mitpe",
  Mitxonline: "mitxonline",
  Ocw: "ocw",
  Oll: "oll",
  Podcast: "podcast",
  Scc: "scc",
  See: "see",
  Simplilearn: "simplilearn",
  Susskind: "susskind",
  Whu: "whu",
  Xpro: "xpro"
} as const
export type ProgramsListPlatformEnum =
  typeof ProgramsListPlatformEnum[keyof typeof ProgramsListPlatformEnum]
/**
 * @export
 */
export const ProgramsListResourceTypeEnum = {
  Course: "course",
  LearningPath: "learning_path",
  Podcast: "podcast",
  PodcastEpisode: "podcast_episode",
  Program: "program"
} as const
export type ProgramsListResourceTypeEnum =
  typeof ProgramsListResourceTypeEnum[keyof typeof ProgramsListResourceTypeEnum]
/**
 * @export
 */
export const ProgramsListSortbyEnum = {
  CreatedOn: "-created_on",
  Id: "-id",
  LastModified: "-last_modified",
  Mitcoursenumber: "-mitcoursenumber",
  ReadableId: "-readable_id",
  StartDate: "-start_date",
  CreatedOn2: "created_on",
  Id2: "id",
  LastModified2: "last_modified",
  Mitcoursenumber2: "mitcoursenumber",
  ReadableId2: "readable_id",
  StartDate2: "start_date"
} as const
export type ProgramsListSortbyEnum =
  typeof ProgramsListSortbyEnum[keyof typeof ProgramsListSortbyEnum]
/**
 * @export
 */
export const ProgramsNewListDepartmentEnum = {
  _1: "1",
  _10: "10",
  _11: "11",
  _12: "12",
  _14: "14",
  _15: "15",
  _16: "16",
  _17: "17",
  _18: "18",
  _2: "2",
  _20: "20",
  _21A: "21A",
  _21G: "21G",
  _21H: "21H",
  _21L: "21L",
  _21M: "21M",
  _22: "22",
  _24: "24",
  _3: "3",
  _4: "4",
  _5: "5",
  _6: "6",
  _7: "7",
  _8: "8",
  _9: "9",
  Cc: "CC",
  CmsW: "CMS-W",
  Ec: "EC",
  Es: "ES",
  Esd: "ESD",
  Hst: "HST",
  Ids: "IDS",
  Mas: "MAS",
  Pe: "PE",
  Res: "RES",
  Sts: "STS",
  Wgs: "WGS"
} as const
export type ProgramsNewListDepartmentEnum =
  typeof ProgramsNewListDepartmentEnum[keyof typeof ProgramsNewListDepartmentEnum]
/**
 * @export
 */
export const ProgramsNewListOfferedByEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Mitpe: "mitpe",
  Mitx: "mitx",
  Ocw: "ocw",
  Scc: "scc",
  See: "see",
  Xpro: "xpro"
} as const
export type ProgramsNewListOfferedByEnum =
  typeof ProgramsNewListOfferedByEnum[keyof typeof ProgramsNewListOfferedByEnum]
/**
 * @export
 */
export const ProgramsNewListPlatformEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Edx: "edx",
  Emeritus: "emeritus",
  Globalalumni: "globalalumni",
  Mitpe: "mitpe",
  Mitxonline: "mitxonline",
  Ocw: "ocw",
  Oll: "oll",
  Podcast: "podcast",
  Scc: "scc",
  See: "see",
  Simplilearn: "simplilearn",
  Susskind: "susskind",
  Whu: "whu",
  Xpro: "xpro"
} as const
export type ProgramsNewListPlatformEnum =
  typeof ProgramsNewListPlatformEnum[keyof typeof ProgramsNewListPlatformEnum]
/**
 * @export
 */
export const ProgramsNewListResourceTypeEnum = {
  Course: "course",
  LearningPath: "learning_path",
  Podcast: "podcast",
  PodcastEpisode: "podcast_episode",
  Program: "program"
} as const
export type ProgramsNewListResourceTypeEnum =
  typeof ProgramsNewListResourceTypeEnum[keyof typeof ProgramsNewListResourceTypeEnum]
/**
 * @export
 */
export const ProgramsNewListSortbyEnum = {
  CreatedOn: "-created_on",
  Id: "-id",
  LastModified: "-last_modified",
  Mitcoursenumber: "-mitcoursenumber",
  ReadableId: "-readable_id",
  StartDate: "-start_date",
  CreatedOn2: "created_on",
  Id2: "id",
  LastModified2: "last_modified",
  Mitcoursenumber2: "mitcoursenumber",
  ReadableId2: "readable_id",
  StartDate2: "start_date"
} as const
export type ProgramsNewListSortbyEnum =
  typeof ProgramsNewListSortbyEnum[keyof typeof ProgramsNewListSortbyEnum]
/**
 * @export
 */
export const ProgramsUpcomingListDepartmentEnum = {
  _1: "1",
  _10: "10",
  _11: "11",
  _12: "12",
  _14: "14",
  _15: "15",
  _16: "16",
  _17: "17",
  _18: "18",
  _2: "2",
  _20: "20",
  _21A: "21A",
  _21G: "21G",
  _21H: "21H",
  _21L: "21L",
  _21M: "21M",
  _22: "22",
  _24: "24",
  _3: "3",
  _4: "4",
  _5: "5",
  _6: "6",
  _7: "7",
  _8: "8",
  _9: "9",
  Cc: "CC",
  CmsW: "CMS-W",
  Ec: "EC",
  Es: "ES",
  Esd: "ESD",
  Hst: "HST",
  Ids: "IDS",
  Mas: "MAS",
  Pe: "PE",
  Res: "RES",
  Sts: "STS",
  Wgs: "WGS"
} as const
export type ProgramsUpcomingListDepartmentEnum =
  typeof ProgramsUpcomingListDepartmentEnum[keyof typeof ProgramsUpcomingListDepartmentEnum]
/**
 * @export
 */
export const ProgramsUpcomingListOfferedByEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Mitpe: "mitpe",
  Mitx: "mitx",
  Ocw: "ocw",
  Scc: "scc",
  See: "see",
  Xpro: "xpro"
} as const
export type ProgramsUpcomingListOfferedByEnum =
  typeof ProgramsUpcomingListOfferedByEnum[keyof typeof ProgramsUpcomingListOfferedByEnum]
/**
 * @export
 */
export const ProgramsUpcomingListPlatformEnum = {
  Bootcamps: "bootcamps",
  Csail: "csail",
  Ctl: "ctl",
  Edx: "edx",
  Emeritus: "emeritus",
  Globalalumni: "globalalumni",
  Mitpe: "mitpe",
  Mitxonline: "mitxonline",
  Ocw: "ocw",
  Oll: "oll",
  Podcast: "podcast",
  Scc: "scc",
  See: "see",
  Simplilearn: "simplilearn",
  Susskind: "susskind",
  Whu: "whu",
  Xpro: "xpro"
} as const
export type ProgramsUpcomingListPlatformEnum =
  typeof ProgramsUpcomingListPlatformEnum[keyof typeof ProgramsUpcomingListPlatformEnum]
/**
 * @export
 */
export const ProgramsUpcomingListResourceTypeEnum = {
  Course: "course",
  LearningPath: "learning_path",
  Podcast: "podcast",
  PodcastEpisode: "podcast_episode",
  Program: "program"
} as const
export type ProgramsUpcomingListResourceTypeEnum =
  typeof ProgramsUpcomingListResourceTypeEnum[keyof typeof ProgramsUpcomingListResourceTypeEnum]
/**
 * @export
 */
export const ProgramsUpcomingListSortbyEnum = {
  CreatedOn: "-created_on",
  Id: "-id",
  LastModified: "-last_modified",
  Mitcoursenumber: "-mitcoursenumber",
  ReadableId: "-readable_id",
  StartDate: "-start_date",
  CreatedOn2: "created_on",
  Id2: "id",
  LastModified2: "last_modified",
  Mitcoursenumber2: "mitcoursenumber",
  ReadableId2: "readable_id",
  StartDate2: "start_date"
} as const
export type ProgramsUpcomingListSortbyEnum =
  typeof ProgramsUpcomingListSortbyEnum[keyof typeof ProgramsUpcomingListSortbyEnum]

/**
 * TopicsApi - axios parameter creator
 * @export
 */
export const TopicsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Viewset for topics
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    topicsList: async (
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/topics/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for topics
     * @param {number} id A unique integer value identifying this learning resource topic.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    topicsRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("topicsRetrieve", "id", id)
      const localVarPath = `/api/v1/topics/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * TopicsApi - functional programming interface
 * @export
 */
export const TopicsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TopicsApiAxiosParamCreator(configuration)
  return {
    /**
     * Viewset for topics
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async topicsList(
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedLearningResourceTopicList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.topicsList(
        limit,
        offset,
        options
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["TopicsApi.topicsList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for topics
     * @param {number} id A unique integer value identifying this learning resource topic.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async topicsRetrieve(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LearningResourceTopic>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.topicsRetrieve(
        id,
        options
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["TopicsApi.topicsRetrieve"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    }
  }
}

/**
 * TopicsApi - factory interface
 * @export
 */
export const TopicsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = TopicsApiFp(configuration)
  return {
    /**
     * Viewset for topics
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    topicsList(
      limit?: number,
      offset?: number,
      options?: any
    ): AxiosPromise<PaginatedLearningResourceTopicList> {
      return localVarFp
        .topicsList(limit, offset, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for topics
     * @param {number} id A unique integer value identifying this learning resource topic.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    topicsRetrieve(
      id: number,
      options?: any
    ): AxiosPromise<LearningResourceTopic> {
      return localVarFp
        .topicsRetrieve(id, options)
        .then(request => request(axios, basePath))
    }
  }
}

/**
 * TopicsApi - object-oriented interface
 * @export
 * @class TopicsApi
 * @extends {BaseAPI}
 */
export class TopicsApi extends BaseAPI {
  /**
   * Viewset for topics
   * @param {number} [limit] Number of results to return per page.
   * @param {number} [offset] The initial index from which to return the results.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TopicsApi
   */
  public topicsList(
    limit?: number,
    offset?: number,
    options?: AxiosRequestConfig
  ) {
    return TopicsApiFp(this.configuration)
      .topicsList(limit, offset, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for topics
   * @param {number} id A unique integer value identifying this learning resource topic.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TopicsApi
   */
  public topicsRetrieve(id: number, options?: AxiosRequestConfig) {
    return TopicsApiFp(this.configuration)
      .topicsRetrieve(id, options)
      .then(request => request(this.axios, this.basePath))
  }
}

/**
 * UserlistsApi - axios parameter creator
 * @export
 */
export const UserlistsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Viewset for UserLists
     * @param {UserListRequest} userListRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsCreate: async (
      userListRequest: UserListRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userListRequest' is not null or undefined
      assertParamExists("userlistsCreate", "userListRequest", userListRequest)
      const localVarPath = `/api/v1/userlists/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        userListRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for UserLists
     * @param {number} id A unique integer value identifying this user list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsDestroy: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("userlistsDestroy", "id", id)
      const localVarPath = `/api/v1/userlists/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for UserLists
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsList: async (
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/userlists/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for UserLists
     * @param {number} id A unique integer value identifying this user list.
     * @param {PatchedUserListRequest} [patchedUserListRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsPartialUpdate: async (
      id: number,
      patchedUserListRequest?: PatchedUserListRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("userlistsPartialUpdate", "id", id)
      const localVarPath = `/api/v1/userlists/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchedUserListRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} parentId
     * @param {UserListRelationshipRequest} userListRelationshipRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsResourcesCreate: async (
      parentId: number,
      userListRelationshipRequest: UserListRelationshipRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("userlistsResourcesCreate", "parentId", parentId)
      // verify required parameter 'userListRelationshipRequest' is not null or undefined
      assertParamExists(
        "userlistsResourcesCreate",
        "userListRelationshipRequest",
        userListRelationshipRequest
      )
      const localVarPath = `/api/v1/userlists/{parent_id}/resources/`.replace(
        `{${"parent_id"}}`,
        encodeURIComponent(String(parentId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        userListRelationshipRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} id A unique integer value identifying this user list relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsResourcesDestroy: async (
      id: number,
      parentId: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("userlistsResourcesDestroy", "id", id)
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("userlistsResourcesDestroy", "parentId", parentId)
      const localVarPath = `/api/v1/userlists/{parent_id}/resources/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} parentId
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsResourcesList: async (
      parentId: number,
      limit?: number,
      offset?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("userlistsResourcesList", "parentId", parentId)
      const localVarPath = `/api/v1/userlists/{parent_id}/resources/`.replace(
        `{${"parent_id"}}`,
        encodeURIComponent(String(parentId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} id A unique integer value identifying this user list relationship.
     * @param {number} parentId
     * @param {PatchedUserListRelationshipRequest} [patchedUserListRelationshipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsResourcesPartialUpdate: async (
      id: number,
      parentId: number,
      patchedUserListRelationshipRequest?: PatchedUserListRelationshipRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("userlistsResourcesPartialUpdate", "id", id)
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("userlistsResourcesPartialUpdate", "parentId", parentId)
      const localVarPath = `/api/v1/userlists/{parent_id}/resources/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchedUserListRelationshipRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} id A unique integer value identifying this user list relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsResourcesRetrieve: async (
      id: number,
      parentId: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("userlistsResourcesRetrieve", "id", id)
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("userlistsResourcesRetrieve", "parentId", parentId)
      const localVarPath = `/api/v1/userlists/{parent_id}/resources/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} id A unique integer value identifying this user list relationship.
     * @param {number} parentId
     * @param {UserListRelationshipRequest} userListRelationshipRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsResourcesUpdate: async (
      id: number,
      parentId: number,
      userListRelationshipRequest: UserListRelationshipRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("userlistsResourcesUpdate", "id", id)
      // verify required parameter 'parentId' is not null or undefined
      assertParamExists("userlistsResourcesUpdate", "parentId", parentId)
      // verify required parameter 'userListRelationshipRequest' is not null or undefined
      assertParamExists(
        "userlistsResourcesUpdate",
        "userListRelationshipRequest",
        userListRelationshipRequest
      )
      const localVarPath = `/api/v1/userlists/{parent_id}/resources/{id}/`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        userListRelationshipRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for UserLists
     * @param {number} id A unique integer value identifying this user list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsRetrieve: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("userlistsRetrieve", "id", id)
      const localVarPath = `/api/v1/userlists/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Viewset for UserLists
     * @param {number} id A unique integer value identifying this user list.
     * @param {UserListRequest} userListRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsUpdate: async (
      id: number,
      userListRequest: UserListRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("userlistsUpdate", "id", id)
      // verify required parameter 'userListRequest' is not null or undefined
      assertParamExists("userlistsUpdate", "userListRequest", userListRequest)
      const localVarPath = `/api/v1/userlists/{id}/`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication cookieAuth required

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        userListRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * UserlistsApi - functional programming interface
 * @export
 */
export const UserlistsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserlistsApiAxiosParamCreator(configuration)
  return {
    /**
     * Viewset for UserLists
     * @param {UserListRequest} userListRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userlistsCreate(
      userListRequest: UserListRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userlistsCreate(
        userListRequest,
        options
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["UserlistsApi.userlistsCreate"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for UserLists
     * @param {number} id A unique integer value identifying this user list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userlistsDestroy(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userlistsDestroy(id, options)
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["UserlistsApi.userlistsDestroy"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for UserLists
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userlistsList(
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedUserListList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userlistsList(
        limit,
        offset,
        options
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["UserlistsApi.userlistsList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for UserLists
     * @param {number} id A unique integer value identifying this user list.
     * @param {PatchedUserListRequest} [patchedUserListRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userlistsPartialUpdate(
      id: number,
      patchedUserListRequest?: PatchedUserListRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userlistsPartialUpdate(
          id,
          patchedUserListRequest,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["UserlistsApi.userlistsPartialUpdate"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} parentId
     * @param {UserListRelationshipRequest} userListRelationshipRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userlistsResourcesCreate(
      parentId: number,
      userListRelationshipRequest: UserListRelationshipRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UserListRelationship>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userlistsResourcesCreate(
          parentId,
          userListRelationshipRequest,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["UserlistsApi.userlistsResourcesCreate"]?.[index]
          ?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} id A unique integer value identifying this user list relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userlistsResourcesDestroy(
      id: number,
      parentId: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userlistsResourcesDestroy(
          id,
          parentId,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["UserlistsApi.userlistsResourcesDestroy"]?.[index]
          ?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} parentId
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userlistsResourcesList(
      parentId: number,
      limit?: number,
      offset?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedUserListRelationshipList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userlistsResourcesList(
          parentId,
          limit,
          offset,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["UserlistsApi.userlistsResourcesList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} id A unique integer value identifying this user list relationship.
     * @param {number} parentId
     * @param {PatchedUserListRelationshipRequest} [patchedUserListRelationshipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userlistsResourcesPartialUpdate(
      id: number,
      parentId: number,
      patchedUserListRelationshipRequest?: PatchedUserListRelationshipRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UserListRelationship>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userlistsResourcesPartialUpdate(
          id,
          parentId,
          patchedUserListRelationshipRequest,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["UserlistsApi.userlistsResourcesPartialUpdate"]?.[
          index
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} id A unique integer value identifying this user list relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userlistsResourcesRetrieve(
      id: number,
      parentId: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UserListRelationship>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userlistsResourcesRetrieve(
          id,
          parentId,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["UserlistsApi.userlistsResourcesRetrieve"]?.[index]
          ?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} id A unique integer value identifying this user list relationship.
     * @param {number} parentId
     * @param {UserListRelationshipRequest} userListRelationshipRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userlistsResourcesUpdate(
      id: number,
      parentId: number,
      userListRelationshipRequest: UserListRelationshipRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UserListRelationship>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userlistsResourcesUpdate(
          id,
          parentId,
          userListRelationshipRequest,
          options
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["UserlistsApi.userlistsResourcesUpdate"]?.[index]
          ?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for UserLists
     * @param {number} id A unique integer value identifying this user list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userlistsRetrieve(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userlistsRetrieve(id, options)
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["UserlistsApi.userlistsRetrieve"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    },
    /**
     * Viewset for UserLists
     * @param {number} id A unique integer value identifying this user list.
     * @param {UserListRequest} userListRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userlistsUpdate(
      id: number,
      userListRequest: UserListRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userlistsUpdate(
        id,
        userListRequest,
        options
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["UserlistsApi.userlistsUpdate"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath)
    }
  }
}

/**
 * UserlistsApi - factory interface
 * @export
 */
export const UserlistsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserlistsApiFp(configuration)
  return {
    /**
     * Viewset for UserLists
     * @param {UserListRequest} userListRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsCreate(
      userListRequest: UserListRequest,
      options?: any
    ): AxiosPromise<UserList> {
      return localVarFp
        .userlistsCreate(userListRequest, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for UserLists
     * @param {number} id A unique integer value identifying this user list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsDestroy(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .userlistsDestroy(id, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for UserLists
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsList(
      limit?: number,
      offset?: number,
      options?: any
    ): AxiosPromise<PaginatedUserListList> {
      return localVarFp
        .userlistsList(limit, offset, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for UserLists
     * @param {number} id A unique integer value identifying this user list.
     * @param {PatchedUserListRequest} [patchedUserListRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsPartialUpdate(
      id: number,
      patchedUserListRequest?: PatchedUserListRequest,
      options?: any
    ): AxiosPromise<UserList> {
      return localVarFp
        .userlistsPartialUpdate(id, patchedUserListRequest, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} parentId
     * @param {UserListRelationshipRequest} userListRelationshipRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsResourcesCreate(
      parentId: number,
      userListRelationshipRequest: UserListRelationshipRequest,
      options?: any
    ): AxiosPromise<UserListRelationship> {
      return localVarFp
        .userlistsResourcesCreate(
          parentId,
          userListRelationshipRequest,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} id A unique integer value identifying this user list relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsResourcesDestroy(
      id: number,
      parentId: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .userlistsResourcesDestroy(id, parentId, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} parentId
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsResourcesList(
      parentId: number,
      limit?: number,
      offset?: number,
      options?: any
    ): AxiosPromise<PaginatedUserListRelationshipList> {
      return localVarFp
        .userlistsResourcesList(parentId, limit, offset, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} id A unique integer value identifying this user list relationship.
     * @param {number} parentId
     * @param {PatchedUserListRelationshipRequest} [patchedUserListRelationshipRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsResourcesPartialUpdate(
      id: number,
      parentId: number,
      patchedUserListRelationshipRequest?: PatchedUserListRelationshipRequest,
      options?: any
    ): AxiosPromise<UserListRelationship> {
      return localVarFp
        .userlistsResourcesPartialUpdate(
          id,
          parentId,
          patchedUserListRelationshipRequest,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} id A unique integer value identifying this user list relationship.
     * @param {number} parentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsResourcesRetrieve(
      id: number,
      parentId: number,
      options?: any
    ): AxiosPromise<UserListRelationship> {
      return localVarFp
        .userlistsResourcesRetrieve(id, parentId, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for UserListRelationships
     * @param {number} id A unique integer value identifying this user list relationship.
     * @param {number} parentId
     * @param {UserListRelationshipRequest} userListRelationshipRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsResourcesUpdate(
      id: number,
      parentId: number,
      userListRelationshipRequest: UserListRelationshipRequest,
      options?: any
    ): AxiosPromise<UserListRelationship> {
      return localVarFp
        .userlistsResourcesUpdate(
          id,
          parentId,
          userListRelationshipRequest,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for UserLists
     * @param {number} id A unique integer value identifying this user list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsRetrieve(id: number, options?: any): AxiosPromise<UserList> {
      return localVarFp
        .userlistsRetrieve(id, options)
        .then(request => request(axios, basePath))
    },
    /**
     * Viewset for UserLists
     * @param {number} id A unique integer value identifying this user list.
     * @param {UserListRequest} userListRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userlistsUpdate(
      id: number,
      userListRequest: UserListRequest,
      options?: any
    ): AxiosPromise<UserList> {
      return localVarFp
        .userlistsUpdate(id, userListRequest, options)
        .then(request => request(axios, basePath))
    }
  }
}

/**
 * UserlistsApi - object-oriented interface
 * @export
 * @class UserlistsApi
 * @extends {BaseAPI}
 */
export class UserlistsApi extends BaseAPI {
  /**
   * Viewset for UserLists
   * @param {UserListRequest} userListRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserlistsApi
   */
  public userlistsCreate(
    userListRequest: UserListRequest,
    options?: AxiosRequestConfig
  ) {
    return UserlistsApiFp(this.configuration)
      .userlistsCreate(userListRequest, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for UserLists
   * @param {number} id A unique integer value identifying this user list.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserlistsApi
   */
  public userlistsDestroy(id: number, options?: AxiosRequestConfig) {
    return UserlistsApiFp(this.configuration)
      .userlistsDestroy(id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for UserLists
   * @param {number} [limit] Number of results to return per page.
   * @param {number} [offset] The initial index from which to return the results.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserlistsApi
   */
  public userlistsList(
    limit?: number,
    offset?: number,
    options?: AxiosRequestConfig
  ) {
    return UserlistsApiFp(this.configuration)
      .userlistsList(limit, offset, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for UserLists
   * @param {number} id A unique integer value identifying this user list.
   * @param {PatchedUserListRequest} [patchedUserListRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserlistsApi
   */
  public userlistsPartialUpdate(
    id: number,
    patchedUserListRequest?: PatchedUserListRequest,
    options?: AxiosRequestConfig
  ) {
    return UserlistsApiFp(this.configuration)
      .userlistsPartialUpdate(id, patchedUserListRequest, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for UserListRelationships
   * @param {number} parentId
   * @param {UserListRelationshipRequest} userListRelationshipRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserlistsApi
   */
  public userlistsResourcesCreate(
    parentId: number,
    userListRelationshipRequest: UserListRelationshipRequest,
    options?: AxiosRequestConfig
  ) {
    return UserlistsApiFp(this.configuration)
      .userlistsResourcesCreate(parentId, userListRelationshipRequest, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for UserListRelationships
   * @param {number} id A unique integer value identifying this user list relationship.
   * @param {number} parentId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserlistsApi
   */
  public userlistsResourcesDestroy(
    id: number,
    parentId: number,
    options?: AxiosRequestConfig
  ) {
    return UserlistsApiFp(this.configuration)
      .userlistsResourcesDestroy(id, parentId, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for UserListRelationships
   * @param {number} parentId
   * @param {number} [limit] Number of results to return per page.
   * @param {number} [offset] The initial index from which to return the results.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserlistsApi
   */
  public userlistsResourcesList(
    parentId: number,
    limit?: number,
    offset?: number,
    options?: AxiosRequestConfig
  ) {
    return UserlistsApiFp(this.configuration)
      .userlistsResourcesList(parentId, limit, offset, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for UserListRelationships
   * @param {number} id A unique integer value identifying this user list relationship.
   * @param {number} parentId
   * @param {PatchedUserListRelationshipRequest} [patchedUserListRelationshipRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserlistsApi
   */
  public userlistsResourcesPartialUpdate(
    id: number,
    parentId: number,
    patchedUserListRelationshipRequest?: PatchedUserListRelationshipRequest,
    options?: AxiosRequestConfig
  ) {
    return UserlistsApiFp(this.configuration)
      .userlistsResourcesPartialUpdate(
        id,
        parentId,
        patchedUserListRelationshipRequest,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for UserListRelationships
   * @param {number} id A unique integer value identifying this user list relationship.
   * @param {number} parentId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserlistsApi
   */
  public userlistsResourcesRetrieve(
    id: number,
    parentId: number,
    options?: AxiosRequestConfig
  ) {
    return UserlistsApiFp(this.configuration)
      .userlistsResourcesRetrieve(id, parentId, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for UserListRelationships
   * @param {number} id A unique integer value identifying this user list relationship.
   * @param {number} parentId
   * @param {UserListRelationshipRequest} userListRelationshipRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserlistsApi
   */
  public userlistsResourcesUpdate(
    id: number,
    parentId: number,
    userListRelationshipRequest: UserListRelationshipRequest,
    options?: AxiosRequestConfig
  ) {
    return UserlistsApiFp(this.configuration)
      .userlistsResourcesUpdate(
        id,
        parentId,
        userListRelationshipRequest,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for UserLists
   * @param {number} id A unique integer value identifying this user list.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserlistsApi
   */
  public userlistsRetrieve(id: number, options?: AxiosRequestConfig) {
    return UserlistsApiFp(this.configuration)
      .userlistsRetrieve(id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   * Viewset for UserLists
   * @param {number} id A unique integer value identifying this user list.
   * @param {UserListRequest} userListRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserlistsApi
   */
  public userlistsUpdate(
    id: number,
    userListRequest: UserListRequest,
    options?: AxiosRequestConfig
  ) {
    return UserlistsApiFp(this.configuration)
      .userlistsUpdate(id, userListRequest, options)
      .then(request => request(this.axios, this.basePath))
  }
}
